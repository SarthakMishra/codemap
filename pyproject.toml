[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "codemap"
version = "0.4.3"
description = "CLI tool for generating optimized markdown documentation from codebases"
readme = "README.md"
requires-python = ">=3.12,<3.13"
dependencies = [
    "litellm>=1.67.0",
    "numpy>=2.2.5",
    "pygments>=2.19.1",
    "python-dotenv>=1.1.0",
    "pyyaml>=6.0.2",
    "questionary>=2.1.0",
    "requests>=2.32.3",
    "rich>=14.0.0",
    "typer>=0.15.2",
    "typing-extensions>=4.13.2",
    "sentence-transformers>=4.1.0",
    "watchdog>=6.0.0",
    "tree-sitter>=0.24.0",
    "tree-sitter-language-pack>=0.7.2",
    "lancedb>=0.21.2",
    "pandas>=2.2.3",
    "multilspy>=0.0.15",
    "pytest-mock>=3.14.0",
]

[dependency-groups]
dev = [
    "isort>=6.0.1",
    "pylint>=3.3.6",
    "pyright>=1.1.399",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.0",
    "pytest-xdist[psutil]>=3.6.1",
    "ruff>=0.11.6",
]

[tool.pyright]
# Define included and excluded directories
include = ["src"]
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "vendor"
]
# Basic type checking mode - more lenient than strict
typeCheckingMode = "standard"
# Analyze unannotated functions
analyzeUnannotatedFunctions = true
# Configuration to enable good type checking but not be too strict
reportMissingImports = "error"
reportMissingTypeStubs = "warning"
reportUnusedImport = "warning"
reportUnusedVariable = "warning"
reportGeneralTypeIssues = "error"
# Useful for catching common errors
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
# Enable Python 3.12 features
pythonVersion = "3.12"
# Use library code for types when type stubs are missing
useLibraryCodeForTypes = true
# Virtual environment configuration
venvPath = "."
venv = ".venv"
# Extra paths to search for imported modules
extraPaths = ["src"]

[project.scripts]
codemap = "codemap.cli_app:main"

[tool.pytest]
testpaths = ["tests"]
pythonpath = ["src"]

[tool.ruff]
line-length = 120
target-version = "py38"

# Exclude files/directories
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "vendor"
]

[tool.ruff.lint]
# Enable all rules by default, then selectively disable
select = ["ALL"]
ignore = [
    # Rules that conflict with other tools/preferences
    "D203",  # one-blank-line-before-class
    "D212",  # multi-line-summary-first-line
    "FBT001",  # Boolean positional arg in function definition (required for typer)
    "FBT002",  # Boolean default value in function definition (required for typer)
    "C901",  # function too complex
    "PLR0911",  # too many return statements
    "PLR0912",  # too many branches
    "PLR0913",  # too many arguments in function definition
    "PLR0915",  # too many statements
    "TRY300",  # Consider moving this statement to an `else` block
    "COM812",  # Use a constant for the message in a raise statement
    "TC001",  # Move application import into a type-checking block
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "PLR2004", "ANN002", "ANN003", "SLF001", "S108"]
"src/codemap/cli/main.py" = ["ARG001"]  # Allow unused arguments in CLI functions (for API compatibility)

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-statements = 50

[tool.ruff.lint.pydocstyle]
convention = "google"
