{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeMap: AI-Powered Developer Toolkit","text":"<p>Welcome to the CodeMap documentation!</p> <p>CodeMap is an AI-powered developer toolkit designed to enhance your development workflow. It offers features like token-optimized documentation generation, semantic code analysis, and streamlined Git operations with AI assistance.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Generate Documentation: Create optimized markdown documentation and visualize repository structures.</li> <li>Smart Commits: Get AI-generated commit messages based on semantic analysis of your changes.</li> <li>AI-Powered PRs: Streamline pull request creation and management with intelligent suggestions.</li> <li>Multi-LLM Support: Integrate with various LLM providers via LiteLLM.</li> </ul> <p>Explore the documentation sections to learn more:</p> <ul> <li>Installation</li> <li>Usage Guide</li> <li>Configuration</li> <li>Development Setup</li> <li>Contributing Guide</li> </ul>"},{"location":"acknowledgements/","title":"Acknowledgments","text":"<p>CodeMap relies on these excellent open-source libraries and models:</p>"},{"location":"acknowledgements/#core-dependencies","title":"Core Dependencies","text":"<ul> <li>LiteLLM (&gt;=1.67.0) - Unified interface for LLM providers</li> <li>NumPy (&gt;=2.2.5) - Numerical computing for vector operations</li> <li>Pygments (&gt;=2.19.1) - Syntax highlighting for code snippets</li> <li>Python-dotenv (&gt;=1.1.0) - Environment variable management</li> <li>PyYAML (&gt;=6.0.2) - YAML parsing and configuration management</li> <li>Questionary (&gt;=2.1.0) - Interactive user prompts</li> <li>Requests (&gt;=2.32.3) - HTTP library for API interactions</li> <li>Rich (&gt;=14.0.0) - Beautiful terminal formatting and output</li> <li>Typer (&gt;=0.15.2) - Modern CLI framework for Python</li> <li>Typing Extensions (&gt;=4.13.2) - Backported typing features</li> <li>Sentence-Transformers (&gt;=4.1.0) - Text embeddings for semantic code analysis</li> </ul>"},{"location":"acknowledgements/#development-tools","title":"Development Tools","text":"<ul> <li>isort (&gt;=6.0.1) - Import sorting</li> <li>pylint (&gt;=3.3.6) - Code analysis</li> <li>pyright (&gt;=1.1.399) - Static type checking</li> <li>pytest (&gt;=8.3.5) - Testing framework</li> <li>pytest-cov (&gt;=6.1.1) - Test coverage reporting</li> <li>ruff (&gt;=0.11.6) - Fast Python linter</li> </ul>"},{"location":"acknowledgements/#models","title":"Models","text":"<ul> <li>Code Embeddings: Qodo/Qodo-Embed-1-1.5B - State-of-the-art embedding model optimized for code retrieval tasks.</li> <li>LLM Support: Compatible with various providers through LiteLLM including:</li> <li>OpenAI models</li> <li>Anthropic Claude models</li> <li>Groq models</li> <li>Mistral models</li> <li>Cohere models</li> <li>Together AI models</li> <li>OpenRouter providers</li> </ul>"},{"location":"acknowledgements/#special-thanks","title":"Special Thanks","text":"<ul> <li>Cursor</li> <li>OpenHands</li> <li>GitHub Actions</li> <li>Img Shields</li> <li>Codecov </li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Warning</p> <p>CodeMap currently only supports Unix-based platforms (macOS, Linux). For Windows users, we recommend using Windows Subsystem for Linux (WSL).</p> <p>Tip</p> <p>After installation, you can use either <code>codemap</code> or the shorter alias <code>cm</code> to run the commands.</p>"},{"location":"installation/#installation-using-pipx-recommended","title":"Installation using pipx (Recommended)","text":"<p>Using <code>pipx</code> is recommended as it installs the package in an isolated environment and automatically manages the PATH.</p> <pre><code># Ensure pipx is installed (install it if you haven't)\n# python3 -m pip install --user pipx\n# python3 -m pipx ensurepath\n\n# Install codemap from PyPI\npipx install codemap\n</code></pre>"},{"location":"installation/#alternative-manual-installation-using-pip","title":"Alternative: Manual Installation using pip","text":"<p>If you prefer not to use <code>pipx</code>, you can install using <code>pip</code> directly:</p> <pre><code># Install with pip (user installation)\npip install --user codemap\n\n# Make sure your PATH includes the user bin directory\n# Add the following to your shell profile (e.g., ~/.bashrc, ~/.zshrc):\n# export PATH=\"$HOME/.local/bin:$PATH\"\n# Or find the correct path using: python3 -m site --user-base\n</code></pre>"},{"location":"installation/#development-version-latest-github","title":"Development Version (Latest GitHub)","text":"<p>If you want to try the latest development version with unreleased features:</p> <pre><code># Using pipx\npipx install git+https://github.com/SarthakMishra/codemap.git\n\n# Or using pip\npip install --user git+https://github.com/SarthakMishra/codemap.git\n</code></pre>"},{"location":"installation/#updating-codemap","title":"Updating CodeMap","text":"<p>To update CodeMap to the latest version:</p> <pre><code># If installed with pipx from PyPI\npipx upgrade codemap\n\n# If installed with pip from PyPI\npip install --user --upgrade codemap\n\n# If installed from GitHub\npipx upgrade codemap  # or\npip install --user --upgrade git+https://github.com/SarthakMishra/codemap.git\n</code></pre>"},{"location":"installation/#uninstalling","title":"Uninstalling","text":"<pre><code># If installed with pipx\npipx uninstall codemap\n\n# If installed with pip\npip uninstall codemap\n</code></pre>"},{"location":"contributing/","title":"Development Setup","text":"<p>Before contributing, please read our Code of Conduct and Contributing Guidelines.</p> <ol> <li> <p>Clone the repository:</p> <pre><code>git clone https://github.com/SarthakMishra/codemap.git\ncd codemap\n</code></pre> </li> <li> <p>Install Prerequisites:</p> <ul> <li>Task: Follow the official installation guide: https://taskfile.dev/installation/</li> <li> <p>uv: Install the <code>uv</code> package manager. We recommend using <code>pipx</code>:</p> <pre><code># Using pipx (recommended)\npipx install uv\n\n# Or using pip\n# pip install uv\n</code></pre> </li> <li> <p>Python: Ensure you have Python 3.12 or later installed.</p> </li> </ul> </li> <li> <p>Set up the Virtual Environment: <pre><code># Create a virtual environment using uv (creates .venv directory)\nuv venv\n\n# Activate the virtual environment\n# On Linux/macOS (bash/zsh):\nsource .venv/bin/activate\n# On Windows (Command Prompt):\n# .venv\\Scripts\\activate.bat\n# On Windows (PowerShell):\n# .venv\\Scripts\\Activate.ps1\n</code></pre></p> </li> <li> <p>Install Dependencies:     Install project dependencies, including development tools, using <code>uv</code>:     <pre><code># Installs dependencies from pyproject.toml including the 'dev' group\nuv sync --dev\n</code></pre></p> </li> <li> <p>Verify Setup:     You can list available development tasks using Task:     <pre><code>task -l\n</code></pre>     To run all checks and tests (similar to CI):     <pre><code>task ci\n</code></pre></p> </li> </ol> <p>For detailed contribution guidelines, branching strategy, and coding standards, please refer to our Contributing Guide. </p>"},{"location":"contributing/code-of-conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"contributing/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"contributing/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Contacting individual members, contributors, or leaders privately, outside designated community mechanisms, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"contributing/code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"contributing/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"contributing/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the project maintainers. Please refer to the Contributing Guide for contact information if needed. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"contributing/code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"contributing/code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"contributing/code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"contributing/code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"contributing/code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"contributing/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations. </p>"},{"location":"contributing/guidelines/","title":"Contributing to CodeMap","text":"<p>First off, thank you for considering contributing to CodeMap! We welcome contributions from everyone, and we're excited to see how you can help make this AI-powered developer toolkit even better.</p> <p>This document provides guidelines for contributing to the project. Please read it carefully to ensure a smooth and effective contribution process.</p>"},{"location":"contributing/guidelines/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Contributing to CodeMap</li> <li>Table of Contents</li> <li>How Can I Contribute?<ul> <li>Reporting Bugs</li> <li>Suggesting Enhancements</li> <li>Code Contributions</li> </ul> </li> <li>Getting Started</li> <li>Branching Strategy (Simplified Git Flow)<ul> <li>Core Branches</li> <li>Supporting Branches</li> <li>Workflow Examples</li> </ul> </li> <li>Code Contribution Workflow</li> <li>Coding Standards</li> <li>Testing</li> <li>Commit Message Guidelines</li> <li>Pull Request Process</li> <li>Release Process<ul> <li>Automatic Releases</li> <li>Release Preparation</li> <li>Hotfix Process</li> </ul> </li> <li>Questions?</li> </ul>"},{"location":"contributing/guidelines/#how-can-i-contribute","title":"How Can I Contribute?","text":""},{"location":"contributing/guidelines/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you encounter a bug, please help us by reporting it!</p> <ol> <li>Check Existing Issues: Before creating a new issue, please search the GitHub Issues to see if the bug has already been reported.</li> <li>Create a New Issue: If the bug hasn't been reported, create a new issue. Please include:<ul> <li>A clear and descriptive title.</li> <li>Your operating system and Python version.</li> <li>Steps to reproduce the bug reliably.</li> <li>What you expected to happen.</li> <li>What actually happened (including any error messages or tracebacks).</li> <li>Screenshots or code snippets if relevant.</li> </ul> </li> </ol>"},{"location":"contributing/guidelines/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>We welcome suggestions for new features or improvements to existing ones.</p> <ol> <li>Check Existing Issues/Discussions: Search the GitHub Issues and Discussions to see if your idea has already been proposed.</li> <li>Create a New Issue/Discussion: If not, open a new issue or start a discussion thread. Describe:<ul> <li>The enhancement you're proposing.</li> <li>The problem it solves or the use case it addresses.</li> <li>Any potential implementation ideas (optional).</li> </ul> </li> </ol>"},{"location":"contributing/guidelines/#code-contributions","title":"Code Contributions","text":"<p>If you'd like to contribute code (bug fixes, new features), please follow the workflow outlined below.</p>"},{"location":"contributing/guidelines/#getting-started","title":"Getting Started","text":"<p>Before you start coding, make sure you have set up your development environment correctly by following the Development Setup Guide.</p>"},{"location":"contributing/guidelines/#branching-strategy-simplified-git-flow","title":"Branching Strategy (Simplified Git Flow)","text":"<p>We use a simplified Git Flow model to manage branches and releases, with automated releases powered by Python Semantic Release.</p> <pre><code>gitGraph\n    commit\n    branch dev\n    checkout dev\n    commit\n\n    branch feature/new-feature\n    checkout feature/new-feature\n    commit\n    commit\n    checkout dev\n    merge feature/new-feature tag: \"v0.2.0-next.1\"\n\n    branch feature/another-feature\n    checkout feature/another-feature\n    commit\n    checkout dev\n    merge feature/another-feature tag: \"v0.2.0-next.2\"\n\n    branch release/v0.2.0\n    checkout release/v0.2.0\n    commit\n    checkout main\n    merge release/v0.2.0 tag: \"v0.2.0\"\n    checkout dev\n    merge main\n\n    branch hotfix/critical-fix\n    checkout hotfix/critical-fix\n    commit\n    checkout main\n    merge hotfix/critical-fix tag: \"v0.2.1\"\n    checkout dev\n    merge main\n</code></pre>"},{"location":"contributing/guidelines/#core-branches","title":"Core Branches","text":"<ul> <li><code>main</code>:<ul> <li>Represents the latest stable production-ready release.</li> <li>Pushes to <code>main</code> trigger automatic stable version releases.</li> <li>Protected branch with required reviews. Changes come via approved PRs from <code>release/*</code> or <code>hotfix/*</code> branches.</li> </ul> </li> <li><code>dev</code>:<ul> <li>The primary integration branch for ongoing development and upcoming features.</li> <li>Pushes to <code>dev</code> trigger automatic pre-release versions with the <code>-next</code> tag.</li> <li>All feature branches are merged into <code>dev</code>.</li> <li>Continuously tested via CI.</li> </ul> </li> </ul>"},{"location":"contributing/guidelines/#supporting-branches","title":"Supporting Branches","text":"<ul> <li>Feature branches (<code>feature/*</code>):<ul> <li>Branched off <code>dev</code>.</li> <li>Used for developing new features or significant changes.</li> <li>Named descriptively (e.g., <code>feature/add-pr-update-command</code>).</li> <li>Merged back into <code>dev</code> via Pull Requests (PRs).</li> </ul> </li> <li>Release branches (<code>release/*</code>):<ul> <li>Branched off <code>dev</code> when preparing for a new stable release.</li> <li>Used for final testing, documentation updates, and version stabilization.</li> <li>Format: <code>release/vX.Y.0</code> (e.g., <code>release/v1.2.0</code>).</li> <li>Merged into <code>main</code> via PR, which triggers automatic release.</li> <li>No need for manual version bumping as this is handled by semantic-release.</li> </ul> </li> <li>Hotfix branches (<code>hotfix/*</code>):<ul> <li>Branched off <code>main</code>.</li> <li>Used for critical bug fixes needed in the production version.</li> <li>Merged into <code>main</code> via PR, triggering automatic patch release.</li> <li>Also merged back into <code>dev</code> (usually by merging the updated <code>main</code>).</li> </ul> </li> </ul>"},{"location":"contributing/guidelines/#workflow-examples","title":"Workflow Examples","text":"<ol> <li> <p>New Feature Development:</p> <pre><code># Start from the dev branch\ngit checkout dev\ngit pull origin dev\n\n# Create your feature branch\ngit checkout -b feature/your-feature-name\n\n# --- Make your changes ---\n\n# Push your feature branch\ngit push -u origin feature/your-feature-name\n\n# Open a Pull Request to merge `feature/your-feature-name` into `dev`\n# When merged, a new pre-release version may be created automatically\n</code></pre> </li> <li> <p>Release Preparation:</p> <pre><code>git checkout dev\ngit pull origin dev\n\n# Create a release branch (no need to bump versions manually)\ngit checkout -b release/v1.3.0\n\n# Make any final adjustments, documentation updates, etc.\n# Push the release branch\ngit push -u origin release/v1.3.0\n\n# Create a PR from release/v1.3.0 to main\n# When the PR is approved and merged:\n# 1. A new release will be automatically created\n# 2. The package will be built and published to PyPI\n# 3. Main should be merged back to dev to sync the version changes\ngit checkout dev\ngit pull origin dev\ngit merge origin/main\ngit push origin dev\n</code></pre> </li> <li> <p>Hotfix Process:     <pre><code>git checkout main\ngit pull origin main\n\n# Create a hotfix branch\ngit checkout -b hotfix/critical-bug-fix\n\n# Fix the bug and commit using conventional commit format\n# (preferably using `codemap commit`)\n\n# Push the hotfix branch\ngit push -u origin hotfix/critical-bug-fix\n\n# Create a PR from hotfix/critical-bug-fix to main\n# When merged, a patch release will be automatically created\n\n# After the hotfix is released, sync changes back to dev\ngit checkout dev\ngit pull origin dev\ngit merge origin/main\ngit push origin dev\n</code></pre></p> </li> </ol>"},{"location":"contributing/guidelines/#code-contribution-workflow","title":"Code Contribution Workflow","text":"<ol> <li>Fork &amp; Clone: Fork the repository on GitHub and clone your fork locally.     <pre><code>git clone https://github.com/YOUR_USERNAME/codemap.git\ncd codemap\ngit remote add upstream https://github.com/SarthakMishra/codemap.git\n</code></pre></li> <li>Setup: Follow the Development Setup instructions.</li> <li>Branch: Create a new branch based on the correct base branch (<code>dev</code> for features/improvements, <code>main</code> only for agreed-upon hotfixes).     <pre><code># For features/improvements\ngit checkout dev\ngit pull upstream dev # Keep dev up-to-date\ngit checkout -b feature/your-descriptive-name\n\n# For hotfixes (usually maintainers)\n# git checkout main\n# git pull upstream main\n# git checkout -b hotfix/your-fix-name\n</code></pre></li> <li>Code: Make your changes. Write clean, well-commented code. Add or update tests as necessary.</li> <li>Format &amp; Lint: Ensure your code adheres to the project's style guidelines.     <pre><code>task format\ntask lint\n# Or run all checks\ntask ci\n</code></pre></li> <li>Test: Run the test suite to ensure your changes haven't broken anything.     <pre><code>task test\n# Check coverage\ntask coverage\n</code></pre></li> <li>Commit: Commit your changes using meaningful commit messages. We strongly encourage using the <code>codemap commit</code> command to generate conventional commit messages.     <pre><code># Stage your changes\ngit add .\n# Use the interactive commit tool\ncodemap commit\n# Or if you prefer manual commits, follow conventional commit format\n# git commit -m \"feat(cli): add option for custom output format\"\n</code></pre></li> <li>Push: Push your branch to your fork.     <pre><code>git push -u origin feature/your-descriptive-name\n</code></pre></li> <li>Pull Request: Open a Pull Request (PR) from your fork's branch to the <code>upstream/dev</code> branch (or <code>upstream/main</code> for hotfixes). Provide a clear description of your changes.</li> </ol>"},{"location":"contributing/guidelines/#coding-standards","title":"Coding Standards","text":"<ul> <li>Follow PEP 8 for Python code.</li> <li>Use type hints (<code>typing</code> module).</li> <li>Write docstrings for public modules, classes, and functions (see project docs rules).</li> <li>Use <code>ruff</code> for linting and formatting (<code>task format</code>, <code>task lint</code>).</li> </ul>"},{"location":"contributing/guidelines/#testing","title":"Testing","text":"<ul> <li>Write tests using <code>pytest</code>.</li> <li>Aim for good test coverage (<code>task coverage</code>).</li> <li>Ensure all tests pass (<code>task test</code>) before submitting a PR.</li> </ul>"},{"location":"contributing/guidelines/#commit-message-guidelines","title":"Commit Message Guidelines","text":"<p>We follow the Conventional Commits specification.</p> <ul> <li>Format: <code>&lt;type&gt;[optional scope]: &lt;description&gt;</code></li> <li>Example: <code>feat(commit): add semantic diff splitting strategy</code></li> <li>Use <code>codemap commit</code>: The easiest way to ensure compliance is to use the built-in <code>codemap commit</code> command.</li> </ul>"},{"location":"contributing/guidelines/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure all CI checks (linting, testing) pass.</li> <li>Provide a clear title and description for your PR.</li> <li>Link any related issues.</li> <li>Request reviews from maintainers.</li> <li>Address any feedback promptly.</li> <li>Once approved, a maintainer will merge the PR.</li> </ol>"},{"location":"contributing/guidelines/#release-process","title":"Release Process","text":"<p>Releases are managed automatically using Python Semantic Release.</p>"},{"location":"contributing/guidelines/#automatic-releases","title":"Automatic Releases","text":"<ul> <li>Merging a PR into <code>dev</code> may trigger a pre-release (e.g., <code>v1.2.0-next.1</code>).</li> <li>Merging a PR from a <code>release/*</code> or <code>hotfix/*</code> branch into <code>main</code> will trigger a stable release (e.g., <code>v1.2.0</code> or <code>v1.2.1</code>).</li> <li>The release process includes:<ul> <li>Bumping the version based on commit messages.</li> <li>Generating a changelog.</li> <li>Tagging the commit in Git.</li> <li>Creating a GitHub Release.</li> <li>Building the package.</li> <li>Publishing to PyPI.</li> </ul> </li> </ul>"},{"location":"contributing/guidelines/#release-preparation","title":"Release Preparation","text":"<p>Maintainers will create <code>release/*</code> branches off <code>dev</code> when ready to stabilize for a release. This branch allows for final testing and documentation updates before merging to <code>main</code>.</p>"},{"location":"contributing/guidelines/#hotfix-process","title":"Hotfix Process","text":"<p>Critical bugs in <code>main</code> are fixed using <code>hotfix/*</code> branches, which are merged directly back into <code>main</code> to trigger a patch release.</p>"},{"location":"contributing/guidelines/#questions","title":"Questions?","text":"<p>If you have questions, feel free to open an issue or start a discussion on GitHub. </p>"},{"location":"usage/","title":"Usage Overview","text":"<p>This section covers the main commands provided by CodeMap:</p> <ul> <li>Generate Docs (<code>gen</code>): Learn how to create optimized documentation for your codebase.</li> <li>Smart Commit (<code>commit</code>): Discover how to use AI assistance for crafting meaningful Git commit messages.</li> <li>Pull Requests (<code>pr</code>): See how CodeMap helps streamline the creation and management of pull requests. </li> </ul>"},{"location":"usage/commit/","title":"Smart Commit (<code>commit</code>)","text":"<p>Create intelligent Git commits with AI-assisted message generation. The tool analyzes your changes, splits them into logical chunks, and generates meaningful commit messages using LLMs.</p>"},{"location":"usage/commit/#basic-usage","title":"Basic Usage","text":"<pre><code># Basic usage with default settings (interactive, semantic splitting)\ncodemap commit\n# Or using the alias:\ncm commit\n\n# Commit with a specific message (skips AI generation)\ncodemap commit -m \"feat: add new feature\"\n\n# Commit all changes (including untracked files)\ncodemap commit -a\n\n# Use a specific LLM model\ncodemap commit --model groq/llama-3.1-8b-instant\n\n# Bypass git hooks (e.g., pre-commit)\ncodemap commit --bypass-hooks\n</code></pre>"},{"location":"usage/commit/#command-options","title":"Command Options","text":"<pre><code>codemap commit [PATH] [OPTIONS]\n</code></pre> <p>Arguments:</p> <ul> <li><code>PATH</code>: Path to repository or specific file to commit (defaults to current directory)</li> </ul> <p>Options:</p> <ul> <li><code>--message</code>, <code>-m</code>: Specify a commit message directly (skips AI generation)</li> <li><code>--all</code>, <code>-a</code>: Commit all changes (stages untracked files)</li> <li><code>--model</code>: LLM model to use for message generation (default: <code>openai/gpt-4o-mini</code>). Overrides config (<code>commit.llm.model</code>).</li> <li><code>--strategy</code>, <code>-s</code>: Strategy for splitting diffs (default: <code>semantic</code>). Options: <code>file</code>, <code>hunk</code>, <code>semantic</code>. Overrides config (<code>commit.strategy</code>).</li> <li><code>--non-interactive</code>: Run in non-interactive mode (accepts all generated messages)</li> <li><code>--bypass-hooks</code>: Bypass git hooks with <code>--no-verify</code> (overrides config <code>commit.bypass_hooks</code>).</li> <li><code>--verbose</code>, <code>-v</code>: Enable verbose logging</li> </ul>"},{"location":"usage/commit/#interactive-workflow","title":"Interactive Workflow","text":"<p>The commit command provides an interactive workflow that: 1. Analyzes your changes and splits them into logical chunks 2. Generates AI-powered commit messages for each chunk 3. Allows you to:    - Accept the generated message    - Edit the message before committing    - Regenerate the message    - Skip the chunk    - Exit the process</p>"},{"location":"usage/commit/#commit-linting-feature","title":"Commit Linting Feature","text":"<p>CodeMap includes automatic commit message linting to ensure your commit messages follow conventions:</p> <ol> <li>Automatic Validation: Generated commit messages are automatically validated against conventional commit standards.</li> <li>Linting Rules: Configurable in <code>.codemap.yml</code> (see Configuration).</li> <li>Auto-remediation: If a generated message fails linting, CodeMap attempts to regenerate a compliant message.</li> <li>Fallback Mechanism: If regeneration fails, the last message is used with linting status indicated.</li> </ol>"},{"location":"usage/commit/#commit-strategy","title":"Commit Strategy","text":"<p>The tool uses semantic analysis to group related changes together based on: - File relationships - Code content similarity - Directory structure - Common file patterns</p> <p>Note</p> <p>The semantic strategy utilizes a custom, distilled version of the <code>Qodo/Qodo-Embed-1-1.5B</code> model, named <code>Qodo-Embed-M-1-1.5B-M2V-Distilled</code>. This Model2Vec distilled model is significantly smaller (233MB vs 5.9GB) and faster (~112x) than the original while retaining ~85% of its performance. Find more details here.</p>"},{"location":"usage/commit/#environment-variables","title":"Environment Variables","text":"<p>Refer to the LLM Support page for relevant environment variables.</p>"},{"location":"usage/commit/#examples","title":"Examples","text":"<pre><code># Basic interactive commit\ncodemap commit\n\n# Commit specific files\ncodemap commit path/to/file.py\n\n# Use a specific model with custom strategy\ncodemap commit --model anthropic/claude-3-sonnet --strategy semantic\n\n# Non-interactive commit with all changes\ncodemap commit -a --non-interactive\n\n# Commit with verbose logging\ncodemap commit -v\n\n# Demonstrate automatic linting and regeneration\ncodemap commit --verbose  # Will show linting feedback and regeneration attempts\n</code></pre>"},{"location":"usage/configuration/","title":"Configuration","text":"<p>Create a <code>.codemap.yml</code> file in your project root to customize the behavior. Below are all available configuration options with their default values:</p> <pre><code># LLM configuration (applies globally unless overridden by command-specific LLM config)\nllm:\n  model: openai/gpt-4o-mini  # Default LLM model (provider/model_name format)\n  api_base: null             # Custom API base URL (e.g., for local LLMs or proxies)\n\n# Documentation Generation Settings ('gen' command)\ngen:\n  max_content_length: 5000       # Max content length per file (0 = unlimited)\n  use_gitignore: true            # Respect .gitignore patterns\n  output_dir: documentation       # Directory for generated docs (Note: mkdocs uses 'docs/')\n  include_tree: true             # Include directory tree in output\n  include_entity_graph: true     # Include Mermaid entity relationship graph\n  semantic_analysis: true        # Enable semantic analysis using LSP\n  lod_level: docs                # Level of Detail: signatures, structure, docs, full\n  mermaid_entities:              # Entity types for Mermaid graph\n    - module\n    - class\n    - function\n    - method\n    - constant\n    - variable\n    - import\n  mermaid_relationships:         # Relationship types for Mermaid graph\n    - declares\n    - imports\n    - calls\n  mermaid_show_legend: true      # Show legend in Mermaid diagram\n  mermaid_remove_unconnected: false # Remove unconnected nodes in Mermaid diagram\n\n# Processor configuration (background analysis - currently unused)\nprocessor:\n  enabled: true\n  max_workers: 4\n  ignored_patterns:\n    - \"**/.git/**\"\n    - \"**/__pycache__/**\"\n    - \"**/.venv/**\"\n    - \"**/node_modules/**\"\n    - \"**/*.pyc\"\n    - \"**/dist/**\"\n    - \"**/build/**\"\n  default_lod_level: signatures\n\n# Commit Feature Configuration ('commit' command)\ncommit:\n  strategy: semantic             # Diff splitting strategy: file, hunk, semantic\n  bypass_hooks: false            # Default for --bypass-hooks flag (--no-verify)\n\n  convention:                    # Commit convention settings (based on Conventional Commits)\n    types:                       # Allowed commit types\n      - feat\n      - fix\n      - docs\n      - style\n      - refactor\n      - perf\n      - test\n      - build\n      - ci\n      - chore\n    scopes: []                   # Optional scopes (can be auto-derived if empty)\n    max_length: 72               # Max length for commit subject line\n\n  lint:                          # Commitlint rule configuration (see https://commitlint.js.org/#/reference-rules)\n    # Example rules (full list in README)\n    header_max_length: { level: ERROR, rule: always, value: 100 }\n    type_enum: { level: ERROR, rule: always } # Uses types from commit.convention.types\n    type_case: { level: ERROR, rule: always, value: lower-case }\n    subject_empty: { level: ERROR, rule: never }\n    subject_full_stop: { level: ERROR, rule: never, value: . }\n\n# Pull Request Configuration ('pr' command)\npr:\n  defaults:\n    base_branch: null            # Default base branch (null = repo default)\n    feature_prefix: \"feature/\"   # Default prefix for feature branches\n\n  strategy: github-flow          # Git workflow: github-flow, gitflow, trunk-based\n\n  branch_mapping:                # Branch base/prefix mapping (primarily for GitFlow)\n    feature: { base: develop, prefix: \"feature/\" }\n    release: { base: main, prefix: \"release/\" }\n    hotfix: { base: main, prefix: \"hotfix/\" }\n    bugfix: { base: develop, prefix: \"bugfix/\" }\n\n  generate:                      # Content generation settings\n    title_strategy: commits      # How to generate title: commits, llm, template\n    description_strategy: commits # How to generate description: commits, llm, template\n    use_workflow_templates: true # Use built-in templates based on workflow/branch type?\n    # Template used if description_strategy is 'template' AND use_workflow_templates is false\n    description_template: |\n      ## Changes\n      {changes}\n\n      ## Testing\n      {testing_instructions}\n\n      ## Screenshots\n      {screenshots}\n</code></pre>"},{"location":"usage/configuration/#configuration-priority","title":"Configuration Priority","text":"<p>The configuration is loaded in the following order (later sources override earlier ones):</p> <ol> <li>Default configuration from the package</li> <li><code>.codemap.yml</code> in the project root</li> <li>Custom config file specified with <code>--config</code></li> <li>Command-line arguments</li> </ol>"},{"location":"usage/configuration/#configuration-tips","title":"Configuration Tips","text":"<p>Refer to the main README section for detailed tips on configuring:</p> <ul> <li>Token Limits (Deprecated) &amp; Content Length</li> <li>Git Integration (<code>use_gitignore</code>, <code>convention.scopes</code>, <code>bypass_hooks</code>)</li> <li>LLM Settings (<code>llm.model</code>, <code>llm.api_base</code>, <code>--model</code> flag)</li> <li>Commit Conventions &amp; Linting (<code>commit.convention</code>, <code>commit.lint</code>)</li> <li>PR Workflow Settings (<code>pr.strategy</code>, <code>pr.defaults</code>, <code>pr.branch_mapping</code>, <code>pr.generate</code>)</li> <li>Documentation Generation (<code>gen.*</code> settings and flags)</li> </ul>"},{"location":"usage/configuration/#environment-variables","title":"Environment Variables","text":"<p>LLM API keys and optional base URLs can be set via environment variables. See the LLM Support page for details. </p>"},{"location":"usage/generate/","title":"Generate Markdown Docs (<code>gen</code>)","text":"<p>Generate optimized markdown documentation and directory structures for your project:</p>"},{"location":"usage/generate/#command-options","title":"Command Options","text":"<pre><code>codemap gen [PATH] [OPTIONS]\n</code></pre> <p>Arguments:</p> <ul> <li><code>PATH</code>: Path to the codebase to analyze (defaults to current directory)</li> </ul> <p>Options:</p> <ul> <li><code>--output</code>, <code>-o</code>: Output file path for the documentation (overrides config)</li> <li><code>--config</code>, <code>-c</code>: Path to custom configuration file</li> <li><code>--max-content-length</code>: Maximum content length for file display (set to 0 for unlimited, overrides config)</li> <li><code>--lod</code>: Level of Detail for code analysis (signatures, structure, docs, full). Default: <code>docs</code>. Overrides config.</li> <li><code>--semantic</code>/<code>--no-semantic</code>: Enable/disable semantic analysis using LSP. Default: enabled. Overrides config.</li> <li><code>--tree</code>/<code>--no-tree</code>: Include/exclude directory tree in output. Overrides config (<code>gen.include_tree</code>).</li> <li><code>--verbose</code>, <code>-v</code>: Enable verbose logging</li> <li><code>--process</code>/<code>--no-process</code>: Process the codebase before generation. Default: enabled.</li> <li><code>--entity-graph</code>/<code>--no-entity-graph</code>: Include/exclude entity relationship graph (Mermaid) in output. Overrides config (<code>gen.include_entity_graph</code>).</li> <li><code>--mermaid-entities</code>: Comma-separated list of entity types (e.g., 'module,class,function'). Overrides config (<code>gen.mermaid_entities</code>).</li> <li><code>--mermaid-relationships</code>: Comma-separated list of relationship types (e.g., 'declares,imports,calls'). Overrides config (<code>gen.mermaid_relationships</code>).</li> <li><code>--mermaid-legend</code>/<code>--no-mermaid-legend</code>: Show/hide the legend in the Mermaid diagram. Overrides config (<code>gen.mermaid_show_legend</code>).</li> <li><code>--mermaid-unconnected</code>/<code>--no-mermaid-unconnected</code>: Remove/keep nodes with no connections in the Mermaid diagram. Overrides config (<code>gen.mermaid_remove_unconnected</code>).</li> </ul>"},{"location":"usage/generate/#examples","title":"Examples","text":"<pre><code># Generate documentation for current directory using defaults\ncodemap gen\n# Or using the alias:\ncm gen\n\n# Generate for a specific path with full detail and no semantic analysis\ncodemap gen /path/to/project --lod full --no-semantic\n\n# Generate docs with signatures only and custom Mermaid settings\ncm gen --lod signatures --mermaid-entities \"class,function\" --mermaid-relationships \"calls\"\n\n# Generate only directory tree (implicitly disables entity graph)\ncodemap gen --tree --no-entity-graph\n\n# Custom output location and content length\ncodemap gen -o ./docs/codebase.md --max-content-length 1500\n\n# Use custom configuration file\ncodemap gen --config custom-config.yml\n\n# Verbose mode for debugging\ncodemap gen -v\n</code></pre>"},{"location":"usage/generate/#output-structure","title":"Output Structure","text":"<p>The generated documentation includes: 1. Project overview and structure 2. Directory tree visualization 3. Token-optimized code summaries 4. File relationships and dependencies 5. Rich markdown formatting with syntax highlighting</p>"},{"location":"usage/generate/#file-processing","title":"File Processing","text":"<p>The generator: - Respects <code>.gitignore</code> patterns by default - Intelligently analyzes code structure - Optimizes content for token limits - Generates well-structured markdown - Handles various file types and languages </p>"},{"location":"usage/llm-support/","title":"LLM Provider Support","text":"<p>CodeMap supports multiple LLM providers through LiteLLM.</p> <p>You can specify the desired model using the <code>--model</code> option in the <code>commit</code> and <code>pr</code> commands, or set a default in the Configuration.</p>"},{"location":"usage/llm-support/#examples","title":"Examples","text":"<pre><code># Using OpenAI (default)\ncodemap commit --model openai/gpt-4o-mini\n# Or using the alias:\ncm commit --model openai/gpt-4o-mini\n\n# Using Anthropic\ncodemap commit --model anthropic/claude-3-sonnet-20240229\n\n# Using Groq (recommended for speed)\ncodemap commit --model groq/llama-3.1-8b-instant\n\n# Using OpenRouter\ncodemap commit --model openrouter/meta-llama/llama-3-8b-instruct\n</code></pre>"},{"location":"usage/llm-support/#environment-variables","title":"Environment Variables","text":"<p>The following environment variables are needed to authenticate with the respective LLM providers. You can set these in your system environment or place them in a <code>.env</code> or <code>.env.local</code> file in your project root.</p> <pre><code># LLM Provider API Keys\nOPENAI_API_KEY=your_key_here\nANTHROPIC_API_KEY=your_key_here\nGROQ_API_KEY=your_key_here\nMISTRAL_API_KEY=your_key_here\nCOHERE_API_KEY=your_key_here\nTOGETHER_API_KEY=your_key_here\nOPENROUTER_API_KEY=your_key_here\n\n# Optional: Custom API Base URLs (for proxies or self-hosted models)\nOPENAI_API_BASE=your_custom_url\nANTHROPIC_API_BASE=your_custom_url\n# ... add others as needed ...\n</code></pre>"},{"location":"usage/pr/","title":"Pull Requests (<code>pr</code>)","text":"<p>The <code>codemap pr</code> command helps you create and manage pull requests with ease. It integrates with the existing <code>codemap commit</code> command to provide a seamless workflow from code changes to pull request creation.</p>"},{"location":"usage/pr/#pr-command-features","title":"PR Command Features","text":"<ul> <li>Create branches with intelligent naming based on your current changes</li> <li>Support for multiple Git workflow strategies (GitHub Flow, GitFlow, Trunk-Based)</li> <li>Rich branch visualization with metadata and relationships</li> <li>Smart base branch selection based on branch type</li> <li>Automatic content generation for different PR types (feature, release, hotfix)</li> <li>Workflow-specific PR templates based on branch type</li> <li>Interactive PR content editing with previews</li> <li>Update existing PRs with new commits</li> <li>Configurable via <code>.codemap.yml</code> for team-wide settings (see Configuration)</li> </ul>"},{"location":"usage/pr/#pr-command-requirements","title":"PR Command Requirements","text":"<ul> <li>Git repository with a remote named <code>origin</code></li> <li>GitHub CLI (<code>gh</code>) installed for PR creation and management</li> <li>Valid GitHub authentication for the <code>gh</code> CLI</li> </ul>"},{"location":"usage/pr/#creating-a-pr","title":"Creating a PR","text":"<pre><code>codemap pr create [PATH] [OPTIONS]\n# Or using the alias:\ncm pr create [PATH] [OPTIONS]\n</code></pre> <p>Arguments:</p> <ul> <li><code>PATH</code>: Path to the codebase to analyze (defaults to current directory)</li> </ul> <p>Options:</p> <ul> <li><code>--branch</code>, <code>-b</code>: Target branch name</li> <li><code>--type</code>, <code>-t</code>: Branch type (e.g., feature, release, hotfix, bugfix). Valid types depend on workflow strategy.</li> <li><code>--base</code>: Base branch for the PR (defaults to repo default or workflow-defined default)</li> <li><code>--title</code>: Pull request title</li> <li><code>--desc</code>, <code>-d</code>: Pull request description (file path or text)</li> <li><code>--no-commit</code>: Skip the commit process before creating PR</li> <li><code>--force-push</code>, <code>-f</code>: Force push the branch</li> <li><code>--workflow</code>, <code>-w</code>: Git workflow strategy (github-flow, gitflow, trunk-based). Overrides config (<code>pr.strategy</code>).</li> <li><code>--non-interactive</code>: Run in non-interactive mode</li> <li><code>--model</code>, <code>-m</code>: LLM model for content generation (overrides config <code>llm.model</code>).</li> <li><code>--verbose</code>, <code>-v</code>: Enable verbose logging</li> </ul>"},{"location":"usage/pr/#updating-a-pr","title":"Updating a PR","text":"<pre><code>codemap pr update [PATH] [OPTIONS]\n# Or using the alias:\ncm pr update [PATH] [OPTIONS]\n</code></pre> <p>Arguments:</p> <ul> <li><code>PATH</code>: Path to the codebase to analyze (defaults to current directory)</li> </ul> <p>Options:</p> <ul> <li><code>--pr</code>: PR number to update (required if not updating PR for current branch)</li> <li><code>--title</code>: New PR title</li> <li><code>--desc</code>, <code>-d</code>: New PR description (file path or text)</li> <li><code>--force-push</code>, <code>-f</code>: Force push the branch (use with caution)</li> <li><code>--non-interactive</code>: Run in non-interactive mode</li> <li><code>--verbose</code>, <code>-v</code>: Enable verbose logging</li> </ul> <p>Warning</p> <p>--no-commit is NOT an option for 'update'</p>"},{"location":"usage/pr/#git-workflow-strategies","title":"Git Workflow Strategies","text":"<p>The PR command supports multiple Git workflow strategies:</p> <ol> <li>GitHub Flow (default)</li> <li>Simple, linear workflow</li> <li> <p>Feature branches merge directly to main</p> </li> <li> <p>GitFlow</p> </li> <li>Feature branches \u2192 develop</li> <li>Release branches \u2192 main</li> <li> <p>Hotfix branches \u2192 main (with back-merge to develop)</p> </li> <li> <p>Trunk-Based Development</p> </li> <li>Short-lived feature branches</li> <li>Emphasizes small, frequent PRs</li> </ol>"},{"location":"usage/pr/#pr-template-system","title":"PR Template System","text":"<p>CodeMap includes a robust PR template system that automatically generates appropriate titles and descriptions based on the selected workflow strategy, branch type, and changes being made. See the Configuration page for details on customizing templates.</p>"},{"location":"usage/pr/#examples","title":"Examples","text":"<pre><code># Create PR using workflow-specific templates (GitFlow)\ncodemap pr create --workflow gitflow --type feature\n\n# Create PR with custom title but workflow-based description\ncodemap pr create --title \"My Custom Title\" --workflow trunk-based\n\n# Override both the workflow template and use custom description\ncodemap pr create --desc \"Custom description with **markdown** support\"\n\n# Non-interactive PR creation with defined template usage\ncodemap pr create --non-interactive --workflow gitflow --type release\n</code></pre>"}]}