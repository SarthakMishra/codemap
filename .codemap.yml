# CodeMap configuration file

# Generation configuration
gen:
  # Maximum content length per file (0 for unlimited)
  max_content_length: 2000
  # Whether to respect gitignore patterns
  use_gitignore: true
  # Directory to store documentation files
  output_dir: documentation
  # Whether to include directory tree in output
  include_tree: false
  # Enable semantic analysis using LSP
  semantic_analysis: true
  # Output file for generated documentation
  output_file: code_documentation.md
  # Level of Detail for code analysis (names, docs, signatures, full)
  lod_level: docs

# Processor configuration
processor:
  enabled: true
  max_workers: 4
  ignored_patterns:
    - "**/.git/**"
    - "**/__pycache__/**"
    - "**/.venv/**"
    - "**/node_modules/**"
    - "**/*.pyc"
    - "**/dist/**"
    - "**/build/**"
  # Default LOD level for processing
  default_lod_level: signatures

# Commit feature configuration
commit:
  # Strategy for splitting diffs: file, hunk, semantic
  strategy: file
  # Whether to bypass git hooks (--no-verify) when committing
  # Set to true only if you want to skip hooks (default: false)
  bypass_hooks: false

  # Commit convention settings
  convention:
    types:
      - feat     # New feature
      - fix      # Bug fix
      - docs     # Documentation
      - style    # Formatting, missing semicolons, etc.
      - refactor # Code change that neither fixes a bug nor adds a feature
      - perf     # Performance improvement
      - test     # Adding or updating tests
      - build    # Build system or external dependencies
      - ci       # CI configuration
      - chore    # Other changes that don't modify src or test files

    # Optional scopes for your project (derived from directory structure if empty)
    scopes: []

    # Maximum length for commit message subject line
    max_length: 72
  
  # Commit lint rules to match .commitlintrc
  lint:
    body_leading_blank:
      level: WARNING
      rule: always
    body_max_line_length:
      level: ERROR
      rule: always
      value: 100
    footer_leading_blank:
      level: WARNING
      rule: always
    footer_max_line_length:
      level: ERROR
      rule: always
      value: 100
    header_max_length:
      level: ERROR
      rule: always
      value: 100
    subject_case:
      level: ERROR
      rule: never
      value: ["sentence-case", "start-case", "pascal-case", "upper-case"]
    subject_empty:
      level: ERROR
      rule: never
    subject_full_stop:
      level: ERROR
      rule: never
      value: "."
    type_case:
      level: ERROR
      rule: always
      value: "lower-case"
    type_empty:
      level: ERROR
      rule: never
    type_enum:
      level: ERROR
      rule: always
      # Use the types defined in convention section above
      value: ~

# Pull request configuration
pr:
  # Default branch settings
  defaults:
    base_branch: dev  # Default base branch if not specified
    feature_prefix: "feat/"  # Default prefix for feature branches

  # Git workflow strategy: github-flow, gitflow, trunk-based
  strategy: "github-flow"  # Default workflow strategy

  # Branch mapping for different PR types (used by GitFlow)
  branch_mapping:
    feature:
      base: dev
      prefix: "feat/"
    release:
      base: main
      prefix: "release/"
    hotfix:
      base: dev
      prefix: "fix/"
    bugfix:
      base: dev
      prefix: "bugfix/"

  # Content generation settings
  generate:
    title_strategy: "commits"  # Options: commits, llm, branch-name
    description_strategy: "llm"  # Options: commits, llm, template
    
    # Template for PR descriptions
    description_template: |
      ## Changes
      {changes}
      
      ## Testing
      {testing_instructions}
      
      ## Screenshots
      {screenshots}
    
    # Whether to use PR templates from workflow strategies
    use_workflow_templates: true

# LLM configuration
llm:
  model: groq/meta-llama/llama-4-scout-17b-16e-instruct
  # IMPORTANT: Do NOT add API keys here. Use environment variables or .env files instead.
  api_base: null