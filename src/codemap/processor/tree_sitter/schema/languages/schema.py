"""Auto-generated language schema. DO NOT EDIT MANUALLY."""

# ruff: noqa: E501, RUF001
from typing import TypedDict

from .literals import NodeTypes, SupportedExtensions, SupportedLanguages


class LanguageSchema(TypedDict):
	"""Schema for a language."""

	name: SupportedLanguages
	extensions: list[SupportedExtensions]
	nodes: list[NodeTypes]


LANGUAGES: list[LanguageSchema] = [
	{
		"name": "agda",
		"extensions": ["agda"],
		"nodes": [
			"#-}",
			"(",
			"(|",
			")",
			"-",
			"->",
			".",
			"..",
			"...",
			":",
			";",
			"=",
			"@",
			"CATCHALL",
			"Prop",
			"PropN",
			"Set",
			"SetN",
			"\\",
			"_",
			"abstract",
			"atom",
			"attribute",
			"attributes",
			"bid",
			"catchall_pragma",
			"codata",
			"coinductive",
			"comment",
			"constructor",
			"data",
			"data_name",
			"data_signature",
			"do",
			"do_where",
			"eta-equality",
			"expr",
			"field",
			"field_assignment",
			"field_name",
			"fields",
			"forall",
			"function",
			"function_name",
			"generalize",
			"hiding",
			"hole_name",
			"hole_names",
			"id",
			"import",
			"import_directive",
			"in",
			"inductive",
			"infix",
			"infixl",
			"infixr",
			"instance",
			"integer",
			"lambda",
			"lambda_clause",
			"lambda_clause_absurd",
			"let",
			"lhs",
			"literal",
			"macro",
			"module",
			"module_application",
			"module_assignment",
			"module_macro",
			"module_name",
			"mutual",
			"no-eta-equality",
			"open",
			"overlap",
			"pattern",
			"postulate",
			"pragma",
			"primitive",
			"private",
			"public",
			"qid",
			"quote",
			"quoteContext",
			"quoteGoal",
			"quoteTerm",
			"record",
			"record_assignments",
			"record_constructor",
			"record_constructor_instance",
			"record_declarations_block",
			"record_eta",
			"record_induction",
			"record_name",
			"record_signature",
			"renaming",
			"rewrite",
			"rewrite_equations",
			"rhs",
			"signature",
			"source_file",
			"stmt",
			"syntax",
			"tactic",
			"to",
			"type_signature",
			"typed_binding",
			"unquote",
			"unquoteDecl",
			"unquoteDef",
			"unquote_decl",
			"untyped_binding",
			"using",
			"variable",
			"where",
			"with",
			"with_expressions",
			"{",
			"{-#",
			"{{",
			"|",
			"|)",
			"}",
			"}}",
			"λ",
			"…",
			"→",
			"∀",
			"⦃",
			"⦄",
			"⦇",
			"⦈",
		],
	},
	{
		"name": "scala",
		"extensions": ["scala", "sbt", "sc"],
		"nodes": [
			"!",
			'"',
			'"""',
			"#",
			"$",
			"'",
			"(",
			")",
			"*",
			"*/",
			"+",
			",",
			"-",
			".",
			"/*",
			"//",
			":",
			";",
			"<%",
			"<-",
			"<:",
			"=",
			"=>",
			"=>>",
			">",
			">:",
			"?=>",
			"@",
			"[",
			"]",
			"_",
			"_definition",
			"_end_ident",
			"_pattern",
			"abstract",
			"access_modifier",
			"access_qualifier",
			"alternative_pattern",
			"annotated_type",
			"annotation",
			"arguments",
			"arrow_renamed_identifier",
			"as",
			"as_renamed_identifier",
			"ascription_expression",
			"assignment_expression",
			"binding",
			"bindings",
			"block",
			"block_comment",
			"boolean_literal",
			"call_expression",
			"capture_pattern",
			"case",
			"case_block",
			"case_class_pattern",
			"case_clause",
			"catch",
			"catch_clause",
			"character_literal",
			"class",
			"class_definition",
			"class_parameter",
			"class_parameters",
			"colon_argument",
			"comment",
			"compilation_unit",
			"compound_type",
			"context_bound",
			"contravariant_type_parameter",
			"covariant_type_parameter",
			"def",
			"derives",
			"derives_clause",
			"do",
			"do_while_expression",
			"else",
			"end",
			"enum",
			"enum_body",
			"enum_case_definitions",
			"enum_definition",
			"enumerator",
			"enumerators",
			"escape_sequence",
			"export",
			"export_declaration",
			"expression",
			"extends",
			"extends_clause",
			"extension",
			"extension_definition",
			"false",
			"field_expression",
			"final",
			"finally",
			"finally_clause",
			"floating_point_literal",
			"for",
			"for_expression",
			"full_enum_case",
			"function_declaration",
			"function_definition",
			"function_type",
			"generic_function",
			"generic_type",
			"given",
			"given_conditional",
			"given_definition",
			"given_pattern",
			"guard",
			"identifier",
			"identifiers",
			"if",
			"if_expression",
			"implicit",
			"import",
			"import_declaration",
			"indented_block",
			"indented_cases",
			"infix",
			"infix_expression",
			"infix_modifier",
			"infix_pattern",
			"infix_type",
			"inline",
			"inline_modifier",
			"instance_expression",
			"integer_literal",
			"interpolated_string",
			"interpolated_string_expression",
			"interpolation",
			"lambda_expression",
			"lazy",
			"lazy_parameter_type",
			"literal_type",
			"lower_bound",
			"macro",
			"macro_body",
			"match",
			"match_expression",
			"match_type",
			"modifiers",
			"name_and_type",
			"named_pattern",
			"named_tuple_pattern",
			"named_tuple_type",
			"namespace_selectors",
			"namespace_wildcard",
			"new",
			"null_literal",
			"object",
			"object_definition",
			"opaque",
			"opaque_modifier",
			"open",
			"open_modifier",
			"operator_identifier",
			"override",
			"package",
			"package_clause",
			"package_identifier",
			"package_object",
			"parameter",
			"parameter_types",
			"parameters",
			"parenthesized_expression",
			"postfix_expression",
			"prefix_expression",
			"private",
			"projected_type",
			"protected",
			"quote_expression",
			"refinement",
			"repeat_pattern",
			"repeated_parameter_type",
			"return",
			"return_expression",
			"sealed",
			"self_type",
			"simple_enum_case",
			"singleton_type",
			"splice_expression",
			"stable_identifier",
			"stable_type_identifier",
			"string",
			"structural_type",
			"template_body",
			"then",
			"this",
			"throw",
			"throw_expression",
			"trait",
			"trait_definition",
			"transparent",
			"transparent_modifier",
			"true",
			"try",
			"try_expression",
			"tuple_expression",
			"tuple_pattern",
			"tuple_type",
			"type",
			"type_arguments",
			"type_case_clause",
			"type_definition",
			"type_identifier",
			"type_lambda",
			"type_parameters",
			"typed_pattern",
			"unit",
			"upper_bound",
			"using",
			"using_directive",
			"using_directive_key",
			"using_directive_value",
			"val",
			"val_declaration",
			"val_definition",
			"var",
			"var_declaration",
			"var_definition",
			"view_bound",
			"while",
			"while_expression",
			"wildcard",
			"with",
			"with_template_body",
			"yield",
			"{",
			"|",
			"}",
			"~",
		],
	},
	{
		"name": "json",
		"extensions": [],
		"nodes": [
			'"',
			",",
			":",
			"[",
			"]",
			"_value",
			"array",
			"comment",
			"document",
			"escape_sequence",
			"false",
			"null",
			"number",
			"object",
			"pair",
			"string",
			"string_content",
			"true",
			"{",
			"}",
		],
	},
	{
		"name": "haskell",
		"extensions": ["hs", "hsc"],
		"nodes": [
			"!",
			"#",
			"#)",
			"$",
			"$$",
			"%",
			"'",
			"''",
			"(",
			"(#",
			")",
			"*",
			",",
			"-",
			"->",
			"->.",
			".",
			"..",
			"1",
			"::",
			";",
			"<-",
			"=",
			"=>",
			"@",
			"[",
			"\\",
			"]",
			"_",
			"`",
			"abstract_family",
			"all_names",
			"alternative",
			"alternatives",
			"annotated",
			"anyclass",
			"apply",
			"arithmetic_sequence",
			"as",
			"associated_type",
			"bind",
			"binding_list",
			"boolean",
			"by",
			"calling_convention",
			"case",
			"cases",
			"char",
			"children",
			"class",
			"class_decl",
			"class_declarations",
			"comment",
			"conditional",
			"constraint",
			"constraints",
			"constructor",
			"constructor_operator",
			"constructor_synonym",
			"constructor_synonyms",
			"context",
			"cpp",
			"d",
			"data",
			"data_constructor",
			"data_constructors",
			"data_family",
			"data_instance",
			"data_type",
			"decl",
			"declaration",
			"declarations",
			"default",
			"default_signature",
			"default_types",
			"deriving",
			"deriving_instance",
			"deriving_strategy",
			"do",
			"do_module",
			"e",
			"else",
			"empty_list",
			"entity",
			"equation",
			"equations",
			"exp",
			"explicit_type",
			"export",
			"exports",
			"expression",
			"family",
			"field",
			"field_name",
			"field_path",
			"field_pattern",
			"field_update",
			"fields",
			"fixity",
			"float",
			"forall",
			"forall_required",
			"foreign",
			"foreign_export",
			"foreign_import",
			"function",
			"function_head_parens",
			"fundep",
			"fundeps",
			"gadt_constructor",
			"gadt_constructors",
			"generator",
			"group",
			"guard",
			"guards",
			"haddock",
			"haskell",
			"header",
			"hiding",
			"if",
			"implicit_parameter",
			"implicit_variable",
			"import",
			"import_list",
			"import_name",
			"import_package",
			"imports",
			"in",
			"inferred",
			"infix",
			"infix_id",
			"infixl",
			"infixr",
			"instance",
			"instance_decl",
			"instance_declarations",
			"integer",
			"invisible",
			"irrefutable",
			"kind_application",
			"kind_signature",
			"label",
			"lambda",
			"lambda_case",
			"lambda_cases",
			"lazy_field",
			"left_section",
			"let",
			"let_in",
			"linear_function",
			"list",
			"list_comprehension",
			"literal",
			"local_binds",
			"match",
			"mdo",
			"modifier",
			"module",
			"module_export",
			"module_id",
			"multi_way_if",
			"name",
			"namespace",
			"negation",
			"newtype",
			"newtype_constructor",
			"nominal",
			"of",
			"operator",
			"p",
			"parens",
			"pattern",
			"pattern_guard",
			"pattern_synonym",
			"patterns",
			"phantom",
			"pragma",
			"prefix",
			"prefix_id",
			"prefix_list",
			"prefix_tuple",
			"prefix_unboxed_sum",
			"prefix_unboxed_tuple",
			"projection",
			"projection_selector",
			"promoted",
			"qualified",
			"qualifier",
			"qualifiers",
			"quantified_type",
			"quantified_variables",
			"quasiquote",
			"quasiquote_body",
			"quote",
			"quoted_decls",
			"quoted_expression",
			"quoted_pattern",
			"quoted_type",
			"quoter",
			"rec",
			"record",
			"representational",
			"right_section",
			"role",
			"role_annotation",
			"safety",
			"signature",
			"special",
			"splice",
			"star",
			"statement",
			"stock",
			"strict",
			"strict_field",
			"string",
			"t",
			"th_quoted_name",
			"then",
			"top_splice",
			"transform",
			"tuple",
			"type",
			"type_application",
			"type_binder",
			"type_family",
			"type_family_injectivity",
			"type_family_result",
			"type_instance",
			"type_param",
			"type_params",
			"type_patterns",
			"type_role",
			"type_synomym",
			"typed_quote",
			"unboxed_sum",
			"unboxed_tuple",
			"unboxed_unit",
			"unit",
			"using",
			"variable",
			"via",
			"view_pattern",
			"where",
			"wildcard",
			"{",
			"|",
			"|]",
			"||",
			"||]",
			"}",
			"~",
			"←",
			"→",
			"⇒",
			"∀",
			"∷",
			"⊸",
			"★",
			"⟦",
			"⟧",
		],
	},
	{
		"name": "csharp",
		"extensions": [],
		"nodes": [
			"!",
			"!=",
			'"',
			"#define",
			"#elif",
			"#else",
			"#endif",
			"#endregion",
			"#error",
			"#if",
			"#line",
			"#nullable",
			"#pragma",
			"#region",
			"#undef",
			"#warning",
			"%",
			"%=",
			"&",
			"&&",
			"&=",
			"'",
			"(",
			")",
			"*",
			"*=",
			"+",
			"++",
			"+=",
			",",
			"-",
			"--",
			"-=",
			"->",
			".",
			"..",
			"/",
			"/=",
			":",
			"::",
			";",
			"<",
			"<<",
			"<<=",
			"<=",
			"=",
			"==",
			"=>",
			">",
			">=",
			">>",
			">>=",
			">>>",
			">>>=",
			"?",
			"??",
			"??=",
			"Cdecl",
			"Fastcall",
			"Stdcall",
			"Thiscall",
			"[",
			"]",
			"^",
			"^=",
			"__makeref",
			"__reftype",
			"__refvalue",
			"abstract",
			"accessor_declaration",
			"accessor_list",
			"add",
			"alias",
			"alias_qualified_name",
			"and",
			"and_pattern",
			"annotations",
			"anonymous_method_expression",
			"anonymous_object_creation_expression",
			"argument",
			"argument_list",
			"array_creation_expression",
			"array_rank_specifier",
			"array_type",
			"arrow_expression_clause",
			"as",
			"as_expression",
			"ascending",
			"assembly",
			"assignment_expression",
			"async",
			"attribute",
			"attribute_argument",
			"attribute_argument_list",
			"attribute_list",
			"attribute_target_specifier",
			"await",
			"await_expression",
			"base",
			"base_list",
			"binary_expression",
			"block",
			"boolean_literal",
			"bracketed_argument_list",
			"bracketed_parameter_list",
			"break",
			"break_statement",
			"by",
			"calling_convention",
			"case",
			"cast_expression",
			"catch",
			"catch_clause",
			"catch_declaration",
			"catch_filter_clause",
			"character_literal",
			"character_literal_content",
			"checked",
			"checked_expression",
			"checked_statement",
			"checksum",
			"class",
			"class_declaration",
			"comment",
			"compilation_unit",
			"conditional_access_expression",
			"conditional_expression",
			"const",
			"constant_pattern",
			"constructor_constraint",
			"constructor_declaration",
			"constructor_initializer",
			"continue",
			"continue_statement",
			"conversion_operator_declaration",
			"declaration",
			"declaration_expression",
			"declaration_list",
			"declaration_pattern",
			"default",
			"default_expression",
			"delegate",
			"delegate_declaration",
			"descending",
			"destructor_declaration",
			"disable",
			"discard",
			"do",
			"do_statement",
			"element_access_expression",
			"element_binding_expression",
			"else",
			"empty_statement",
			"enable",
			"enum",
			"enum_declaration",
			"enum_member_declaration",
			"enum_member_declaration_list",
			"equals",
			"escape_sequence",
			"event",
			"event_declaration",
			"event_field_declaration",
			"explicit",
			"explicit_interface_specifier",
			"expression",
			"expression_statement",
			"extern",
			"extern_alias_directive",
			"false",
			"field",
			"field_declaration",
			"file",
			"file_scoped_namespace_declaration",
			"finally",
			"finally_clause",
			"fixed",
			"fixed_statement",
			"for",
			"for_statement",
			"foreach",
			"foreach_statement",
			"from",
			"from_clause",
			"function_pointer_parameter",
			"function_pointer_type",
			"generic_name",
			"get",
			"global",
			"global_attribute",
			"global_statement",
			"goto",
			"goto_statement",
			"group",
			"group_clause",
			"hidden",
			"identifier",
			"if",
			"if_statement",
			"implicit",
			"implicit_array_creation_expression",
			"implicit_object_creation_expression",
			"implicit_parameter",
			"implicit_stackalloc_expression",
			"implicit_type",
			"in",
			"indexer_declaration",
			"init",
			"initializer_expression",
			"integer_literal",
			"interface",
			"interface_declaration",
			"internal",
			"interpolated_string_expression",
			"interpolation",
			"interpolation_alignment_clause",
			"interpolation_brace",
			"interpolation_format_clause",
			"interpolation_quote",
			"interpolation_start",
			"into",
			"invocation_expression",
			"is",
			"is_expression",
			"is_pattern_expression",
			"join",
			"join_clause",
			"join_into_clause",
			"labeled_statement",
			"lambda_expression",
			"let",
			"let_clause",
			"list_pattern",
			"literal",
			"local_declaration_statement",
			"local_function_statement",
			"lock",
			"lock_statement",
			"lvalue_expression",
			"makeref_expression",
			"managed",
			"member_access_expression",
			"member_binding_expression",
			"method",
			"method_declaration",
			"modifier",
			"module",
			"namespace",
			"namespace_declaration",
			"negated_pattern",
			"new",
			"non_lvalue_expression",
			"not",
			"notnull",
			"null_literal",
			"nullable_type",
			"object_creation_expression",
			"on",
			"operator",
			"operator_declaration",
			"or",
			"or_pattern",
			"order_by_clause",
			"orderby",
			"out",
			"override",
			"param",
			"parameter",
			"parameter_list",
			"params",
			"parenthesized_expression",
			"parenthesized_pattern",
			"parenthesized_variable_designation",
			"partial",
			"pattern",
			"pointer_type",
			"positional_pattern_clause",
			"postfix_unary_expression",
			"predefined_type",
			"prefix_unary_expression",
			"preproc_arg",
			"preproc_define",
			"preproc_elif",
			"preproc_else",
			"preproc_endregion",
			"preproc_error",
			"preproc_if",
			"preproc_if_in_attribute_list",
			"preproc_line",
			"preproc_nullable",
			"preproc_pragma",
			"preproc_region",
			"preproc_undef",
			"preproc_warning",
			"primary_constructor_base_type",
			"private",
			"property",
			"property_declaration",
			"property_pattern_clause",
			"protected",
			"public",
			"qualified_name",
			"query_expression",
			"range_expression",
			"raw_string_content",
			"raw_string_end",
			"raw_string_literal",
			"raw_string_start",
			"readonly",
			"real_literal",
			"record",
			"record_declaration",
			"recursive_pattern",
			"ref",
			"ref_expression",
			"ref_type",
			"reftype_expression",
			"refvalue_expression",
			"relational_pattern",
			"remove",
			"required",
			"restore",
			"return",
			"return_statement",
			"scoped",
			"scoped_type",
			"sealed",
			"select",
			"select_clause",
			"set",
			"shebang_directive",
			"sizeof",
			"sizeof_expression",
			"stackalloc",
			"stackalloc_expression",
			"statement",
			"static",
			"string_content",
			"string_literal",
			"string_literal_content",
			"string_literal_encoding",
			"struct",
			"struct_declaration",
			"subpattern",
			"switch",
			"switch_body",
			"switch_expression",
			"switch_expression_arm",
			"switch_section",
			"switch_statement",
			"this",
			"throw",
			"throw_expression",
			"throw_statement",
			"true",
			"try",
			"try_statement",
			"tuple_element",
			"tuple_expression",
			"tuple_pattern",
			"tuple_type",
			"type",
			"type_argument_list",
			"type_declaration",
			"type_parameter",
			"type_parameter_constraint",
			"type_parameter_constraints_clause",
			"type_parameter_list",
			"type_pattern",
			"typeof",
			"typeof_expression",
			"typevar",
			"unary_expression",
			"unchecked",
			"unmanaged",
			"unsafe",
			"unsafe_statement",
			"using",
			"using_directive",
			"using_statement",
			"var",
			"var_pattern",
			"variable_declaration",
			"variable_declarator",
			"verbatim_string_literal",
			"virtual",
			"volatile",
			"warning",
			"warnings",
			"when",
			"when_clause",
			"where",
			"where_clause",
			"while",
			"while_statement",
			"with",
			"with_expression",
			"with_initializer",
			"yield",
			"yield_statement",
			"{",
			"|",
			"|=",
			"||",
			"}",
			"~",
		],
	},
	{
		"name": "java",
		"extensions": ["java"],
		"nodes": [
			"!",
			"!=",
			'"',
			'"""',
			"%",
			"%=",
			"&",
			"&&",
			"&=",
			"(",
			")",
			"*",
			"*=",
			"+",
			"++",
			"+=",
			",",
			"-",
			"--",
			"-=",
			"->",
			".",
			"...",
			"/",
			"/=",
			":",
			"::",
			";",
			"<",
			"<<",
			"<<=",
			"<=",
			"=",
			"==",
			">",
			">=",
			">>",
			">>=",
			">>>",
			">>>=",
			"?",
			"@",
			"@interface",
			"[",
			"\\{",
			"]",
			"^",
			"^=",
			"_literal",
			"_simple_type",
			"_type",
			"_unannotated_type",
			"abstract",
			"annotated_type",
			"annotation",
			"annotation_argument_list",
			"annotation_type_body",
			"annotation_type_declaration",
			"annotation_type_element_declaration",
			"argument_list",
			"array_access",
			"array_creation_expression",
			"array_initializer",
			"array_type",
			"assert",
			"assert_statement",
			"assignment_expression",
			"asterisk",
			"binary_expression",
			"binary_integer_literal",
			"block",
			"block_comment",
			"boolean_type",
			"break",
			"break_statement",
			"byte",
			"case",
			"cast_expression",
			"catch",
			"catch_clause",
			"catch_formal_parameter",
			"catch_type",
			"char",
			"character_literal",
			"class",
			"class_body",
			"class_declaration",
			"class_literal",
			"compact_constructor_declaration",
			"constant_declaration",
			"constructor_body",
			"constructor_declaration",
			"continue",
			"continue_statement",
			"decimal_floating_point_literal",
			"decimal_integer_literal",
			"declaration",
			"default",
			"dimensions",
			"dimensions_expr",
			"do",
			"do_statement",
			"double",
			"element_value_array_initializer",
			"element_value_pair",
			"else",
			"enhanced_for_statement",
			"enum",
			"enum_body",
			"enum_body_declarations",
			"enum_constant",
			"enum_declaration",
			"escape_sequence",
			"explicit_constructor_invocation",
			"exports",
			"exports_module_directive",
			"expression",
			"expression_statement",
			"extends",
			"extends_interfaces",
			"false",
			"field_access",
			"field_declaration",
			"final",
			"finally",
			"finally_clause",
			"float",
			"floating_point_type",
			"for",
			"for_statement",
			"formal_parameter",
			"formal_parameters",
			"generic_type",
			"guard",
			"hex_floating_point_literal",
			"hex_integer_literal",
			"identifier",
			"if",
			"if_statement",
			"implements",
			"import",
			"import_declaration",
			"inferred_parameters",
			"instanceof",
			"instanceof_expression",
			"int",
			"integral_type",
			"interface",
			"interface_body",
			"interface_declaration",
			"labeled_statement",
			"lambda_expression",
			"line_comment",
			"local_variable_declaration",
			"long",
			"marker_annotation",
			"method_declaration",
			"method_invocation",
			"method_reference",
			"modifiers",
			"module",
			"module_body",
			"module_declaration",
			"module_directive",
			"multiline_string_fragment",
			"native",
			"new",
			"non-sealed",
			"null_literal",
			"object_creation_expression",
			"octal_integer_literal",
			"open",
			"opens",
			"opens_module_directive",
			"package",
			"package_declaration",
			"parenthesized_expression",
			"pattern",
			"permits",
			"primary_expression",
			"private",
			"program",
			"protected",
			"provides",
			"provides_module_directive",
			"public",
			"receiver_parameter",
			"record",
			"record_declaration",
			"record_pattern",
			"record_pattern_body",
			"record_pattern_component",
			"requires",
			"requires_modifier",
			"requires_module_directive",
			"resource",
			"resource_specification",
			"return",
			"return_statement",
			"scoped_identifier",
			"scoped_type_identifier",
			"sealed",
			"short",
			"spread_parameter",
			"statement",
			"static",
			"static_initializer",
			"strictfp",
			"string_fragment",
			"string_interpolation",
			"string_literal",
			"super",
			"super_interfaces",
			"superclass",
			"switch",
			"switch_block",
			"switch_block_statement_group",
			"switch_expression",
			"switch_label",
			"switch_rule",
			"synchronized",
			"synchronized_statement",
			"template_expression",
			"ternary_expression",
			"this",
			"throw",
			"throw_statement",
			"throws",
			"to",
			"transient",
			"transitive",
			"true",
			"try",
			"try_statement",
			"try_with_resources_statement",
			"type_arguments",
			"type_bound",
			"type_identifier",
			"type_list",
			"type_parameter",
			"type_parameters",
			"type_pattern",
			"unary_expression",
			"underscore_pattern",
			"update_expression",
			"uses",
			"uses_module_directive",
			"variable_declarator",
			"void_type",
			"volatile",
			"when",
			"while",
			"while_statement",
			"wildcard",
			"with",
			"yield",
			"yield_statement",
			"{",
			"|",
			"|=",
			"||",
			"}",
			"~",
		],
	},
	{
		"name": "jsdoc",
		"extensions": [],
		"nodes": [
			"#",
			".",
			"/",
			":",
			"[",
			"]",
			"description",
			"document",
			"identifier",
			"inline_tag",
			"member_expression",
			"optional_identifier",
			"path_expression",
			"qualified_expression",
			"tag",
			"tag_name",
			"type",
			"{",
			"}",
			"~",
		],
	},
	{
		"name": "rust",
		"extensions": ["rs", "rs.in"],
		"nodes": [
			"!",
			"!=",
			'"',
			"#",
			"$",
			"%",
			"%=",
			"&",
			"&&",
			"&=",
			"'",
			"(",
			")",
			"*",
			"*/",
			"*=",
			"+",
			"+=",
			",",
			"-",
			"-=",
			"->",
			".",
			"..",
			"...",
			"..=",
			"/",
			"/*",
			"//",
			"/=",
			":",
			"::",
			";",
			"<",
			"<<",
			"<<=",
			"<=",
			"=",
			"==",
			"=>",
			">",
			">=",
			">>",
			">>=",
			"?",
			"@",
			"[",
			"]",
			"^",
			"^=",
			"_",
			"_declaration_statement",
			"_expression",
			"_literal",
			"_literal_pattern",
			"_pattern",
			"_type",
			"abstract_type",
			"arguments",
			"array_expression",
			"array_type",
			"as",
			"assignment_expression",
			"associated_type",
			"async",
			"async_block",
			"attribute",
			"attribute_item",
			"await",
			"await_expression",
			"base_field_initializer",
			"binary_expression",
			"block",
			"block_comment",
			"boolean_literal",
			"bounded_type",
			"bracketed_type",
			"break",
			"break_expression",
			"call_expression",
			"captured_pattern",
			"char_literal",
			"closure_expression",
			"closure_parameters",
			"compound_assignment_expr",
			"const",
			"const_block",
			"const_item",
			"const_parameter",
			"continue",
			"continue_expression",
			"crate",
			"declaration_list",
			"default",
			"doc_comment",
			"dyn",
			"dynamic_type",
			"else",
			"else_clause",
			"empty_statement",
			"enum",
			"enum_item",
			"enum_variant",
			"enum_variant_list",
			"escape_sequence",
			"expr",
			"expr_2021",
			"expression_statement",
			"extern",
			"extern_crate_declaration",
			"extern_modifier",
			"false",
			"field_declaration",
			"field_declaration_list",
			"field_expression",
			"field_identifier",
			"field_initializer",
			"field_initializer_list",
			"field_pattern",
			"float_literal",
			"fn",
			"for",
			"for_expression",
			"for_lifetimes",
			"foreign_mod_item",
			"fragment_specifier",
			"function_item",
			"function_modifiers",
			"function_signature_item",
			"function_type",
			"gen",
			"gen_block",
			"generic_function",
			"generic_pattern",
			"generic_type",
			"generic_type_with_turbofish",
			"higher_ranked_trait_bound",
			"ident",
			"identifier",
			"if",
			"if_expression",
			"impl",
			"impl_item",
			"in",
			"index_expression",
			"inner_attribute_item",
			"inner_doc_comment_marker",
			"integer_literal",
			"item",
			"label",
			"let",
			"let_chain",
			"let_condition",
			"let_declaration",
			"lifetime",
			"lifetime_parameter",
			"line_comment",
			"literal",
			"loop",
			"loop_expression",
			"macro_definition",
			"macro_invocation",
			"macro_rule",
			"macro_rules!",
			"match",
			"match_arm",
			"match_block",
			"match_expression",
			"match_pattern",
			"meta",
			"metavariable",
			"mod",
			"mod_item",
			"move",
			"mut_pattern",
			"mutable_specifier",
			"negative_literal",
			"never_type",
			"or_pattern",
			"ordered_field_declaration_list",
			"outer_doc_comment_marker",
			"parameter",
			"parameters",
			"parenthesized_expression",
			"pat",
			"pat_param",
			"path",
			"pointer_type",
			"primitive_type",
			"pub",
			"qualified_type",
			"range_expression",
			"range_pattern",
			"raw",
			"raw_string_literal",
			"ref",
			"ref_pattern",
			"reference_expression",
			"reference_pattern",
			"reference_type",
			"remaining_field_pattern",
			"removed_trait_bound",
			"return",
			"return_expression",
			"scoped_identifier",
			"scoped_type_identifier",
			"scoped_use_list",
			"self",
			"self_parameter",
			"shebang",
			"shorthand_field_identifier",
			"shorthand_field_initializer",
			"slice_pattern",
			"source_file",
			"static",
			"static_item",
			"stmt",
			"string_content",
			"string_literal",
			"struct",
			"struct_expression",
			"struct_item",
			"struct_pattern",
			"super",
			"token_binding_pattern",
			"token_repetition",
			"token_repetition_pattern",
			"token_tree",
			"token_tree_pattern",
			"trait",
			"trait_bounds",
			"trait_item",
			"true",
			"try",
			"try_block",
			"try_expression",
			"tt",
			"tuple_expression",
			"tuple_pattern",
			"tuple_struct_pattern",
			"tuple_type",
			"ty",
			"type",
			"type_arguments",
			"type_binding",
			"type_cast_expression",
			"type_identifier",
			"type_item",
			"type_parameter",
			"type_parameters",
			"unary_expression",
			"union",
			"union_item",
			"unit_expression",
			"unit_type",
			"unsafe",
			"unsafe_block",
			"use",
			"use_as_clause",
			"use_bounds",
			"use_declaration",
			"use_list",
			"use_wildcard",
			"variadic_parameter",
			"vis",
			"visibility_modifier",
			"where",
			"where_clause",
			"where_predicate",
			"while",
			"while_expression",
			"yield",
			"yield_expression",
			"{",
			"|",
			"|=",
			"||",
			"}",
		],
	},
	{
		"name": "ocaml",
		"extensions": ["ml", "eliom", "eliomi", "ml4", "mli", "mll", "mly"],
		"nodes": [
			"!",
			'"',
			"#",
			"%",
			"&",
			"'",
			"(",
			")",
			"*",
			"+",
			"+=",
			",",
			"-",
			"->",
			".",
			"..",
			":",
			"::",
			":=",
			":>",
			";",
			";;",
			"<",
			"<-",
			"=",
			">",
			">}",
			"?",
			"[",
			"[%",
			"[%%",
			"[<",
			"[>",
			"[@",
			"[@@",
			"[@@@",
			"[|",
			"]",
			"_",
			"_binding_pattern",
			"_class_expression",
			"_class_field",
			"_class_field_specification",
			"_class_type",
			"_constant",
			"_effect_pattern",
			"_expression",
			"_infix_operator",
			"_module_expression",
			"_module_type",
			"_parameter",
			"_pattern",
			"_polymorphic_type",
			"_sequence_expression",
			"_signature_item",
			"_signed_constant",
			"_simple_class_expression",
			"_simple_class_type",
			"_simple_expression",
			"_simple_module_expression",
			"_simple_pattern",
			"_simple_type",
			"_structure_item",
			"_type",
			"abstract_type",
			"add_operator",
			"alias_pattern",
			"aliased_type",
			"and",
			"and_operator",
			"application_expression",
			"array_binding_pattern",
			"array_expression",
			"array_get_expression",
			"array_pattern",
			"as",
			"assert",
			"assert_expression",
			"assign_operator",
			"attribute",
			"attribute_id",
			"attribute_payload",
			"begin",
			"bigarray_get_expression",
			"boolean",
			"character",
			"character_content",
			"class",
			"class_application",
			"class_binding",
			"class_body_type",
			"class_definition",
			"class_function",
			"class_function_type",
			"class_initializer",
			"class_name",
			"class_path",
			"class_type_binding",
			"class_type_definition",
			"class_type_name",
			"class_type_path",
			"coercion_expression",
			"comment",
			"compilation_unit",
			"concat_operator",
			"cons_expression",
			"cons_pattern",
			"constrain_module",
			"constrain_module_type",
			"constrain_type",
			"constraint",
			"constructed_type",
			"constructor_declaration",
			"constructor_name",
			"constructor_path",
			"constructor_pattern",
			"conversion_specification",
			"directive",
			"do",
			"do_clause",
			"done",
			"downto",
			"effect",
			"effect_pattern",
			"else",
			"else_clause",
			"end",
			"escape_sequence",
			"exception",
			"exception_definition",
			"exception_pattern",
			"expression_item",
			"extended_module_path",
			"extension",
			"external",
			"false",
			"field_declaration",
			"field_expression",
			"field_get_expression",
			"field_name",
			"field_path",
			"field_pattern",
			"floating_attribute",
			"for",
			"for_expression",
			"fun",
			"fun_expression",
			"function",
			"function_expression",
			"function_type",
			"functor",
			"functor_type",
			"guard",
			"hash_expression",
			"hash_operator",
			"hash_type",
			"if",
			"if_expression",
			"in",
			"include",
			"include_module",
			"include_module_type",
			"indexing_operator",
			"indexing_operator_path",
			"infix_expression",
			"inherit",
			"inheritance_definition",
			"inheritance_specification",
			"initializer",
			"instance_variable_definition",
			"instance_variable_expression",
			"instance_variable_name",
			"instance_variable_specification",
			"instantiated_class",
			"instantiated_class_type",
			"item_attribute",
			"item_extension",
			"label_name",
			"labeled_argument",
			"labeled_argument_type",
			"lazy",
			"lazy_expression",
			"lazy_pattern",
			"let",
			"let_and_operator",
			"let_binding",
			"let_class_expression",
			"let_exception_expression",
			"let_expression",
			"let_module_expression",
			"let_open_class_expression",
			"let_open_class_type",
			"let_open_expression",
			"let_operator",
			"line_number_directive",
			"list_binding_pattern",
			"list_expression",
			"list_pattern",
			"local_open_expression",
			"local_open_pattern",
			"local_open_type",
			"match",
			"match_case",
			"match_expression",
			"match_operator",
			"method",
			"method_definition",
			"method_invocation",
			"method_name",
			"method_specification",
			"method_type",
			"module",
			"module_application",
			"module_binding",
			"module_definition",
			"module_name",
			"module_parameter",
			"module_path",
			"module_type_constraint",
			"module_type_definition",
			"module_type_name",
			"module_type_of",
			"module_type_path",
			"mult_operator",
			"mutable",
			"new",
			"new_expression",
			"nonrec",
			"number",
			"object",
			"object_copy_expression",
			"object_expression",
			"object_type",
			"ocamlyacc_value",
			"of",
			"open",
			"open_module",
			"or_operator",
			"or_pattern",
			"package_expression",
			"package_pattern",
			"package_type",
			"packed_module",
			"parameter",
			"parenthesized_class_expression",
			"parenthesized_expression",
			"parenthesized_module_expression",
			"parenthesized_module_type",
			"parenthesized_operator",
			"parenthesized_pattern",
			"parenthesized_type",
			"polymorphic_type",
			"polymorphic_variant_pattern",
			"polymorphic_variant_type",
			"pow_operator",
			"prefix_expression",
			"prefix_operator",
			"pretty_printing_indication",
			"private",
			"quoted_extension",
			"quoted_item_extension",
			"quoted_string",
			"quoted_string_content",
			"range_pattern",
			"rec",
			"record_binding_pattern",
			"record_declaration",
			"record_expression",
			"record_pattern",
			"refutation_case",
			"rel_operator",
			"sequence_expression",
			"set_expression",
			"shebang",
			"sig",
			"sign_expression",
			"sign_operator",
			"signature",
			"signed_number",
			"string",
			"string_content",
			"string_get_expression",
			"struct",
			"structure",
			"tag",
			"tag_pattern",
			"tag_specification",
			"then",
			"then_clause",
			"to",
			"toplevel_directive",
			"true",
			"try",
			"try_expression",
			"tuple_expression",
			"tuple_pattern",
			"tuple_type",
			"type",
			"type_binding",
			"type_constraint",
			"type_constructor",
			"type_constructor_path",
			"type_definition",
			"type_parameter_constraint",
			"type_variable",
			"typed_class_expression",
			"typed_expression",
			"typed_module_expression",
			"typed_pattern",
			"unit",
			"val",
			"value_definition",
			"value_name",
			"value_path",
			"value_pattern",
			"value_specification",
			"variant_declaration",
			"virtual",
			"when",
			"while",
			"while_expression",
			"with",
			"{",
			"{%",
			"{%%",
			"{<",
			"|",
			"|]",
			"}",
			"~",
		],
	},
	{
		"name": "html",
		"extensions": [],
		"nodes": [
			'"',
			"'",
			"/>",
			"<",
			"<!",
			"</",
			"=",
			">",
			"attribute",
			"attribute_name",
			"attribute_value",
			"comment",
			"doctype",
			"document",
			"element",
			"end_tag",
			"entity",
			"erroneous_end_tag",
			"erroneous_end_tag_name",
			"quoted_attribute_value",
			"raw_text",
			"script_element",
			"self_closing_tag",
			"start_tag",
			"style_element",
			"tag_name",
			"text",
		],
	},
	{
		"name": "javascript",
		"extensions": [
			"js",
			"_js",
			"bones",
			"es",
			"es6",
			"frag",
			"gs",
			"jake",
			"jsb",
			"jscad",
			"jsfl",
			"jsm",
			"jss",
			"njs",
			"pac",
			"sjs",
			"ssjs",
			"sublime-build",
			"sublime-commands",
			"sublime-completions",
			"sublime-keymap",
			"sublime-macro",
			"sublime-menu",
			"sublime-mousemap",
			"sublime-project",
			"sublime-settings",
			"sublime-theme",
			"sublime-workspace",
			"sublime_metrics",
			"sublime_session",
			"xsjs",
			"xsjslib",
		],
		"nodes": [
			"!",
			"!=",
			"!==",
			'"',
			"${",
			"%",
			"%=",
			"&",
			"&&",
			"&&=",
			"&=",
			"'",
			"(",
			")",
			"*",
			"**",
			"**=",
			"*=",
			"+",
			"++",
			"+=",
			",",
			"-",
			"--",
			"-=",
			".",
			"...",
			"/",
			"/=",
			"/>",
			":",
			";",
			"<",
			"</",
			"<<",
			"<<=",
			"<=",
			"=",
			"==",
			"===",
			"=>",
			">",
			">=",
			">>",
			">>=",
			">>>",
			">>>=",
			"?",
			"??",
			"??=",
			"@",
			"[",
			"]",
			"^",
			"^=",
			"`",
			"arguments",
			"array",
			"array_pattern",
			"arrow_function",
			"as",
			"assignment_expression",
			"assignment_pattern",
			"async",
			"augmented_assignment_expression",
			"await",
			"await_expression",
			"binary_expression",
			"break",
			"break_statement",
			"call_expression",
			"case",
			"catch",
			"catch_clause",
			"class",
			"class_body",
			"class_declaration",
			"class_heritage",
			"class_static_block",
			"comment",
			"computed_property_name",
			"const",
			"continue",
			"continue_statement",
			"debugger",
			"debugger_statement",
			"declaration",
			"decorator",
			"default",
			"delete",
			"do",
			"do_statement",
			"else",
			"else_clause",
			"empty_statement",
			"escape_sequence",
			"export",
			"export_clause",
			"export_specifier",
			"export_statement",
			"expression",
			"expression_statement",
			"extends",
			"false",
			"field_definition",
			"finally",
			"finally_clause",
			"for",
			"for_in_statement",
			"for_statement",
			"formal_parameters",
			"from",
			"function",
			"function_declaration",
			"function_expression",
			"generator_function",
			"generator_function_declaration",
			"get",
			"hash_bang_line",
			"html_character_reference",
			"html_comment",
			"identifier",
			"if",
			"if_statement",
			"import",
			"import_attribute",
			"import_clause",
			"import_specifier",
			"import_statement",
			"in",
			"instanceof",
			"jsx_attribute",
			"jsx_closing_element",
			"jsx_element",
			"jsx_expression",
			"jsx_namespace_name",
			"jsx_opening_element",
			"jsx_self_closing_element",
			"jsx_text",
			"labeled_statement",
			"let",
			"lexical_declaration",
			"member_expression",
			"meta",
			"meta_property",
			"method_definition",
			"named_imports",
			"namespace_export",
			"namespace_import",
			"new",
			"new_expression",
			"null",
			"number",
			"object",
			"object_assignment_pattern",
			"object_pattern",
			"of",
			"optional_chain",
			"pair",
			"pair_pattern",
			"parenthesized_expression",
			"pattern",
			"primary_expression",
			"private_property_identifier",
			"program",
			"property_identifier",
			"regex",
			"regex_flags",
			"regex_pattern",
			"rest_pattern",
			"return",
			"return_statement",
			"sequence_expression",
			"set",
			"shorthand_property_identifier",
			"shorthand_property_identifier_pattern",
			"spread_element",
			"statement",
			"statement_block",
			"statement_identifier",
			"static",
			"static get",
			"string",
			"string_fragment",
			"subscript_expression",
			"super",
			"switch",
			"switch_body",
			"switch_case",
			"switch_default",
			"switch_statement",
			"target",
			"template_string",
			"template_substitution",
			"ternary_expression",
			"this",
			"throw",
			"throw_statement",
			"true",
			"try",
			"try_statement",
			"typeof",
			"unary_expression",
			"undefined",
			"update_expression",
			"var",
			"variable_declaration",
			"variable_declarator",
			"void",
			"while",
			"while_statement",
			"with",
			"with_statement",
			"yield",
			"yield_expression",
			"{",
			"|",
			"|=",
			"||",
			"||=",
			"}",
			"~",
		],
	},
	{
		"name": "julia",
		"extensions": ["jl"],
		"nodes": [
			'"',
			'"""',
			"$",
			"$=",
			"'",
			"(",
			")",
			",",
			"->",
			".",
			"...",
			".=",
			":",
			"::",
			":=",
			";",
			"?",
			"@",
			"[",
			"]",
			"_definition",
			"_expression",
			"_statement",
			"`",
			"```",
			"abstract",
			"abstract_definition",
			"adjoint_expression",
			"argument_list",
			"arrow_function_expression",
			"as",
			"assignment",
			"baremodule",
			"begin",
			"binary_expression",
			"block_comment",
			"boolean_literal",
			"break_statement",
			"broadcast_call_expression",
			"call_expression",
			"catch",
			"catch_clause",
			"character_literal",
			"command_literal",
			"compound_assignment_expression",
			"compound_statement",
			"comprehension_expression",
			"const",
			"const_statement",
			"content",
			"continue_statement",
			"curly_expression",
			"do",
			"do_clause",
			"else",
			"else_clause",
			"elseif",
			"elseif_clause",
			"end",
			"escape_sequence",
			"export",
			"export_statement",
			"false",
			"field_expression",
			"finally",
			"finally_clause",
			"float_literal",
			"for",
			"for_binding",
			"for_clause",
			"for_statement",
			"function",
			"function_definition",
			"generator",
			"global",
			"global_statement",
			"identifier",
			"if",
			"if_clause",
			"if_statement",
			"import",
			"import_alias",
			"import_path",
			"import_statement",
			"index_expression",
			"integer_literal",
			"interpolation_expression",
			"juxtaposition_expression",
			"let",
			"let_statement",
			"line_comment",
			"local",
			"local_statement",
			"macro",
			"macro_argument_list",
			"macro_definition",
			"macro_identifier",
			"macrocall_expression",
			"matrix_expression",
			"matrix_row",
			"module",
			"module_definition",
			"mutable",
			"open_tuple",
			"operator",
			"outer",
			"parametrized_type_expression",
			"parenthesized_expression",
			"prefixed_command_literal",
			"prefixed_string_literal",
			"primitive",
			"primitive_definition",
			"public",
			"public_statement",
			"quote",
			"quote_expression",
			"quote_statement",
			"range_expression",
			"return",
			"return_statement",
			"selected_import",
			"signature",
			"source_file",
			"splat_expression",
			"string_interpolation",
			"string_literal",
			"struct",
			"struct_definition",
			"ternary_expression",
			"true",
			"try",
			"try_statement",
			"tuple_expression",
			"type",
			"type_head",
			"typed_expression",
			"unary_expression",
			"unary_typed_expression",
			"using",
			"using_statement",
			"vector_expression",
			"where",
			"where_expression",
			"while",
			"while_statement",
			"{",
			"}",
		],
	},
	{
		"name": "bash",
		"extensions": [],
		"nodes": [
			"!",
			"!=",
			'"',
			"#",
			"##",
			"$",
			"$(",
			"$((",
			"$[",
			"$`",
			"${",
			"%",
			"%%",
			"%=",
			"&",
			"&&",
			"&=",
			"&>",
			"&>>",
			"(",
			"((",
			")",
			"))",
			"*",
			"**",
			"**=",
			"*=",
			"+",
			"++",
			"+=",
			",",
			",,",
			"-",
			"--",
			"-=",
			"-a",
			"-o",
			"..",
			"/",
			"/#",
			"/%",
			"//",
			"/=",
			":",
			":+",
			":-",
			":=",
			":?",
			";",
			";&",
			";;",
			";;&",
			"<",
			"<&",
			"<&-",
			"<(",
			"<<",
			"<<-",
			"<<<",
			"<<=",
			"<=",
			"=",
			"==",
			"=~",
			">",
			">&",
			">&-",
			">(",
			">=",
			">>",
			">>=",
			">|",
			"?",
			"@",
			"A",
			"E",
			"K",
			"L",
			"P",
			"Q",
			"U",
			"[",
			"[[",
			"]",
			"]]",
			"^",
			"^=",
			"^^",
			"_expression",
			"_primary_expression",
			"_statement",
			"`",
			"``",
			"a",
			"ansi_c_string",
			"arithmetic_expansion",
			"array",
			"binary_expression",
			"brace_expression",
			"c_style_for_statement",
			"case",
			"case_item",
			"case_statement",
			"command",
			"command_name",
			"command_substitution",
			"comment",
			"compound_statement",
			"concatenation",
			"declaration_command",
			"declare",
			"do",
			"do_group",
			"done",
			"elif",
			"elif_clause",
			"else",
			"else_clause",
			"esac",
			"expansion",
			"export",
			"extglob_pattern",
			"fi",
			"file_descriptor",
			"file_redirect",
			"for",
			"for_statement",
			"function",
			"function_definition",
			"heredoc_body",
			"heredoc_content",
			"heredoc_end",
			"heredoc_redirect",
			"heredoc_start",
			"herestring_redirect",
			"if",
			"if_statement",
			"in",
			"k",
			"list",
			"local",
			"negated_command",
			"number",
			"parenthesized_expression",
			"pipeline",
			"postfix_expression",
			"process_substitution",
			"program",
			"raw_string",
			"readonly",
			"redirected_statement",
			"regex",
			"select",
			"simple_expansion",
			"special_variable_name",
			"string",
			"string_content",
			"subscript",
			"subshell",
			"ternary_expression",
			"test_command",
			"test_operator",
			"then",
			"translated_string",
			"typeset",
			"u",
			"unary_expression",
			"unset",
			"unset_command",
			"unsetenv",
			"until",
			"variable_assignment",
			"variable_assignments",
			"variable_name",
			"while",
			"while_statement",
			"word",
			"{",
			"|",
			"|&",
			"|=",
			"||",
			"}",
			"~",
		],
	},
	{
		"name": "embeddedtemplate",
		"extensions": [],
		"nodes": [
			"%%>",
			"%>",
			"-%>",
			"<%",
			"<%#",
			"<%%",
			"<%-",
			"<%=",
			"<%==",
			"<%_",
			"<%graphql",
			"<%|",
			"<%|=",
			"<%|==",
			"=%>",
			"_%>",
			"code",
			"comment",
			"comment_directive",
			"content",
			"directive",
			"graphql_directive",
			"output_directive",
			"template",
		],
	},
	{
		"name": "css",
		"extensions": [],
		"nodes": [
			'"',
			"#",
			"$=",
			"'",
			"(",
			")",
			"*",
			"*=",
			"+",
			",",
			"-",
			".",
			"/",
			":",
			"::",
			";",
			"=",
			">",
			"@charset",
			"@import",
			"@keyframes",
			"@media",
			"@namespace",
			"@supports",
			"[",
			"]",
			"^=",
			"adjacent_sibling_selector",
			"and",
			"arguments",
			"at_keyword",
			"at_rule",
			"attribute_name",
			"attribute_selector",
			"binary_expression",
			"binary_query",
			"block",
			"call_expression",
			"charset_statement",
			"child_selector",
			"class_name",
			"class_selector",
			"color_value",
			"comment",
			"declaration",
			"descendant_selector",
			"escape_sequence",
			"feature_name",
			"feature_query",
			"float_value",
			"from",
			"function_name",
			"grid_value",
			"id_name",
			"id_selector",
			"identifier",
			"import_statement",
			"important",
			"integer_value",
			"js_comment",
			"keyframe_block",
			"keyframe_block_list",
			"keyframes_name",
			"keyframes_statement",
			"keyword_query",
			"media_statement",
			"namespace_name",
			"namespace_selector",
			"namespace_statement",
			"nesting_selector",
			"not",
			"of",
			"only",
			"or",
			"parenthesized_query",
			"parenthesized_value",
			"plain_value",
			"postcss_statement",
			"property_name",
			"pseudo_class_selector",
			"pseudo_element_selector",
			"rule_set",
			"selector",
			"selector_query",
			"selectors",
			"sibling_selector",
			"string_content",
			"string_value",
			"stylesheet",
			"supports_statement",
			"tag_name",
			"to",
			"unary_query",
			"unit",
			"universal_selector",
			"{",
			"|",
			"|=",
			"}",
			"~",
			"~=",
		],
	},
	{
		"name": "swift",
		"extensions": ["swift"],
		"nodes": [
			"!",
			"#available",
			"#else",
			"#elseif",
			"#endif",
			"#error",
			"#if",
			"#line",
			"#warning",
			"&&",
			"(",
			")",
			"*",
			",",
			"->",
			".",
			":",
			";",
			"<",
			"=",
			">",
			">=",
			"?",
			"Array",
			"Dictionary",
			"Linux",
			"[",
			"]",
			"_",
			"arch",
			"arm",
			"arm64",
			"array_type",
			"as",
			"as_pattern",
			"associatedtype",
			"associatedtype_declaration",
			"associativity",
			"associativity_clause",
			"availability_condition",
			"boolean",
			"boolean_literal",
			"break",
			"break_statement",
			"build_configuration_statement",
			"canImport",
			"case",
			"case_condition",
			"case_declaration",
			"case_statement",
			"catch",
			"catch_clause",
			"class",
			"class_declaration",
			"compiler",
			"constant_declaration",
			"continue",
			"continue_statement",
			"default",
			"defer",
			"defer_statement",
			"deinit",
			"deinitializer_declaration",
			"diagnostic_statement",
			"dictionary_type",
			"do",
			"do_statement",
			"else",
			"enum",
			"enum_case_pattern",
			"enum_declaration",
			"extension",
			"extension_declaration",
			"fallthrough_statement",
			"false",
			"fileprivate",
			"fileprivate(set)",
			"final",
			"for",
			"for_statement",
			"func",
			"function_declaration",
			"generic_clause",
			"get",
			"guard",
			"guard_statement",
			"i386",
			"iOS",
			"iOSApplicationExtension",
			"identifier",
			"if",
			"if_statement",
			"import",
			"import_declaration",
			"in",
			"indirect",
			"infix",
			"init",
			"initializer_declaration",
			"internal",
			"internal(set)",
			"is",
			"is_pattern",
			"labeled_statement",
			"left",
			"let",
			"line_control_statement",
			"macCatalyst",
			"macOS",
			"macOSApplicationExtension",
			"modifier",
			"nil",
			"none",
			"number",
			"open",
			"operator",
			"operator_declaration",
			"optional_binding",
			"optional_binding_condition",
			"optional_pattern",
			"os",
			"parameter_declaration",
			"parameter_list",
			"postfix",
			"precedence",
			"precedence_clause",
			"prefix",
			"private",
			"private(set)",
			"program",
			"protocol",
			"protocol_declaration",
			"protocol_initializer_declaration",
			"protocol_method_declaration",
			"protocol_subscript_declaration",
			"protocol_typealias_declaration",
			"protocol_variable_declaration",
			"public",
			"repeat",
			"repeat_while_statement",
			"rethrows",
			"return",
			"return_statement",
			"right",
			"semantic_version",
			"set",
			"simulator",
			"standard_type",
			"static",
			"static_string_literal",
			"string",
			"struct",
			"struct_declaration",
			"subscript",
			"subscript_declaration",
			"swift",
			"switch",
			"switch_statement",
			"targetEnvironment",
			"throw",
			"throw_statement",
			"throws",
			"true",
			"tuple",
			"tuple_type",
			"tvOS",
			"type",
			"type_identifier",
			"typealias",
			"typealias_declaration",
			"value_binding_pattern",
			"var",
			"variable_declaration",
			"watchOS",
			"while",
			"while_statement",
			"wildcard_pattern",
			"x86_64",
			"{",
			"||",
			"}",
		],
	},
	{
		"name": "verilog",
		"extensions": ["v", "veo"],
		"nodes": [
			"\\n",
			"!",
			"!=",
			"!==",
			"!=?",
			'"',
			'"DPI"',
			'"DPI-C"',
			"#",
			"##",
			"##[*]",
			"##[+]",
			"#-#",
			"#0",
			"#=#",
			"$",
			"$error",
			"$fatal",
			"$fullskew",
			"$fullskew_timing_check",
			"$hold",
			"$hold_timing_check",
			"$info",
			"$nochange",
			"$nochange_timing_check",
			"$period",
			"$period_timing_check",
			"$recovery",
			"$recovery_timing_check",
			"$recrem",
			"$recrem_timing_check",
			"$removal",
			"$removal_timing_check",
			"$root",
			"$setup",
			"$setup_timing_check",
			"$setuphold",
			"$setuphold_timing_check",
			"$skew",
			"$skew_timing_check",
			"$timeskew",
			"$timeskew_timing_check",
			"$unit",
			"$warning",
			"$width",
			"$width_timing_check",
			"%",
			"%=",
			"&",
			"&&",
			"&&&",
			"&=",
			"'",
			"'0",
			"'1",
			"'B0",
			"'B1",
			"'b0",
			"'b1",
			"'{",
			"(",
			"(*",
			")",
			"*",
			"*)",
			"**",
			"*::*",
			"*=",
			"*>",
			"+",
			"++",
			"+:",
			"+=",
			",",
			"-",
			"--",
			"-:",
			"-=",
			"->",
			"->>",
			".",
			".*",
			"/",
			"/=",
			"0",
			"01",
			"1",
			"1'B0",
			"1'B1",
			"1'BX",
			"1'Bx",
			"1'b0",
			"1'b1",
			"1'bX",
			"1'bx",
			"10",
			"1step",
			"2",
			":",
			":/",
			"::",
			":=",
			";",
			"<",
			"<->",
			"<<",
			"<<<",
			"<<<=",
			"<<=",
			"<=",
			"=",
			"==",
			"===",
			"==?",
			"=>",
			">",
			">=",
			">>",
			">>=",
			">>>",
			">>>=",
			"?",
			"@",
			"@*",
			"@@",
			"PATHPULSE$=",
			"[",
			"[*",
			"[*]",
			"[+]",
			"[->",
			"[=",
			"[–>",
			"\\",
			"]",
			"^",
			"^=",
			"^~",
			"_ordered_parameter_assignment",
			"`",
			"accept_on",
			"action_block",
			"alias",
			"always",
			"always_comb",
			"always_construct",
			"always_ff",
			"always_keyword",
			"always_latch",
			"and",
			"anonymous_program",
			"anonymous_program_item",
			"ansi_port_declaration",
			"array_manipulation_call",
			"array_method_name",
			"array_range_expression",
			"assert",
			"assert_property_statement",
			"assertion_variable_declaration",
			"assign",
			"assignment_operator",
			"assignment_pattern",
			"assignment_pattern_expression",
			"assignment_pattern_key",
			"assignment_pattern_net_lvalue",
			"assignment_pattern_variable_lvalue",
			"associative_dimension",
			"assume",
			"assume_property_statement",
			"attr_spec",
			"attribute_instance",
			"automatic",
			"before",
			"begin",
			"begin_keywords",
			"binary_number",
			"bind",
			"bind_directive",
			"bind_target_instance",
			"bind_target_instance_list",
			"bind_target_scope",
			"bins",
			"bins_expression",
			"bins_keyword",
			"bins_or_empty",
			"bins_or_options",
			"bins_selection",
			"bins_selection_or_option",
			"binsof",
			"bit",
			"bit_select1",
			"block_event_expression",
			"block_item_declaration",
			"blocking_assignment",
			"break",
			"buf",
			"bufif0",
			"bufif1",
			"byte",
			"c_identifier",
			"case",
			"case_expression",
			"case_generate_construct",
			"case_generate_item",
			"case_inside_item",
			"case_item",
			"case_item_expression",
			"case_keyword",
			"case_pattern_item",
			"case_statement",
			"casex",
			"casez",
			"cast",
			"casting_type",
			"chandle",
			"charge_strength",
			"checker",
			"checker_declaration",
			"checker_identifier",
			"checker_instantiation",
			"checker_or_generate_item_declaration",
			"checker_port_direction",
			"checker_port_item",
			"checker_port_list",
			"class",
			"class_constructor_declaration",
			"class_constructor_prototype",
			"class_declaration",
			"class_identifier",
			"class_item",
			"class_item_qualifier",
			"class_method",
			"class_new",
			"class_property",
			"class_qualifier",
			"class_scope",
			"class_type",
			"clocking",
			"clocking_decl_assign",
			"clocking_declaration",
			"clocking_direction",
			"clocking_drive",
			"clocking_event",
			"clocking_identifier",
			"clocking_item",
			"clocking_skew",
			"clockvar",
			"clockvar_expression",
			"cmos",
			"cmos_switch_instance",
			"cmos_switchtype",
			"combinational_body",
			"combinational_entry",
			"comment",
			"concatenation",
			"concurrent_assertion_item",
			"cond_pattern",
			"cond_predicate",
			"conditional_expression",
			"conditional_statement",
			"consecutive_repetition",
			"const",
			"const_identifier",
			"constant_bit_select1",
			"constant_concatenation",
			"constant_expression",
			"constant_indexed_range",
			"constant_mintypmax_expression",
			"constant_multiple_concatenation",
			"constant_param_expression",
			"constant_primary",
			"constant_range",
			"constant_select1",
			"constraint",
			"constraint_block",
			"constraint_block_item",
			"constraint_declaration",
			"constraint_expression",
			"constraint_identifier",
			"constraint_primary",
			"constraint_prototype",
			"constraint_prototype_qualifier",
			"constraint_set",
			"context",
			"continue",
			"continuous_assign",
			"controlled_reference_event",
			"cover",
			"cover_cross",
			"cover_point",
			"cover_point_identifier",
			"cover_property_statement",
			"cover_sequence_statement",
			"coverage_event",
			"coverage_option",
			"coverage_spec_or_option",
			"covergroup",
			"covergroup_declaration",
			"covergroup_identifier",
			"covergroup_range_list",
			"covergroup_value_range",
			"coverpoint",
			"cross",
			"cross_body",
			"cross_body_item",
			"cross_identifier",
			"cycle_delay",
			"cycle_delay_const_range_expression",
			"cycle_delay_range",
			"data_declaration",
			"data_event",
			"data_source_expression",
			"data_type",
			"data_type_or_implicit1",
			"data_type_or_void",
			"deassign",
			"decimal_number",
			"default",
			"default_nettype_compiler_directive",
			"default_nettype_value",
			"default_skew",
			"default_text",
			"deferred_immediate_assert_statement",
			"deferred_immediate_assertion_item",
			"deferred_immediate_assume_statement",
			"deferred_immediate_cover_statement",
			"defparam",
			"defparam_assignment",
			"delay2",
			"delay3",
			"delay_control",
			"delay_or_event_control",
			"delay_value",
			"delayed_data",
			"delayed_reference",
			"directive_begin_keywords",
			"directive_celldefine",
			"directive_default_nettype",
			"directive_define",
			"directive_else",
			"directive_elsif",
			"directive_end_keywords",
			"directive_endcelldefine",
			"directive_endif",
			"directive_ifdef",
			"directive_ifndef",
			"directive_include",
			"directive_line",
			"directive_nounconnected_drive",
			"directive_resetall",
			"directive_timescale",
			"directive_unconnected_drive",
			"directive_undef",
			"directive_undefineall",
			"disable",
			"disable_statement",
			"dist",
			"dist_item",
			"dist_list",
			"dist_weight",
			"do",
			"double_quoted_string",
			"dpi_function_import_property",
			"dpi_function_proto",
			"dpi_import_export",
			"dpi_spec_string",
			"dpi_task_import_property",
			"dpi_task_proto",
			"drive_strength",
			"dynamic_array_new",
			"dynamic_array_variable_identifier",
			"edge",
			"edge_control_specifier",
			"edge_descriptor",
			"edge_identifier",
			"edge_indicator",
			"edge_input_list",
			"edge_sensitive_path_declaration",
			"edge_symbol",
			"elaboration_system_task",
			"else",
			"empty_unpacked_array_concatenation",
			"enable_gate_instance",
			"enable_gatetype",
			"enable_terminal",
			"end",
			"end_edge_offset",
			"endcase",
			"endchecker",
			"endclass",
			"endclocking",
			"endfunction",
			"endgenerate",
			"endgroup",
			"endinterface",
			"endmodule",
			"endpackage",
			"endprimitive",
			"endprogram",
			"endproperty",
			"endsequence",
			"endspecify",
			"endtable",
			"endtask",
			"enum",
			"enum_base_type",
			"enum_identifier",
			"enum_name_declaration",
			"error_limit_value",
			"escaped_identifier",
			"event",
			"event_based_flag",
			"event_control",
			"event_expression",
			"event_trigger",
			"eventually",
			"expect",
			"expect_property_statement",
			"export",
			"expression",
			"expression_or_dist",
			"extends",
			"extern",
			"extern_constraint_declaration",
			"extern_tf_declaration",
			"final",
			"final_construct",
			"finish_number",
			"first_match",
			"fixed_point_number",
			"for",
			"for_initialization",
			"for_step",
			"for_variable_declaration",
			"force",
			"foreach",
			"forever",
			"fork",
			"forkjoin",
			"formal_argument",
			"formal_port_identifier",
			"fs",
			"full_edge_sensitive_path_description",
			"full_path_description",
			"function",
			"function_body_declaration",
			"function_data_type_or_implicit1",
			"function_declaration",
			"function_identifier",
			"function_prototype",
			"function_statement",
			"function_statement_or_null",
			"function_subroutine_call",
			"gate_instantiation",
			"generate",
			"generate_block",
			"generate_block_identifier",
			"generate_region",
			"genvar",
			"genvar_declaration",
			"genvar_identifier",
			"genvar_initialization",
			"genvar_iteration",
			"global",
			"goto_repetition",
			"hex_number",
			"hierarchical_btf_identifier",
			"hierarchical_instance",
			"highz0",
			"highz1",
			"id_directive",
			"identifier_list",
			"if",
			"if_generate_construct",
			"iff",
			"ifnone",
			"ignore_bins",
			"illegal_bins",
			"implements",
			"implicit_class_handle",
			"implicit_data_type1",
			"implies",
			"import",
			"import_export",
			"inc_or_dec_expression",
			"inc_or_dec_operator",
			"include_compiler_directive",
			"include_compiler_directive_standard",
			"index_variable_identifier",
			"indexed_range",
			"init_val",
			"initial",
			"initial_construct",
			"inout",
			"inout_declaration",
			"inout_port_identifier",
			"inout_terminal",
			"input",
			"input_declaration",
			"input_identifier",
			"input_port_identifier",
			"input_terminal",
			"inside",
			"inside_expression",
			"instance_identifier",
			"int",
			"integer",
			"integer_atom_type",
			"integer_vector_type",
			"integral_number",
			"interconnect",
			"interface",
			"interface_ansi_header",
			"interface_class_declaration",
			"interface_class_item",
			"interface_class_method",
			"interface_class_type",
			"interface_declaration",
			"interface_identifier",
			"interface_instance_identifier",
			"interface_instantiation",
			"interface_item",
			"interface_nonansi_header",
			"interface_or_generate_item",
			"interface_port_declaration",
			"interface_port_header",
			"intersect",
			"join",
			"join_any",
			"join_keyword",
			"join_none",
			"jump_statement",
			"large",
			"let",
			"let_actual_arg",
			"let_declaration",
			"let_expression",
			"let_formal_type1",
			"let_list_of_arguments",
			"let_port_item",
			"let_port_list",
			"level_input_list",
			"level_symbol",
			"lifetime",
			"limit_value",
			"line_compiler_directive",
			"list_of_actual_arguments",
			"list_of_arguments",
			"list_of_arguments_parent",
			"list_of_clocking_decl_assign",
			"list_of_cross_items",
			"list_of_defparam_assignments",
			"list_of_formal_arguments",
			"list_of_genvar_identifiers",
			"list_of_interface_identifiers",
			"list_of_net_assignments",
			"list_of_net_decl_assignments",
			"list_of_param_assignments",
			"list_of_parameter_assignments",
			"list_of_path_delay_expressions",
			"list_of_path_inputs",
			"list_of_path_outputs",
			"list_of_port_connections",
			"list_of_port_declarations",
			"list_of_port_identifiers",
			"list_of_ports",
			"list_of_specparam_assignments",
			"list_of_tf_variable_identifiers",
			"list_of_type_assignments",
			"list_of_udp_port_identifiers",
			"list_of_variable_assignments",
			"list_of_variable_decl_assignments",
			"list_of_variable_identifiers",
			"list_of_variable_port_identifiers",
			"local",
			"local_parameter_declaration",
			"localparam",
			"logic",
			"longint",
			"loop_generate_construct",
			"loop_statement",
			"loop_variables1",
			"macro_text",
			"macromodule",
			"matches",
			"medium",
			"member_identifier",
			"method_call",
			"method_call_body",
			"method_identifier",
			"method_qualifier",
			"mintypmax_expression",
			"modport",
			"modport_clocking_declaration",
			"modport_declaration",
			"modport_identifier",
			"modport_item",
			"modport_ports_declaration",
			"modport_simple_port",
			"modport_simple_ports_declaration",
			"modport_tf_ports_declaration",
			"module",
			"module_ansi_header",
			"module_declaration",
			"module_header",
			"module_instantiation",
			"module_keyword",
			"module_nonansi_header",
			"module_or_generate_item",
			"module_path_concatenation",
			"module_path_expression",
			"module_path_mintypmax_expression",
			"module_path_multiple_concatenation",
			"module_path_primary",
			"mos_switch_instance",
			"mos_switchtype",
			"ms",
			"multiple_concatenation",
			"n_input_gate_instance",
			"n_input_gatetype",
			"n_output_gate_instance",
			"n_output_gatetype",
			"name_of_instance",
			"named_parameter_assignment",
			"named_port_connection",
			"nand",
			"ncontrol_terminal",
			"negedge",
			"net_alias",
			"net_assignment",
			"net_decl_assignment",
			"net_declaration",
			"net_lvalue",
			"net_port_header1",
			"net_port_type1",
			"net_type",
			"net_type_declaration",
			"nettype",
			"new",
			"next_state",
			"nexttime",
			"nmos",
			"non_consecutive_repetition",
			"non_integer_type",
			"non_port_program_item",
			"nonblocking_assignment",
			"none",
			"nonrange_select1",
			"nonrange_variable_lvalue",
			"nor",
			"noshowcancelled",
			"not",
			"notif0",
			"notif1",
			"notifier",
			"ns",
			"null",
			"octal_number",
			"open_range_list",
			"open_value_range",
			"operator_assignment",
			"option",
			"or",
			"ordered_parameter_assignment",
			"ordered_port_connection",
			"output",
			"output_declaration",
			"output_identifier",
			"output_port_identifier",
			"output_symbol",
			"output_terminal",
			"overload_declaration",
			"overload_operator",
			"overload_proto_formals",
			"package",
			"package_declaration",
			"package_export_declaration",
			"package_identifier",
			"package_import_declaration",
			"package_import_item",
			"package_or_generate_item_declaration",
			"package_scope",
			"packed",
			"packed_dimension",
			"par_block",
			"parallel_edge_sensitive_path_description",
			"parallel_path_description",
			"param_assignment",
			"param_expression",
			"parameter",
			"parameter_declaration",
			"parameter_identifier",
			"parameter_override",
			"parameter_port_declaration",
			"parameter_port_list",
			"parameter_value_assignment",
			"pass_en_switchtype",
			"pass_enable_switch_instance",
			"pass_switch_instance",
			"pass_switchtype",
			"path_declaration",
			"path_delay_expression",
			"path_delay_value",
			"pattern",
			"pcontrol_terminal",
			"pmos",
			"polarity_operator",
			"port",
			"port_declaration",
			"port_direction",
			"port_identifier",
			"port_reference",
			"posedge",
			"primary",
			"primary_literal",
			"primitive",
			"priority",
			"procedural_continuous_assignment",
			"procedural_timing_control_statement",
			"program",
			"program_ansi_header",
			"program_declaration",
			"program_identifier",
			"program_instantiation",
			"program_item",
			"program_nonansi_header",
			"property",
			"property_case_item",
			"property_declaration",
			"property_expr",
			"property_formal_type1",
			"property_identifier",
			"property_lvar_port_direction",
			"property_port_item",
			"property_port_list",
			"property_spec",
			"protected",
			"ps",
			"ps_identifier",
			"ps_or_hierarchical_array_identifier",
			"pull0",
			"pull1",
			"pull_gate_instance",
			"pulldown",
			"pulldown_strength",
			"pullup",
			"pullup_strength",
			"pulse_control_specparam",
			"pulsestyle_declaration",
			"pulsestyle_ondetect",
			"pulsestyle_onevent",
			"pure",
			"queue_dimension",
			"rand",
			"randc",
			"randcase",
			"randcase_item",
			"randcase_statement",
			"random_qualifier",
			"randomize",
			"randomize_call",
			"range_expression",
			"rcmos",
			"real",
			"real_number",
			"realtime",
			"ref",
			"ref_declaration",
			"reference_event",
			"reg",
			"reject_limit_value",
			"reject_on",
			"release",
			"remain_active_flag",
			"repeat",
			"repeat_range",
			"restrict",
			"restrict_property_statement",
			"return",
			"rnmos",
			"rpmos",
			"rtran",
			"rtranif0",
			"rtranif1",
			"s",
			"s_always",
			"s_eventually",
			"s_nexttime",
			"s_until",
			"s_until_with",
			"sample",
			"scalar_constant",
			"scalar_timing_check_condition",
			"scalared",
			"select1",
			"select_condition",
			"select_expression",
			"seq_block",
			"sequence",
			"sequence_abbrev",
			"sequence_declaration",
			"sequence_expr",
			"sequence_formal_type1",
			"sequence_instance",
			"sequence_list_of_arguments",
			"sequence_lvar_port_direction",
			"sequence_method_call",
			"sequence_port_item",
			"sequence_port_list",
			"sequential_body",
			"sequential_entry",
			"shortint",
			"shortreal",
			"showcancelled",
			"showcancelled_declaration",
			"signed",
			"simple_identifier",
			"simple_immediate_assert_statement",
			"simple_immediate_assume_statement",
			"simple_immediate_cover_statement",
			"simple_path_declaration",
			"simple_text_macro_usage",
			"slice_size",
			"small",
			"soft",
			"solve",
			"solve_before_list",
			"source_file",
			"specify",
			"specify_block",
			"specify_input_terminal_descriptor",
			"specify_output_terminal_descriptor",
			"specparam",
			"specparam_assignment",
			"specparam_declaration",
			"specparam_identifier",
			"start_edge_offset",
			"state_dependent_path_declaration",
			"statement",
			"statement_item",
			"statement_or_null",
			"static",
			"std",
			"stream_concatenation",
			"stream_expression",
			"stream_operator",
			"streaming_concatenation",
			"strength0",
			"strength1",
			"string",
			"string_literal",
			"strong",
			"strong0",
			"strong1",
			"struct",
			"struct_union",
			"struct_union_member",
			"subroutine_call",
			"super",
			"supply0",
			"supply1",
			"sync_accept_on",
			"sync_reject_on",
			"system_tf_call",
			"system_tf_identifier",
			"table",
			"tagged",
			"tagged_union_expression",
			"task",
			"task_body_declaration",
			"task_declaration",
			"task_identifier",
			"task_prototype",
			"terminal_identifier",
			"text_macro_definition",
			"text_macro_identifier",
			"text_macro_name",
			"text_macro_usage",
			"tf_call",
			"tf_identifier",
			"tf_item_declaration",
			"tf_port_declaration",
			"tf_port_direction",
			"tf_port_item1",
			"tf_port_list",
			"this",
			"threshold",
			"throughout",
			"time",
			"time_literal",
			"time_unit",
			"timecheck_condition",
			"timeprecision",
			"timescale_compiler_directive",
			"timestamp_condition",
			"timeunit",
			"timeunits_declaration",
			"timing_check_condition",
			"timing_check_event",
			"timing_check_event_control",
			"timing_check_limit",
			"tran",
			"tranif0",
			"tranif1",
			"trans_item",
			"trans_list",
			"trans_range_list",
			"trans_set",
			"tri",
			"tri0",
			"tri1",
			"triand",
			"trior",
			"trireg",
			"type",
			"type_assignment",
			"type_declaration",
			"type_option",
			"type_reference",
			"typedef",
			"udp_ansi_declaration",
			"udp_declaration",
			"udp_declaration_port_list",
			"udp_initial_statement",
			"udp_input_declaration",
			"udp_instance",
			"udp_instantiation",
			"udp_nonansi_declaration",
			"udp_output_declaration",
			"udp_port_declaration",
			"udp_port_list",
			"udp_reg_declaration",
			"unary_operator",
			"unbased_unsized_literal",
			"unconnected_drive",
			"union",
			"unique",
			"unique0",
			"unique_priority",
			"uniqueness_constraint",
			"unpacked_dimension",
			"unsigned",
			"unsigned_number",
			"unsized_dimension",
			"until",
			"until_with",
			"untyped",
			"us",
			"uwire",
			"value_range",
			"var",
			"variable_assignment",
			"variable_decl_assignment",
			"variable_identifier_list",
			"variable_lvalue",
			"variable_port_header",
			"vectored",
			"virtual",
			"void",
			"wait",
			"wait_order",
			"wait_statement",
			"wand",
			"weak",
			"weak0",
			"weak1",
			"while",
			"wildcard",
			"wire",
			"with",
			"within",
			"wor",
			"xnor",
			"xor",
			"zero_directive",
			"{",
			"|",
			"|->",
			"|=",
			"|=>",
			"||",
			"}",
			"~",
			"~&",
			"~^",
			"~|",
			"–",
			"–>",
			"––",
		],
	},
	{
		"name": "c",
		"extensions": ["c", "cats", "h", "idc", "w"],
		"nodes": [
			"\\n",
			"!",
			"!=",
			'"',
			"#define",
			"#elif",
			"#elifdef",
			"#elifndef",
			"#else",
			"#endif",
			"#if",
			"#ifdef",
			"#ifndef",
			"#include",
			"%",
			"%=",
			"&",
			"&&",
			"&=",
			"'",
			"(",
			")",
			"*",
			"*=",
			"+",
			"++",
			"+=",
			",",
			"-",
			"--",
			"-=",
			"->",
			".",
			"...",
			"/",
			"/=",
			":",
			"::",
			";",
			"<",
			"<<",
			"<<=",
			"<=",
			"=",
			"==",
			">",
			">=",
			">>",
			">>=",
			"?",
			'L"',
			"L'",
			"NULL",
			'U"',
			"U'",
			"[",
			"[[",
			"]",
			"]]",
			"^",
			"^=",
			"_Alignas",
			"_Alignof",
			"_Atomic",
			"_Generic",
			"_Nonnull",
			"_Noreturn",
			"__alignof",
			"__alignof__",
			"__asm",
			"__asm__",
			"__attribute",
			"__attribute__",
			"__based",
			"__cdecl",
			"__clrcall",
			"__declspec",
			"__except",
			"__extension__",
			"__fastcall",
			"__finally",
			"__forceinline",
			"__inline",
			"__inline__",
			"__leave",
			"__restrict__",
			"__stdcall",
			"__thiscall",
			"__thread",
			"__try",
			"__unaligned",
			"__vectorcall",
			"__volatile__",
			"_abstract_declarator",
			"_alignof",
			"_declarator",
			"_field_declarator",
			"_type_declarator",
			"_unaligned",
			"abstract_array_declarator",
			"abstract_function_declarator",
			"abstract_parenthesized_declarator",
			"abstract_pointer_declarator",
			"alignas",
			"alignas_qualifier",
			"alignof",
			"alignof_expression",
			"argument_list",
			"array_declarator",
			"asm",
			"assignment_expression",
			"attribute",
			"attribute_declaration",
			"attribute_specifier",
			"attributed_declarator",
			"attributed_statement",
			"auto",
			"binary_expression",
			"bitfield_clause",
			"break",
			"break_statement",
			"call_expression",
			"case",
			"case_statement",
			"cast_expression",
			"char_literal",
			"character",
			"comma_expression",
			"comment",
			"compound_literal_expression",
			"compound_statement",
			"concatenated_string",
			"conditional_expression",
			"const",
			"constexpr",
			"continue",
			"continue_statement",
			"declaration",
			"declaration_list",
			"default",
			"defined",
			"do",
			"do_statement",
			"else",
			"else_clause",
			"enum",
			"enum_specifier",
			"enumerator",
			"enumerator_list",
			"escape_sequence",
			"expression",
			"expression_statement",
			"extension_expression",
			"extern",
			"false",
			"field_declaration",
			"field_declaration_list",
			"field_designator",
			"field_expression",
			"field_identifier",
			"for",
			"for_statement",
			"function_declarator",
			"function_definition",
			"generic_expression",
			"gnu_asm_clobber_list",
			"gnu_asm_expression",
			"gnu_asm_goto_list",
			"gnu_asm_input_operand",
			"gnu_asm_input_operand_list",
			"gnu_asm_output_operand",
			"gnu_asm_output_operand_list",
			"gnu_asm_qualifier",
			"goto",
			"goto_statement",
			"identifier",
			"if",
			"if_statement",
			"init_declarator",
			"initializer_list",
			"initializer_pair",
			"inline",
			"labeled_statement",
			"linkage_specification",
			"long",
			"macro_type_specifier",
			"ms_based_modifier",
			"ms_call_modifier",
			"ms_declspec_modifier",
			"ms_pointer_modifier",
			"ms_restrict_modifier",
			"ms_signed_ptr_modifier",
			"ms_unaligned_ptr_modifier",
			"ms_unsigned_ptr_modifier",
			"noreturn",
			"null",
			"nullptr",
			"number_literal",
			"offsetof",
			"offsetof_expression",
			"parameter_declaration",
			"parameter_list",
			"parenthesized_declarator",
			"parenthesized_expression",
			"pointer_declarator",
			"pointer_expression",
			"preproc_arg",
			"preproc_call",
			"preproc_def",
			"preproc_defined",
			"preproc_directive",
			"preproc_elif",
			"preproc_elifdef",
			"preproc_else",
			"preproc_function_def",
			"preproc_if",
			"preproc_ifdef",
			"preproc_include",
			"preproc_params",
			"primitive_type",
			"register",
			"restrict",
			"return",
			"return_statement",
			"seh_except_clause",
			"seh_finally_clause",
			"seh_leave_statement",
			"seh_try_statement",
			"short",
			"signed",
			"sized_type_specifier",
			"sizeof",
			"sizeof_expression",
			"statement",
			"statement_identifier",
			"static",
			"storage_class_specifier",
			"string_content",
			"string_literal",
			"struct",
			"struct_specifier",
			"subscript_designator",
			"subscript_expression",
			"subscript_range_designator",
			"switch",
			"switch_statement",
			"system_lib_string",
			"thread_local",
			"translation_unit",
			"true",
			"type_definition",
			"type_descriptor",
			"type_identifier",
			"type_qualifier",
			"type_specifier",
			"typedef",
			'u"',
			"u'",
			'u8"',
			"u8'",
			"unary_expression",
			"union",
			"union_specifier",
			"unsigned",
			"update_expression",
			"variadic_parameter",
			"volatile",
			"while",
			"while_statement",
			"{",
			"|",
			"|=",
			"||",
			"}",
			"~",
		],
	},
	{
		"name": "python",
		"extensions": [
			"py",
			"bzl",
			"cgi",
			"fcgi",
			"gyp",
			"lmi",
			"pyde",
			"pyp",
			"pyt",
			"pyw",
			"rpy",
			"tac",
			"wsgi",
			"xpy",
		],
		"nodes": [
			"!=",
			"%",
			"%=",
			"&",
			"&=",
			"(",
			")",
			"*",
			"**",
			"**=",
			"*=",
			"+",
			"+=",
			",",
			"-",
			"-=",
			"->",
			".",
			"/",
			"//",
			"//=",
			"/=",
			":",
			":=",
			";",
			"<",
			"<<",
			"<<=",
			"<=",
			"<>",
			"=",
			"==",
			">",
			">=",
			">>",
			">>=",
			"@",
			"@=",
			"[",
			"\\",
			"]",
			"^",
			"^=",
			"_",
			"__future__",
			"_compound_statement",
			"_simple_statement",
			"aliased_import",
			"and",
			"argument_list",
			"as",
			"as_pattern",
			"as_pattern_target",
			"assert",
			"assert_statement",
			"assignment",
			"async",
			"attribute",
			"augmented_assignment",
			"await",
			"binary_operator",
			"block",
			"boolean_operator",
			"break",
			"break_statement",
			"call",
			"case",
			"case_clause",
			"case_pattern",
			"chevron",
			"class",
			"class_definition",
			"class_pattern",
			"comment",
			"comparison_operator",
			"complex_pattern",
			"concatenated_string",
			"conditional_expression",
			"constrained_type",
			"continue",
			"continue_statement",
			"decorated_definition",
			"decorator",
			"def",
			"default_parameter",
			"del",
			"delete_statement",
			"dict_pattern",
			"dictionary",
			"dictionary_comprehension",
			"dictionary_splat",
			"dictionary_splat_pattern",
			"dotted_name",
			"elif",
			"elif_clause",
			"ellipsis",
			"else",
			"else_clause",
			"escape_interpolation",
			"escape_sequence",
			"except",
			"except*",
			"except_clause",
			"except_group_clause",
			"exec",
			"exec_statement",
			"expression",
			"expression_list",
			"expression_statement",
			"false",
			"finally",
			"finally_clause",
			"float",
			"for",
			"for_in_clause",
			"for_statement",
			"format_expression",
			"format_specifier",
			"from",
			"function_definition",
			"future_import_statement",
			"generator_expression",
			"generic_type",
			"global",
			"global_statement",
			"identifier",
			"if",
			"if_clause",
			"if_statement",
			"import",
			"import_from_statement",
			"import_prefix",
			"import_statement",
			"in",
			"integer",
			"interpolation",
			"is",
			"is not",
			"keyword_argument",
			"keyword_pattern",
			"keyword_separator",
			"lambda",
			"lambda_parameters",
			"line_continuation",
			"list",
			"list_comprehension",
			"list_pattern",
			"list_splat",
			"list_splat_pattern",
			"match",
			"match_statement",
			"member_type",
			"module",
			"named_expression",
			"none",
			"nonlocal",
			"nonlocal_statement",
			"not",
			"not in",
			"not_operator",
			"or",
			"pair",
			"parameter",
			"parameters",
			"parenthesized_expression",
			"parenthesized_list_splat",
			"pass",
			"pass_statement",
			"pattern",
			"pattern_list",
			"positional_separator",
			"primary_expression",
			"print",
			"print_statement",
			"raise",
			"raise_statement",
			"relative_import",
			"return",
			"return_statement",
			"set",
			"set_comprehension",
			"slice",
			"splat_pattern",
			"splat_type",
			"string",
			"string_content",
			"string_end",
			"string_start",
			"subscript",
			"true",
			"try",
			"try_statement",
			"tuple",
			"tuple_pattern",
			"type",
			"type_alias_statement",
			"type_conversion",
			"type_parameter",
			"typed_default_parameter",
			"typed_parameter",
			"unary_operator",
			"union_pattern",
			"union_type",
			"while",
			"while_statement",
			"wildcard_import",
			"with",
			"with_clause",
			"with_item",
			"with_statement",
			"yield",
			"{",
			"|",
			"|=",
			"}",
			"~",
		],
	},
	{
		"name": "php",
		"extensions": ["php", "aw", "ctp", "fcgi", "inc", "php3", "php4", "php5", "phps", "phpt"],
		"nodes": [
			"!",
			"!=",
			"!==",
			'"',
			"#[",
			"$",
			"%",
			"%=",
			"&",
			"&&",
			"&=",
			"'",
			"(",
			")",
			"*",
			"**",
			"**=",
			"*=",
			"+",
			"++",
			"+=",
			",",
			"-",
			"--",
			"-=",
			"->",
			".",
			"...",
			".=",
			"/",
			"/=",
			":",
			"::",
			";",
			"<",
			"<<",
			"<<<",
			"<<=",
			"<=",
			"<=>",
			"<>",
			"=",
			"==",
			"===",
			"=>",
			">",
			">=",
			">>",
			">>=",
			"?",
			"?->",
			"?>",
			"??",
			"??=",
			"@",
			"[",
			"\\",
			"]",
			"^",
			"^=",
			"`",
			"abstract",
			"abstract_modifier",
			"and",
			"anonymous_class",
			"anonymous_function",
			"anonymous_function_use_clause",
			"argument",
			"arguments",
			"array",
			"array_creation_expression",
			"array_element_initializer",
			"arrow_function",
			"as",
			"assignment_expression",
			"attribute",
			"attribute_group",
			"attribute_list",
			"augmented_assignment_expression",
			"base_clause",
			"binary_expression",
			"bool",
			"boolean",
			"bottom_type",
			"break",
			"break_statement",
			"by_ref",
			"callable",
			"case",
			"case_statement",
			"cast_expression",
			"cast_type",
			"catch",
			"catch_clause",
			"class",
			"class_constant_access_expression",
			"class_declaration",
			"class_interface_clause",
			"clone",
			"clone_expression",
			"colon_block",
			"comment",
			"compound_statement",
			"conditional_expression",
			"const",
			"const_declaration",
			"const_element",
			"continue",
			"continue_statement",
			"declaration_list",
			"declare",
			"declare_directive",
			"declare_statement",
			"default",
			"default_statement",
			"disjunctive_normal_form_type",
			"do",
			"do_statement",
			"dynamic_variable_name",
			"echo",
			"echo_statement",
			"else",
			"else_clause",
			"else_if_clause",
			"elseif",
			"empty_statement",
			"encapsed_string",
			"encoding",
			"enddeclare",
			"endfor",
			"endforeach",
			"endif",
			"endswitch",
			"endwhile",
			"enum",
			"enum_case",
			"enum_declaration",
			"enum_declaration_list",
			"error_suppression_expression",
			"escape_sequence",
			"exit",
			"exit_statement",
			"expression",
			"expression_statement",
			"extends",
			"false",
			"final",
			"final_modifier",
			"finally",
			"finally_clause",
			"float",
			"fn",
			"for",
			"for_statement",
			"foreach",
			"foreach_statement",
			"formal_parameters",
			"from",
			"function",
			"function_call_expression",
			"function_definition",
			"function_static_declaration",
			"global",
			"global_declaration",
			"goto",
			"goto_statement",
			"heredoc",
			"heredoc_body",
			"heredoc_end",
			"heredoc_start",
			"if",
			"if_statement",
			"implements",
			"include",
			"include_expression",
			"include_once",
			"include_once_expression",
			"instanceof",
			"insteadof",
			"int",
			"integer",
			"interface",
			"interface_declaration",
			"intersection_type",
			"iterable",
			"list",
			"list_literal",
			"literal",
			"match",
			"match_block",
			"match_condition_list",
			"match_conditional_expression",
			"match_default_expression",
			"match_expression",
			"member_access_expression",
			"member_call_expression",
			"method_declaration",
			"mixed",
			"name",
			"named_label_statement",
			"named_type",
			"namespace",
			"namespace_definition",
			"namespace_name",
			"namespace_use_clause",
			"namespace_use_declaration",
			"namespace_use_group",
			"new",
			"nowdoc",
			"nowdoc_body",
			"nowdoc_string",
			"null",
			"nullsafe_member_access_expression",
			"nullsafe_member_call_expression",
			"object_creation_expression",
			"operation",
			"optional_type",
			"or",
			"pair",
			"parent",
			"parenthesized_expression",
			"php_tag",
			"primary_expression",
			"primitive_type",
			"print",
			"print_intrinsic",
			"private",
			"program",
			"property_declaration",
			"property_element",
			"property_hook",
			"property_hook_list",
			"property_promotion_parameter",
			"protected",
			"public",
			"qualified_name",
			"readonly",
			"readonly_modifier",
			"reference_assignment_expression",
			"reference_modifier",
			"relative_name",
			"relative_scope",
			"require",
			"require_expression",
			"require_once",
			"require_once_expression",
			"return",
			"return_statement",
			"scoped_call_expression",
			"scoped_property_access_expression",
			"self",
			"sequence_expression",
			"shell_command_expression",
			"simple_parameter",
			"statement",
			"static",
			"static_modifier",
			"static_variable_declaration",
			"strict_types",
			"string",
			"string_content",
			"subscript_expression",
			"switch",
			"switch_block",
			"switch_statement",
			"text",
			"text_interpolation",
			"throw",
			"throw_expression",
			"ticks",
			"trait",
			"trait_declaration",
			"true",
			"try",
			"try_statement",
			"type",
			"type_list",
			"unary_op_expression",
			"union_type",
			"unset",
			"unset_statement",
			"update_expression",
			"use",
			"use_as_clause",
			"use_declaration",
			"use_instead_of_clause",
			"use_list",
			"var_modifier",
			"variable_name",
			"variadic_parameter",
			"variadic_placeholder",
			"variadic_unpacking",
			"visibility_modifier",
			"void",
			"while",
			"while_statement",
			"xor",
			"yield",
			"yield_expression",
			"{",
			"|",
			"|=",
			"||",
			"}",
			"~",
		],
	},
	{
		"name": "cpp",
		"extensions": [],
		"nodes": [
			"\\n",
			"!",
			"!=",
			'"',
			'""',
			"#define",
			"#elif",
			"#elifdef",
			"#elifndef",
			"#else",
			"#endif",
			"#if",
			"#ifdef",
			"#ifndef",
			"#include",
			"%",
			"%=",
			"&",
			"&&",
			"&=",
			"'",
			"(",
			"()",
			")",
			"*",
			"*=",
			"+",
			"++",
			"+=",
			",",
			"-",
			"--",
			"-=",
			"->",
			"->*",
			".",
			".*",
			"...",
			"/",
			"/=",
			":",
			"::",
			";",
			"<",
			"<<",
			"<<=",
			"<=",
			"<=>",
			"=",
			"==",
			">",
			">=",
			">>",
			">>=",
			"?",
			'L"',
			"L'",
			'LR"',
			"NULL",
			'R"',
			'U"',
			"U'",
			'UR"',
			"[",
			"[[",
			"[]",
			"]",
			"]]",
			"^",
			"^=",
			"_Alignas",
			"_Alignof",
			"_Atomic",
			"_Generic",
			"_Nonnull",
			"_Noreturn",
			"__alignof",
			"__alignof__",
			"__asm",
			"__asm__",
			"__attribute",
			"__attribute__",
			"__based",
			"__cdecl",
			"__clrcall",
			"__declspec",
			"__except",
			"__extension__",
			"__fastcall",
			"__finally",
			"__forceinline",
			"__inline",
			"__inline__",
			"__leave",
			"__restrict__",
			"__stdcall",
			"__thiscall",
			"__thread",
			"__try",
			"__unaligned",
			"__vectorcall",
			"__volatile__",
			"_abstract_declarator",
			"_alignof",
			"_declarator",
			"_field_declarator",
			"_type_declarator",
			"_unaligned",
			"abstract_array_declarator",
			"abstract_function_declarator",
			"abstract_parenthesized_declarator",
			"abstract_pointer_declarator",
			"abstract_reference_declarator",
			"access_specifier",
			"alias_declaration",
			"alignas",
			"alignas_qualifier",
			"alignof",
			"alignof_expression",
			"and",
			"and_eq",
			"argument_list",
			"array_declarator",
			"asm",
			"assignment_expression",
			"attribute",
			"attribute_declaration",
			"attribute_specifier",
			"attributed_declarator",
			"attributed_statement",
			"auto",
			"base_class_clause",
			"binary_expression",
			"bitand",
			"bitfield_clause",
			"bitor",
			"break",
			"break_statement",
			"call_expression",
			"case",
			"case_statement",
			"cast_expression",
			"catch",
			"catch_clause",
			"char_literal",
			"character",
			"class",
			"class_specifier",
			"co_await",
			"co_await_expression",
			"co_return",
			"co_return_statement",
			"co_yield",
			"co_yield_statement",
			"comma_expression",
			"comment",
			"compl",
			"compound_literal_expression",
			"compound_requirement",
			"compound_statement",
			"concatenated_string",
			"concept",
			"concept_definition",
			"condition_clause",
			"conditional_expression",
			"const",
			"consteval",
			"constexpr",
			"constinit",
			"constraint_conjunction",
			"constraint_disjunction",
			"continue",
			"continue_statement",
			"declaration",
			"declaration_list",
			"decltype",
			"default",
			"default_method_clause",
			"defined",
			"delete",
			"delete_expression",
			"delete_method_clause",
			"dependent_name",
			"dependent_type",
			"destructor_name",
			"do",
			"do_statement",
			"else",
			"else_clause",
			"enum",
			"enum_specifier",
			"enumerator",
			"enumerator_list",
			"escape_sequence",
			"explicit",
			"explicit_function_specifier",
			"export",
			"export_declaration",
			"expression",
			"expression_statement",
			"extension_expression",
			"extern",
			"false",
			"field_declaration",
			"field_declaration_list",
			"field_designator",
			"field_expression",
			"field_identifier",
			"field_initializer",
			"field_initializer_list",
			"final",
			"fold_expression",
			"for",
			"for_range_loop",
			"for_statement",
			"friend",
			"friend_declaration",
			"function_declarator",
			"function_definition",
			"generic_expression",
			"global_module_fragment_declaration",
			"gnu_asm_clobber_list",
			"gnu_asm_expression",
			"gnu_asm_goto_list",
			"gnu_asm_input_operand",
			"gnu_asm_input_operand_list",
			"gnu_asm_output_operand",
			"gnu_asm_output_operand_list",
			"gnu_asm_qualifier",
			"goto",
			"goto_statement",
			"identifier",
			"if",
			"if_statement",
			"import",
			"import_declaration",
			"init_declarator",
			"init_statement",
			"initializer_list",
			"initializer_pair",
			"inline",
			"labeled_statement",
			"lambda_capture_initializer",
			"lambda_capture_specifier",
			"lambda_declarator",
			"lambda_default_capture",
			"lambda_expression",
			"lambda_specifier",
			"linkage_specification",
			"literal_suffix",
			"long",
			"module",
			"module_declaration",
			"module_name",
			"module_partition",
			"ms_based_modifier",
			"ms_call_modifier",
			"ms_declspec_modifier",
			"ms_pointer_modifier",
			"ms_restrict_modifier",
			"ms_signed_ptr_modifier",
			"ms_unaligned_ptr_modifier",
			"ms_unsigned_ptr_modifier",
			"mutable",
			"namespace",
			"namespace_alias_definition",
			"namespace_definition",
			"namespace_identifier",
			"nested_namespace_specifier",
			"new",
			"new_declarator",
			"new_expression",
			"noexcept",
			"noreturn",
			"not",
			"not_eq",
			"null",
			"nullptr",
			"number_literal",
			"offsetof",
			"offsetof_expression",
			"operator",
			"operator_cast",
			"operator_name",
			"optional_parameter_declaration",
			"optional_type_parameter_declaration",
			"or",
			"or_eq",
			"override",
			"parameter_declaration",
			"parameter_list",
			"parameter_pack_expansion",
			"parenthesized_declarator",
			"parenthesized_expression",
			"placeholder_type_specifier",
			"pointer_declarator",
			"pointer_expression",
			"pointer_type_declarator",
			"preproc_arg",
			"preproc_call",
			"preproc_def",
			"preproc_defined",
			"preproc_directive",
			"preproc_elif",
			"preproc_elifdef",
			"preproc_else",
			"preproc_function_def",
			"preproc_if",
			"preproc_ifdef",
			"preproc_include",
			"preproc_params",
			"primitive_type",
			"private",
			"private_module_fragment_declaration",
			"protected",
			"public",
			"pure_virtual_clause",
			"qualified_identifier",
			"raw_string_content",
			"raw_string_delimiter",
			"raw_string_literal",
			"ref_qualifier",
			"reference_declarator",
			"register",
			"requirement_seq",
			"requires",
			"requires_clause",
			"requires_expression",
			"restrict",
			"return",
			"return_statement",
			"seh_except_clause",
			"seh_finally_clause",
			"seh_leave_statement",
			"seh_try_statement",
			"short",
			"signed",
			"simple_requirement",
			"sized_type_specifier",
			"sizeof",
			"sizeof_expression",
			"statement",
			"statement_identifier",
			"static",
			"static_assert",
			"static_assert_declaration",
			"storage_class_specifier",
			"string_content",
			"string_literal",
			"struct",
			"struct_specifier",
			"structured_binding_declarator",
			"subscript_argument_list",
			"subscript_designator",
			"subscript_expression",
			"subscript_range_designator",
			"switch",
			"switch_statement",
			"system_lib_string",
			"template",
			"template_argument_list",
			"template_declaration",
			"template_function",
			"template_instantiation",
			"template_method",
			"template_parameter_list",
			"template_template_parameter_declaration",
			"template_type",
			"this",
			"thread_local",
			"throw",
			"throw_specifier",
			"throw_statement",
			"trailing_return_type",
			"translation_unit",
			"true",
			"try",
			"try_statement",
			"type_definition",
			"type_descriptor",
			"type_identifier",
			"type_parameter_declaration",
			"type_qualifier",
			"type_requirement",
			"type_specifier",
			"typedef",
			"typename",
			'u"',
			"u'",
			'u8"',
			"u8'",
			'u8R"',
			'uR"',
			"unary_expression",
			"union",
			"union_specifier",
			"unsigned",
			"update_expression",
			"user_defined_literal",
			"using",
			"using_declaration",
			"variadic_declarator",
			"variadic_parameter_declaration",
			"variadic_type_parameter_declaration",
			"virtual",
			"virtual_specifier",
			"volatile",
			"while",
			"while_statement",
			"xor",
			"xor_eq",
			"{",
			"|",
			"|=",
			"||",
			"}",
			"~",
		],
	},
	{
		"name": "toml",
		"extensions": [],
		"nodes": [
			'"',
			'"""',
			"'",
			"'''",
			",",
			".",
			"=",
			"[",
			"[[",
			"]",
			"]]",
			"array",
			"bare_key",
			"boolean",
			"comment",
			"document",
			"dotted_key",
			"escape_sequence",
			"float",
			"inline_table",
			"integer",
			"local_date",
			"local_date_time",
			"local_time",
			"offset_date_time",
			"pair",
			"quoted_key",
			"string",
			"table",
			"table_array_element",
			"{",
			"}",
		],
	},
	{
		"name": "ruby",
		"extensions": [
			"rb",
			"builder",
			"fcgi",
			"gemspec",
			"god",
			"irbrc",
			"jbuilder",
			"mspec",
			"pluginspec",
			"podspec",
			"rabl",
			"rake",
			"rbuild",
			"rbw",
			"rbx",
			"ru",
			"ruby",
			"thor",
			"watchr",
		],
		"nodes": [
			"!",
			"!=",
			"!~",
			'"',
			"#{",
			"%",
			"%=",
			"%i(",
			"%w(",
			"&",
			"&&",
			"&&=",
			"&.",
			"&=",
			"(",
			")",
			"*",
			"**",
			"**=",
			"*=",
			"+",
			"+=",
			"+@",
			",",
			"-",
			"-=",
			"->",
			"-@",
			".",
			"..",
			"...",
			"/",
			"/=",
			":",
			':"',
			"::",
			";",
			"<",
			"<<",
			"<<=",
			"<=",
			"<=>",
			"=",
			"==",
			"===",
			"=>",
			"=~",
			">",
			">=",
			">>",
			">>=",
			"?",
			"BEGIN",
			"END",
			"[",
			"[]",
			"[]=",
			"]",
			"^",
			"^=",
			"_arg",
			"_call_operator",
			"_expression",
			"_lhs",
			"_method_name",
			"_nonlocal_variable",
			"_pattern_constant",
			"_pattern_expr",
			"_pattern_expr_basic",
			"_pattern_primitive",
			"_pattern_top_expr_body",
			"_primary",
			"_simple_numeric",
			"_statement",
			"_variable",
			"`",
			"alias",
			"alternative_pattern",
			"and",
			"argument_list",
			"array",
			"array_pattern",
			"as_pattern",
			"assignment",
			"bare_string",
			"bare_symbol",
			"begin",
			"begin_block",
			"binary",
			"block",
			"block_argument",
			"block_body",
			"block_parameter",
			"block_parameters",
			"body_statement",
			"break",
			"call",
			"case",
			"case_match",
			"chained_string",
			"character",
			"class",
			"class_variable",
			"comment",
			"complex",
			"conditional",
			"constant",
			"def",
			"defined?",
			"delimited_symbol",
			"destructured_left_assignment",
			"destructured_parameter",
			"do",
			"do_block",
			"element_reference",
			"else",
			"elsif",
			"empty_statement",
			"encoding",
			"end",
			"end_block",
			"ensure",
			"escape_sequence",
			"exception_variable",
			"exceptions",
			"expression_reference_pattern",
			"false",
			"file",
			"find_pattern",
			"float",
			"for",
			"forward_argument",
			"forward_parameter",
			"global_variable",
			"hash",
			"hash_key_symbol",
			"hash_pattern",
			"hash_splat_argument",
			"hash_splat_nil",
			"hash_splat_parameter",
			"heredoc_beginning",
			"heredoc_body",
			"heredoc_content",
			"heredoc_end",
			"i",
			"identifier",
			"if",
			"if_guard",
			"if_modifier",
			"in",
			"in_clause",
			"instance_variable",
			"integer",
			"interpolation",
			"keyword_parameter",
			"keyword_pattern",
			"lambda",
			"lambda_parameters",
			"left_assignment_list",
			"line",
			"match_pattern",
			"method",
			"method_parameters",
			"module",
			"next",
			"nil",
			"not",
			"operator",
			"operator_assignment",
			"optional_parameter",
			"or",
			"pair",
			"parenthesized_pattern",
			"parenthesized_statements",
			"pattern",
			"program",
			"r",
			"range",
			"rational",
			"redo",
			"regex",
			"rescue",
			"rescue_modifier",
			"rest_assignment",
			"retry",
			"return",
			"ri",
			"right_assignment_list",
			"scope_resolution",
			"self",
			"setter",
			"simple_symbol",
			"singleton_class",
			"singleton_method",
			"splat_argument",
			"splat_parameter",
			"string",
			"string_array",
			"string_content",
			"subshell",
			"super",
			"superclass",
			"symbol_array",
			"test_pattern",
			"then",
			"true",
			"unary",
			"undef",
			"uninterpreted",
			"unless",
			"unless_guard",
			"unless_modifier",
			"until",
			"until_modifier",
			"variable_reference_pattern",
			"when",
			"while",
			"while_modifier",
			"yield",
			"{",
			"|",
			"|=",
			"||",
			"||=",
			"}",
			"~",
			"~@",
		],
	},
	{
		"name": "typescript",
		"extensions": ["ts", "tsx"],
		"nodes": [
			"!",
			"!=",
			"!==",
			'"',
			"${",
			"%",
			"%=",
			"&",
			"&&",
			"&&=",
			"&=",
			"'",
			"(",
			")",
			"*",
			"**",
			"**=",
			"*=",
			"+",
			"++",
			"+=",
			"+?:",
			",",
			"-",
			"--",
			"-=",
			"-?:",
			".",
			"...",
			"/",
			"/=",
			":",
			";",
			"<",
			"<<",
			"<<=",
			"<=",
			"=",
			"==",
			"===",
			"=>",
			">",
			">=",
			">>",
			">>=",
			">>>",
			">>>=",
			"?",
			"?.",
			"?:",
			"??",
			"??=",
			"@",
			"[",
			"]",
			"^",
			"^=",
			"`",
			"abstract",
			"abstract_class_declaration",
			"abstract_method_signature",
			"accessibility_modifier",
			"accessor",
			"adding_type_annotation",
			"ambient_declaration",
			"any",
			"arguments",
			"array",
			"array_pattern",
			"array_type",
			"arrow_function",
			"as",
			"as_expression",
			"assert",
			"asserts",
			"asserts_annotation",
			"assignment_expression",
			"assignment_pattern",
			"async",
			"augmented_assignment_expression",
			"await",
			"await_expression",
			"binary_expression",
			"boolean",
			"break",
			"break_statement",
			"call_expression",
			"call_signature",
			"case",
			"catch",
			"catch_clause",
			"class",
			"class_body",
			"class_declaration",
			"class_heritage",
			"class_static_block",
			"comment",
			"computed_property_name",
			"conditional_type",
			"const",
			"constraint",
			"construct_signature",
			"constructor_type",
			"continue",
			"continue_statement",
			"debugger",
			"debugger_statement",
			"declaration",
			"declare",
			"decorator",
			"default",
			"default_type",
			"delete",
			"do",
			"do_statement",
			"else",
			"else_clause",
			"empty_statement",
			"enum",
			"enum_assignment",
			"enum_body",
			"enum_declaration",
			"escape_sequence",
			"existential_type",
			"export",
			"export_clause",
			"export_specifier",
			"export_statement",
			"expression",
			"expression_statement",
			"extends",
			"extends_clause",
			"extends_type_clause",
			"false",
			"finally",
			"finally_clause",
			"flow_maybe_type",
			"for",
			"for_in_statement",
			"for_statement",
			"formal_parameters",
			"from",
			"function",
			"function_declaration",
			"function_expression",
			"function_signature",
			"function_type",
			"generator_function",
			"generator_function_declaration",
			"generic_type",
			"get",
			"global",
			"hash_bang_line",
			"html_comment",
			"identifier",
			"if",
			"if_statement",
			"implements",
			"implements_clause",
			"import",
			"import_alias",
			"import_attribute",
			"import_clause",
			"import_require_clause",
			"import_specifier",
			"import_statement",
			"in",
			"index_signature",
			"index_type_query",
			"infer",
			"infer_type",
			"instanceof",
			"instantiation_expression",
			"interface",
			"interface_body",
			"interface_declaration",
			"internal_module",
			"intersection_type",
			"is",
			"keyof",
			"labeled_statement",
			"let",
			"lexical_declaration",
			"literal_type",
			"lookup_type",
			"mapped_type_clause",
			"member_expression",
			"meta",
			"meta_property",
			"method_definition",
			"method_signature",
			"module",
			"named_imports",
			"namespace",
			"namespace_export",
			"namespace_import",
			"nested_identifier",
			"nested_type_identifier",
			"never",
			"new",
			"new_expression",
			"non_null_expression",
			"null",
			"number",
			"object",
			"object_assignment_pattern",
			"object_pattern",
			"object_type",
			"of",
			"omitting_type_annotation",
			"opting_type_annotation",
			"optional_chain",
			"optional_parameter",
			"optional_type",
			"override",
			"override_modifier",
			"pair",
			"pair_pattern",
			"parenthesized_expression",
			"parenthesized_type",
			"pattern",
			"predefined_type",
			"primary_expression",
			"primary_type",
			"private",
			"private_property_identifier",
			"program",
			"property_identifier",
			"property_signature",
			"protected",
			"public",
			"public_field_definition",
			"readonly",
			"readonly_type",
			"regex",
			"regex_flags",
			"regex_pattern",
			"require",
			"required_parameter",
			"rest_pattern",
			"rest_type",
			"return",
			"return_statement",
			"satisfies",
			"satisfies_expression",
			"sequence_expression",
			"set",
			"shorthand_property_identifier",
			"shorthand_property_identifier_pattern",
			"spread_element",
			"statement",
			"statement_block",
			"statement_identifier",
			"static",
			"string",
			"string_fragment",
			"subscript_expression",
			"super",
			"switch",
			"switch_body",
			"switch_case",
			"switch_default",
			"switch_statement",
			"symbol",
			"target",
			"template_literal_type",
			"template_string",
			"template_substitution",
			"template_type",
			"ternary_expression",
			"this",
			"this_type",
			"throw",
			"throw_statement",
			"true",
			"try",
			"try_statement",
			"tuple_type",
			"type",
			"type_alias_declaration",
			"type_annotation",
			"type_arguments",
			"type_assertion",
			"type_identifier",
			"type_parameter",
			"type_parameters",
			"type_predicate",
			"type_predicate_annotation",
			"type_query",
			"typeof",
			"unary_expression",
			"undefined",
			"union_type",
			"unique symbol",
			"unknown",
			"update_expression",
			"using",
			"var",
			"variable_declaration",
			"variable_declarator",
			"void",
			"while",
			"while_statement",
			"with",
			"with_statement",
			"yield",
			"yield_expression",
			"{",
			"{|",
			"|",
			"|=",
			"||",
			"||=",
			"|}",
			"}",
			"~",
		],
	},
	{
		"name": "go",
		"extensions": ["go"],
		"nodes": [
			"\0",
			"!",
			"!=",
			'"',
			"%",
			"%=",
			"&",
			"&&",
			"&=",
			"&^",
			"&^=",
			"(",
			")",
			"*",
			"*=",
			"+",
			"++",
			"+=",
			",",
			"-",
			"--",
			"-=",
			".",
			"...",
			"/",
			"/=",
			":",
			":=",
			";",
			"<",
			"<-",
			"<<",
			"<<=",
			"<=",
			"=",
			"==",
			">",
			">=",
			">>",
			">>=",
			"[",
			"]",
			"^",
			"^=",
			"_expression",
			"_simple_statement",
			"_simple_type",
			"_statement",
			"_type",
			"`",
			"argument_list",
			"array_type",
			"assignment_statement",
			"binary_expression",
			"blank_identifier",
			"block",
			"break",
			"break_statement",
			"call_expression",
			"case",
			"chan",
			"channel_type",
			"comment",
			"communication_case",
			"composite_literal",
			"const",
			"const_declaration",
			"const_spec",
			"continue",
			"continue_statement",
			"dec_statement",
			"default",
			"default_case",
			"defer",
			"defer_statement",
			"dot",
			"else",
			"empty_statement",
			"escape_sequence",
			"expression_case",
			"expression_list",
			"expression_statement",
			"expression_switch_statement",
			"fallthrough",
			"fallthrough_statement",
			"false",
			"field_declaration",
			"field_declaration_list",
			"field_identifier",
			"float_literal",
			"for",
			"for_clause",
			"for_statement",
			"func",
			"func_literal",
			"function_declaration",
			"function_type",
			"generic_type",
			"go",
			"go_statement",
			"goto",
			"goto_statement",
			"identifier",
			"if",
			"if_statement",
			"imaginary_literal",
			"implicit_length_array_type",
			"import",
			"import_declaration",
			"import_spec",
			"import_spec_list",
			"inc_statement",
			"index_expression",
			"int_literal",
			"interface",
			"interface_type",
			"interpreted_string_literal",
			"interpreted_string_literal_content",
			"iota",
			"keyed_element",
			"label_name",
			"labeled_statement",
			"literal_element",
			"literal_value",
			"map",
			"map_type",
			"method_declaration",
			"method_elem",
			"negated_type",
			"nil",
			"package",
			"package_clause",
			"package_identifier",
			"parameter_declaration",
			"parameter_list",
			"parenthesized_expression",
			"parenthesized_type",
			"pointer_type",
			"qualified_type",
			"range",
			"range_clause",
			"raw_string_literal",
			"raw_string_literal_content",
			"receive_statement",
			"return",
			"return_statement",
			"rune_literal",
			"select",
			"select_statement",
			"selector_expression",
			"send_statement",
			"short_var_declaration",
			"slice_expression",
			"slice_type",
			"source_file",
			"struct",
			"struct_type",
			"switch",
			"true",
			"type",
			"type_alias",
			"type_arguments",
			"type_assertion_expression",
			"type_case",
			"type_constraint",
			"type_conversion_expression",
			"type_declaration",
			"type_elem",
			"type_identifier",
			"type_instantiation_expression",
			"type_parameter_declaration",
			"type_parameter_list",
			"type_spec",
			"type_switch_statement",
			"unary_expression",
			"var",
			"var_declaration",
			"var_spec",
			"var_spec_list",
			"variadic_argument",
			"variadic_parameter_declaration",
			"{",
			"|",
			"|=",
			"||",
			"}",
			"~",
		],
	},
]
