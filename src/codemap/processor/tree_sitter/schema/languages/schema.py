"""Auto-generated language schema. DO NOT EDIT MANUALLY."""

# ruff: noqa: E501, RUF001
from typing import TypedDict

from .literals import NodeTypes, SupportedExtensions, SupportedLanguages


class LanguageSchema(TypedDict):
	"""Schema for a language."""

	name: SupportedLanguages
	extensions: list[SupportedExtensions]
	nodes: list[NodeTypes]


LANGUAGES: list[LanguageSchema] = [
	{
		"name": "rust",
		"extensions": ["rs", "rs.in"],
		"nodes": [
			"!",
			"!=",
			'"',
			"#",
			"$",
			"%",
			"%=",
			"&",
			"&&",
			"&=",
			"'",
			"(",
			")",
			"*",
			"*/",
			"*=",
			"+",
			"+=",
			",",
			"-",
			"-=",
			"->",
			".",
			"..",
			"...",
			"..=",
			"/",
			"/*",
			"//",
			"/=",
			":",
			"::",
			";",
			"<",
			"<<",
			"<<=",
			"<=",
			"=",
			"==",
			"=>",
			">",
			">=",
			">>",
			">>=",
			"?",
			"@",
			"[",
			"]",
			"^",
			"^=",
			"_",
			"_declaration_statement",
			"_expression",
			"_literal",
			"_literal_pattern",
			"_pattern",
			"_type",
			"abstract_type",
			"arguments",
			"array_expression",
			"array_type",
			"as",
			"assignment_expression",
			"associated_type",
			"async",
			"async_block",
			"attribute",
			"attribute_item",
			"await",
			"await_expression",
			"base_field_initializer",
			"binary_expression",
			"block",
			"block_comment",
			"boolean_literal",
			"bounded_type",
			"bracketed_type",
			"break",
			"break_expression",
			"call_expression",
			"captured_pattern",
			"char_literal",
			"closure_expression",
			"closure_parameters",
			"compound_assignment_expr",
			"const",
			"const_block",
			"const_item",
			"const_parameter",
			"continue",
			"continue_expression",
			"crate",
			"declaration_list",
			"default",
			"doc_comment",
			"dyn",
			"dynamic_type",
			"else",
			"else_clause",
			"empty_statement",
			"enum",
			"enum_item",
			"enum_variant",
			"enum_variant_list",
			"escape_sequence",
			"expr",
			"expr_2021",
			"expression_statement",
			"extern",
			"extern_crate_declaration",
			"extern_modifier",
			"false",
			"field_declaration",
			"field_declaration_list",
			"field_expression",
			"field_identifier",
			"field_initializer",
			"field_initializer_list",
			"field_pattern",
			"float_literal",
			"fn",
			"for",
			"for_expression",
			"for_lifetimes",
			"foreign_mod_item",
			"fragment_specifier",
			"function_item",
			"function_modifiers",
			"function_signature_item",
			"function_type",
			"gen",
			"gen_block",
			"generic_function",
			"generic_pattern",
			"generic_type",
			"generic_type_with_turbofish",
			"higher_ranked_trait_bound",
			"ident",
			"identifier",
			"if",
			"if_expression",
			"impl",
			"impl_item",
			"in",
			"index_expression",
			"inner_attribute_item",
			"inner_doc_comment_marker",
			"integer_literal",
			"item",
			"label",
			"let",
			"let_chain",
			"let_condition",
			"let_declaration",
			"lifetime",
			"lifetime_parameter",
			"line_comment",
			"literal",
			"loop",
			"loop_expression",
			"macro_definition",
			"macro_invocation",
			"macro_rule",
			"macro_rules!",
			"match",
			"match_arm",
			"match_block",
			"match_expression",
			"match_pattern",
			"meta",
			"metavariable",
			"mod",
			"mod_item",
			"move",
			"mut_pattern",
			"mutable_specifier",
			"negative_literal",
			"never_type",
			"or_pattern",
			"ordered_field_declaration_list",
			"outer_doc_comment_marker",
			"parameter",
			"parameters",
			"parenthesized_expression",
			"pat",
			"pat_param",
			"path",
			"pointer_type",
			"primitive_type",
			"pub",
			"qualified_type",
			"range_expression",
			"range_pattern",
			"raw",
			"raw_string_literal",
			"ref",
			"ref_pattern",
			"reference_expression",
			"reference_pattern",
			"reference_type",
			"remaining_field_pattern",
			"removed_trait_bound",
			"return",
			"return_expression",
			"scoped_identifier",
			"scoped_type_identifier",
			"scoped_use_list",
			"self",
			"self_parameter",
			"shebang",
			"shorthand_field_identifier",
			"shorthand_field_initializer",
			"slice_pattern",
			"source_file",
			"static",
			"static_item",
			"stmt",
			"string_content",
			"string_literal",
			"struct",
			"struct_expression",
			"struct_item",
			"struct_pattern",
			"super",
			"token_binding_pattern",
			"token_repetition",
			"token_repetition_pattern",
			"token_tree",
			"token_tree_pattern",
			"trait",
			"trait_bounds",
			"trait_item",
			"true",
			"try",
			"try_block",
			"try_expression",
			"tt",
			"tuple_expression",
			"tuple_pattern",
			"tuple_struct_pattern",
			"tuple_type",
			"ty",
			"type",
			"type_arguments",
			"type_binding",
			"type_cast_expression",
			"type_identifier",
			"type_item",
			"type_parameter",
			"type_parameters",
			"unary_expression",
			"union",
			"union_item",
			"unit_expression",
			"unit_type",
			"unsafe",
			"unsafe_block",
			"use",
			"use_as_clause",
			"use_bounds",
			"use_declaration",
			"use_list",
			"use_wildcard",
			"variadic_parameter",
			"vis",
			"visibility_modifier",
			"where",
			"where_clause",
			"where_predicate",
			"while",
			"while_expression",
			"yield",
			"yield_expression",
			"{",
			"|",
			"|=",
			"||",
			"}",
		],
	},
	{
		"name": "javascript",
		"extensions": [
			"js",
			"_js",
			"bones",
			"es",
			"es6",
			"frag",
			"gs",
			"jake",
			"jsb",
			"jscad",
			"jsfl",
			"jsm",
			"jss",
			"njs",
			"pac",
			"sjs",
			"ssjs",
			"sublime-build",
			"sublime-commands",
			"sublime-completions",
			"sublime-keymap",
			"sublime-macro",
			"sublime-menu",
			"sublime-mousemap",
			"sublime-project",
			"sublime-settings",
			"sublime-theme",
			"sublime-workspace",
			"sublime_metrics",
			"sublime_session",
			"xsjs",
			"xsjslib",
		],
		"nodes": [
			"!",
			"!=",
			"!==",
			'"',
			"${",
			"%",
			"%=",
			"&",
			"&&",
			"&&=",
			"&=",
			"'",
			"(",
			")",
			"*",
			"**",
			"**=",
			"*=",
			"+",
			"++",
			"+=",
			",",
			"-",
			"--",
			"-=",
			".",
			"...",
			"/",
			"/=",
			"/>",
			":",
			";",
			"<",
			"</",
			"<<",
			"<<=",
			"<=",
			"=",
			"==",
			"===",
			"=>",
			">",
			">=",
			">>",
			">>=",
			">>>",
			">>>=",
			"?",
			"??",
			"??=",
			"@",
			"[",
			"]",
			"^",
			"^=",
			"`",
			"arguments",
			"array",
			"array_pattern",
			"arrow_function",
			"as",
			"assignment_expression",
			"assignment_pattern",
			"async",
			"augmented_assignment_expression",
			"await",
			"await_expression",
			"binary_expression",
			"break",
			"break_statement",
			"call_expression",
			"case",
			"catch",
			"catch_clause",
			"class",
			"class_body",
			"class_declaration",
			"class_heritage",
			"class_static_block",
			"comment",
			"computed_property_name",
			"const",
			"continue",
			"continue_statement",
			"debugger",
			"debugger_statement",
			"declaration",
			"decorator",
			"default",
			"delete",
			"do",
			"do_statement",
			"else",
			"else_clause",
			"empty_statement",
			"escape_sequence",
			"export",
			"export_clause",
			"export_specifier",
			"export_statement",
			"expression",
			"expression_statement",
			"extends",
			"false",
			"field_definition",
			"finally",
			"finally_clause",
			"for",
			"for_in_statement",
			"for_statement",
			"formal_parameters",
			"from",
			"function",
			"function_declaration",
			"function_expression",
			"generator_function",
			"generator_function_declaration",
			"get",
			"hash_bang_line",
			"html_character_reference",
			"html_comment",
			"identifier",
			"if",
			"if_statement",
			"import",
			"import_attribute",
			"import_clause",
			"import_specifier",
			"import_statement",
			"in",
			"instanceof",
			"jsx_attribute",
			"jsx_closing_element",
			"jsx_element",
			"jsx_expression",
			"jsx_namespace_name",
			"jsx_opening_element",
			"jsx_self_closing_element",
			"jsx_text",
			"labeled_statement",
			"let",
			"lexical_declaration",
			"member_expression",
			"meta",
			"meta_property",
			"method_definition",
			"named_imports",
			"namespace_export",
			"namespace_import",
			"new",
			"new_expression",
			"null",
			"number",
			"object",
			"object_assignment_pattern",
			"object_pattern",
			"of",
			"optional_chain",
			"pair",
			"pair_pattern",
			"parenthesized_expression",
			"pattern",
			"primary_expression",
			"private_property_identifier",
			"program",
			"property_identifier",
			"regex",
			"regex_flags",
			"regex_pattern",
			"rest_pattern",
			"return",
			"return_statement",
			"sequence_expression",
			"set",
			"shorthand_property_identifier",
			"shorthand_property_identifier_pattern",
			"spread_element",
			"statement",
			"statement_block",
			"statement_identifier",
			"static",
			"static get",
			"string",
			"string_fragment",
			"subscript_expression",
			"super",
			"switch",
			"switch_body",
			"switch_case",
			"switch_default",
			"switch_statement",
			"target",
			"template_string",
			"template_substitution",
			"ternary_expression",
			"this",
			"throw",
			"throw_statement",
			"true",
			"try",
			"try_statement",
			"typeof",
			"unary_expression",
			"undefined",
			"update_expression",
			"var",
			"variable_declaration",
			"variable_declarator",
			"void",
			"while",
			"while_statement",
			"with",
			"with_statement",
			"yield",
			"yield_expression",
			"{",
			"|",
			"|=",
			"||",
			"||=",
			"}",
			"~",
		],
	},
	{
		"name": "python",
		"extensions": [
			"py",
			"bzl",
			"cgi",
			"fcgi",
			"gyp",
			"lmi",
			"pyde",
			"pyp",
			"pyt",
			"pyw",
			"rpy",
			"tac",
			"wsgi",
			"xpy",
		],
		"nodes": [
			"!=",
			"%",
			"%=",
			"&",
			"&=",
			"(",
			")",
			"*",
			"**",
			"**=",
			"*=",
			"+",
			"+=",
			",",
			"-",
			"-=",
			"->",
			".",
			"/",
			"//",
			"//=",
			"/=",
			":",
			":=",
			";",
			"<",
			"<<",
			"<<=",
			"<=",
			"<>",
			"=",
			"==",
			">",
			">=",
			">>",
			">>=",
			"@",
			"@=",
			"[",
			"\\",
			"]",
			"^",
			"^=",
			"_",
			"__future__",
			"_compound_statement",
			"_simple_statement",
			"aliased_import",
			"and",
			"argument_list",
			"as",
			"as_pattern",
			"as_pattern_target",
			"assert",
			"assert_statement",
			"assignment",
			"async",
			"attribute",
			"augmented_assignment",
			"await",
			"binary_operator",
			"block",
			"boolean_operator",
			"break",
			"break_statement",
			"call",
			"case",
			"case_clause",
			"case_pattern",
			"chevron",
			"class",
			"class_definition",
			"class_pattern",
			"comment",
			"comparison_operator",
			"complex_pattern",
			"concatenated_string",
			"conditional_expression",
			"constrained_type",
			"continue",
			"continue_statement",
			"decorated_definition",
			"decorator",
			"def",
			"default_parameter",
			"del",
			"delete_statement",
			"dict_pattern",
			"dictionary",
			"dictionary_comprehension",
			"dictionary_splat",
			"dictionary_splat_pattern",
			"dotted_name",
			"elif",
			"elif_clause",
			"ellipsis",
			"else",
			"else_clause",
			"escape_interpolation",
			"escape_sequence",
			"except",
			"except*",
			"except_clause",
			"except_group_clause",
			"exec",
			"exec_statement",
			"expression",
			"expression_list",
			"expression_statement",
			"false",
			"finally",
			"finally_clause",
			"float",
			"for",
			"for_in_clause",
			"for_statement",
			"format_expression",
			"format_specifier",
			"from",
			"function_definition",
			"future_import_statement",
			"generator_expression",
			"generic_type",
			"global",
			"global_statement",
			"identifier",
			"if",
			"if_clause",
			"if_statement",
			"import",
			"import_from_statement",
			"import_prefix",
			"import_statement",
			"in",
			"integer",
			"interpolation",
			"is",
			"is not",
			"keyword_argument",
			"keyword_pattern",
			"keyword_separator",
			"lambda",
			"lambda_parameters",
			"line_continuation",
			"list",
			"list_comprehension",
			"list_pattern",
			"list_splat",
			"list_splat_pattern",
			"match",
			"match_statement",
			"member_type",
			"module",
			"named_expression",
			"none",
			"nonlocal",
			"nonlocal_statement",
			"not",
			"not in",
			"not_operator",
			"or",
			"pair",
			"parameter",
			"parameters",
			"parenthesized_expression",
			"parenthesized_list_splat",
			"pass",
			"pass_statement",
			"pattern",
			"pattern_list",
			"positional_separator",
			"primary_expression",
			"print",
			"print_statement",
			"raise",
			"raise_statement",
			"relative_import",
			"return",
			"return_statement",
			"set",
			"set_comprehension",
			"slice",
			"splat_pattern",
			"splat_type",
			"string",
			"string_content",
			"string_end",
			"string_start",
			"subscript",
			"true",
			"try",
			"try_statement",
			"tuple",
			"tuple_pattern",
			"type",
			"type_alias_statement",
			"type_conversion",
			"type_parameter",
			"typed_default_parameter",
			"typed_parameter",
			"unary_operator",
			"union_pattern",
			"union_type",
			"while",
			"while_statement",
			"wildcard_import",
			"with",
			"with_clause",
			"with_item",
			"with_statement",
			"yield",
			"{",
			"|",
			"|=",
			"}",
			"~",
		],
	},
	{
		"name": "php",
		"extensions": ["php", "aw", "ctp", "fcgi", "inc", "php3", "php4", "php5", "phps", "phpt"],
		"nodes": [
			"!",
			"!=",
			"!==",
			'"',
			"#[",
			"$",
			"%",
			"%=",
			"&",
			"&&",
			"&=",
			"'",
			"(",
			")",
			"*",
			"**",
			"**=",
			"*=",
			"+",
			"++",
			"+=",
			",",
			"-",
			"--",
			"-=",
			"->",
			".",
			"...",
			".=",
			"/",
			"/=",
			":",
			"::",
			";",
			"<",
			"<<",
			"<<<",
			"<<=",
			"<=",
			"<=>",
			"<>",
			"=",
			"==",
			"===",
			"=>",
			">",
			">=",
			">>",
			">>=",
			"?",
			"?->",
			"?>",
			"??",
			"??=",
			"@",
			"[",
			"\\",
			"]",
			"^",
			"^=",
			"`",
			"abstract",
			"abstract_modifier",
			"and",
			"anonymous_class",
			"anonymous_function",
			"anonymous_function_use_clause",
			"argument",
			"arguments",
			"array",
			"array_creation_expression",
			"array_element_initializer",
			"arrow_function",
			"as",
			"assignment_expression",
			"attribute",
			"attribute_group",
			"attribute_list",
			"augmented_assignment_expression",
			"base_clause",
			"binary_expression",
			"bool",
			"boolean",
			"bottom_type",
			"break",
			"break_statement",
			"by_ref",
			"callable",
			"case",
			"case_statement",
			"cast_expression",
			"cast_type",
			"catch",
			"catch_clause",
			"class",
			"class_constant_access_expression",
			"class_declaration",
			"class_interface_clause",
			"clone",
			"clone_expression",
			"colon_block",
			"comment",
			"compound_statement",
			"conditional_expression",
			"const",
			"const_declaration",
			"const_element",
			"continue",
			"continue_statement",
			"declaration_list",
			"declare",
			"declare_directive",
			"declare_statement",
			"default",
			"default_statement",
			"disjunctive_normal_form_type",
			"do",
			"do_statement",
			"dynamic_variable_name",
			"echo",
			"echo_statement",
			"else",
			"else_clause",
			"else_if_clause",
			"elseif",
			"empty_statement",
			"encapsed_string",
			"encoding",
			"enddeclare",
			"endfor",
			"endforeach",
			"endif",
			"endswitch",
			"endwhile",
			"enum",
			"enum_case",
			"enum_declaration",
			"enum_declaration_list",
			"error_suppression_expression",
			"escape_sequence",
			"exit",
			"exit_statement",
			"expression",
			"expression_statement",
			"extends",
			"false",
			"final",
			"final_modifier",
			"finally",
			"finally_clause",
			"float",
			"fn",
			"for",
			"for_statement",
			"foreach",
			"foreach_statement",
			"formal_parameters",
			"from",
			"function",
			"function_call_expression",
			"function_definition",
			"function_static_declaration",
			"global",
			"global_declaration",
			"goto",
			"goto_statement",
			"heredoc",
			"heredoc_body",
			"heredoc_end",
			"heredoc_start",
			"if",
			"if_statement",
			"implements",
			"include",
			"include_expression",
			"include_once",
			"include_once_expression",
			"instanceof",
			"insteadof",
			"int",
			"integer",
			"interface",
			"interface_declaration",
			"intersection_type",
			"iterable",
			"list",
			"list_literal",
			"literal",
			"match",
			"match_block",
			"match_condition_list",
			"match_conditional_expression",
			"match_default_expression",
			"match_expression",
			"member_access_expression",
			"member_call_expression",
			"method_declaration",
			"mixed",
			"name",
			"named_label_statement",
			"named_type",
			"namespace",
			"namespace_definition",
			"namespace_name",
			"namespace_use_clause",
			"namespace_use_declaration",
			"namespace_use_group",
			"new",
			"nowdoc",
			"nowdoc_body",
			"nowdoc_string",
			"null",
			"nullsafe_member_access_expression",
			"nullsafe_member_call_expression",
			"object_creation_expression",
			"operation",
			"optional_type",
			"or",
			"pair",
			"parent",
			"parenthesized_expression",
			"php_tag",
			"primary_expression",
			"primitive_type",
			"print",
			"print_intrinsic",
			"private",
			"program",
			"property_declaration",
			"property_element",
			"property_hook",
			"property_hook_list",
			"property_promotion_parameter",
			"protected",
			"public",
			"qualified_name",
			"readonly",
			"readonly_modifier",
			"reference_assignment_expression",
			"reference_modifier",
			"relative_name",
			"relative_scope",
			"require",
			"require_expression",
			"require_once",
			"require_once_expression",
			"return",
			"return_statement",
			"scoped_call_expression",
			"scoped_property_access_expression",
			"self",
			"sequence_expression",
			"shell_command_expression",
			"simple_parameter",
			"statement",
			"static",
			"static_modifier",
			"static_variable_declaration",
			"strict_types",
			"string",
			"string_content",
			"subscript_expression",
			"switch",
			"switch_block",
			"switch_statement",
			"text",
			"text_interpolation",
			"throw",
			"throw_expression",
			"ticks",
			"trait",
			"trait_declaration",
			"true",
			"try",
			"try_statement",
			"type",
			"type_list",
			"unary_op_expression",
			"union_type",
			"unset",
			"unset_statement",
			"update_expression",
			"use",
			"use_as_clause",
			"use_declaration",
			"use_instead_of_clause",
			"use_list",
			"var_modifier",
			"variable_name",
			"variadic_parameter",
			"variadic_placeholder",
			"variadic_unpacking",
			"visibility_modifier",
			"void",
			"while",
			"while_statement",
			"xor",
			"yield",
			"yield_expression",
			"{",
			"|",
			"|=",
			"||",
			"}",
			"~",
		],
	},
	{
		"name": "typescript",
		"extensions": ["ts", "tsx"],
		"nodes": [
			"!",
			"!=",
			"!==",
			'"',
			"${",
			"%",
			"%=",
			"&",
			"&&",
			"&&=",
			"&=",
			"'",
			"(",
			")",
			"*",
			"**",
			"**=",
			"*=",
			"+",
			"++",
			"+=",
			"+?:",
			",",
			"-",
			"--",
			"-=",
			"-?:",
			".",
			"...",
			"/",
			"/=",
			":",
			";",
			"<",
			"<<",
			"<<=",
			"<=",
			"=",
			"==",
			"===",
			"=>",
			">",
			">=",
			">>",
			">>=",
			">>>",
			">>>=",
			"?",
			"?.",
			"?:",
			"??",
			"??=",
			"@",
			"[",
			"]",
			"^",
			"^=",
			"`",
			"abstract",
			"abstract_class_declaration",
			"abstract_method_signature",
			"accessibility_modifier",
			"accessor",
			"adding_type_annotation",
			"ambient_declaration",
			"any",
			"arguments",
			"array",
			"array_pattern",
			"array_type",
			"arrow_function",
			"as",
			"as_expression",
			"assert",
			"asserts",
			"asserts_annotation",
			"assignment_expression",
			"assignment_pattern",
			"async",
			"augmented_assignment_expression",
			"await",
			"await_expression",
			"binary_expression",
			"boolean",
			"break",
			"break_statement",
			"call_expression",
			"call_signature",
			"case",
			"catch",
			"catch_clause",
			"class",
			"class_body",
			"class_declaration",
			"class_heritage",
			"class_static_block",
			"comment",
			"computed_property_name",
			"conditional_type",
			"const",
			"constraint",
			"construct_signature",
			"constructor_type",
			"continue",
			"continue_statement",
			"debugger",
			"debugger_statement",
			"declaration",
			"declare",
			"decorator",
			"default",
			"default_type",
			"delete",
			"do",
			"do_statement",
			"else",
			"else_clause",
			"empty_statement",
			"enum",
			"enum_assignment",
			"enum_body",
			"enum_declaration",
			"escape_sequence",
			"existential_type",
			"export",
			"export_clause",
			"export_specifier",
			"export_statement",
			"expression",
			"expression_statement",
			"extends",
			"extends_clause",
			"extends_type_clause",
			"false",
			"finally",
			"finally_clause",
			"flow_maybe_type",
			"for",
			"for_in_statement",
			"for_statement",
			"formal_parameters",
			"from",
			"function",
			"function_declaration",
			"function_expression",
			"function_signature",
			"function_type",
			"generator_function",
			"generator_function_declaration",
			"generic_type",
			"get",
			"global",
			"hash_bang_line",
			"html_comment",
			"identifier",
			"if",
			"if_statement",
			"implements",
			"implements_clause",
			"import",
			"import_alias",
			"import_attribute",
			"import_clause",
			"import_require_clause",
			"import_specifier",
			"import_statement",
			"in",
			"index_signature",
			"index_type_query",
			"infer",
			"infer_type",
			"instanceof",
			"instantiation_expression",
			"interface",
			"interface_body",
			"interface_declaration",
			"internal_module",
			"intersection_type",
			"is",
			"keyof",
			"labeled_statement",
			"let",
			"lexical_declaration",
			"literal_type",
			"lookup_type",
			"mapped_type_clause",
			"member_expression",
			"meta",
			"meta_property",
			"method_definition",
			"method_signature",
			"module",
			"named_imports",
			"namespace",
			"namespace_export",
			"namespace_import",
			"nested_identifier",
			"nested_type_identifier",
			"never",
			"new",
			"new_expression",
			"non_null_expression",
			"null",
			"number",
			"object",
			"object_assignment_pattern",
			"object_pattern",
			"object_type",
			"of",
			"omitting_type_annotation",
			"opting_type_annotation",
			"optional_chain",
			"optional_parameter",
			"optional_type",
			"override",
			"override_modifier",
			"pair",
			"pair_pattern",
			"parenthesized_expression",
			"parenthesized_type",
			"pattern",
			"predefined_type",
			"primary_expression",
			"primary_type",
			"private",
			"private_property_identifier",
			"program",
			"property_identifier",
			"property_signature",
			"protected",
			"public",
			"public_field_definition",
			"readonly",
			"readonly_type",
			"regex",
			"regex_flags",
			"regex_pattern",
			"require",
			"required_parameter",
			"rest_pattern",
			"rest_type",
			"return",
			"return_statement",
			"satisfies",
			"satisfies_expression",
			"sequence_expression",
			"set",
			"shorthand_property_identifier",
			"shorthand_property_identifier_pattern",
			"spread_element",
			"statement",
			"statement_block",
			"statement_identifier",
			"static",
			"string",
			"string_fragment",
			"subscript_expression",
			"super",
			"switch",
			"switch_body",
			"switch_case",
			"switch_default",
			"switch_statement",
			"symbol",
			"target",
			"template_literal_type",
			"template_string",
			"template_substitution",
			"template_type",
			"ternary_expression",
			"this",
			"this_type",
			"throw",
			"throw_statement",
			"true",
			"try",
			"try_statement",
			"tuple_type",
			"type",
			"type_alias_declaration",
			"type_annotation",
			"type_arguments",
			"type_assertion",
			"type_identifier",
			"type_parameter",
			"type_parameters",
			"type_predicate",
			"type_predicate_annotation",
			"type_query",
			"typeof",
			"unary_expression",
			"undefined",
			"union_type",
			"unique symbol",
			"unknown",
			"update_expression",
			"using",
			"var",
			"variable_declaration",
			"variable_declarator",
			"void",
			"while",
			"while_statement",
			"with",
			"with_statement",
			"yield",
			"yield_expression",
			"{",
			"{|",
			"|",
			"|=",
			"||",
			"||=",
			"|}",
			"}",
			"~",
		],
	},
	{
		"name": "go",
		"extensions": ["go"],
		"nodes": [
			"!",
			"!=",
			'"',
			"%",
			"%=",
			"&",
			"&&",
			"&=",
			"&^",
			"&^=",
			"(",
			")",
			"*",
			"*=",
			"+",
			"++",
			"+=",
			",",
			"-",
			"--",
			"-=",
			".",
			"...",
			"/",
			"/=",
			":",
			":=",
			";",
			"<",
			"<-",
			"<<",
			"<<=",
			"<=",
			"=",
			"==",
			">",
			">=",
			">>",
			">>=",
			"[",
			"]",
			"^",
			"^=",
			"_expression",
			"_simple_statement",
			"_simple_type",
			"_statement",
			"_type",
			"`",
			"argument_list",
			"array_type",
			"assignment_statement",
			"binary_expression",
			"blank_identifier",
			"block",
			"break",
			"break_statement",
			"call_expression",
			"case",
			"chan",
			"channel_type",
			"comment",
			"communication_case",
			"composite_literal",
			"const",
			"const_declaration",
			"const_spec",
			"continue",
			"continue_statement",
			"dec_statement",
			"default",
			"default_case",
			"defer",
			"defer_statement",
			"dot",
			"else",
			"empty_statement",
			"escape_sequence",
			"expression_case",
			"expression_list",
			"expression_statement",
			"expression_switch_statement",
			"fallthrough",
			"fallthrough_statement",
			"false",
			"field_declaration",
			"field_declaration_list",
			"field_identifier",
			"float_literal",
			"for",
			"for_clause",
			"for_statement",
			"func",
			"func_literal",
			"function_declaration",
			"function_type",
			"generic_type",
			"go",
			"go_statement",
			"goto",
			"goto_statement",
			"identifier",
			"if",
			"if_statement",
			"imaginary_literal",
			"implicit_length_array_type",
			"import",
			"import_declaration",
			"import_spec",
			"import_spec_list",
			"inc_statement",
			"index_expression",
			"int_literal",
			"interface",
			"interface_type",
			"interpreted_string_literal",
			"interpreted_string_literal_content",
			"iota",
			"keyed_element",
			"label_name",
			"labeled_statement",
			"literal_element",
			"literal_value",
			"map",
			"map_type",
			"method_declaration",
			"method_elem",
			"negated_type",
			"nil",
			"package",
			"package_clause",
			"package_identifier",
			"parameter_declaration",
			"parameter_list",
			"parenthesized_expression",
			"parenthesized_type",
			"pointer_type",
			"qualified_type",
			"range",
			"range_clause",
			"raw_string_literal",
			"raw_string_literal_content",
			"receive_statement",
			"return",
			"return_statement",
			"rune_literal",
			"select",
			"select_statement",
			"selector_expression",
			"send_statement",
			"short_var_declaration",
			"slice_expression",
			"slice_type",
			"source_file",
			"struct",
			"struct_type",
			"switch",
			"true",
			"type",
			"type_alias",
			"type_arguments",
			"type_assertion_expression",
			"type_case",
			"type_constraint",
			"type_conversion_expression",
			"type_declaration",
			"type_elem",
			"type_identifier",
			"type_instantiation_expression",
			"type_parameter_declaration",
			"type_parameter_list",
			"type_spec",
			"type_switch_statement",
			"unary_expression",
			"var",
			"var_declaration",
			"var_spec",
			"var_spec_list",
			"variadic_argument",
			"variadic_parameter_declaration",
			"{",
			"|",
			"|=",
			"||",
			"}",
			"~",
		],
	},
]
