"""
Auto-generated file. DO NOT EDIT MANUALLY.

Generated by scripts/analyze_node_types.py on 2025-05-13 19:00:45.

Contains literals for supported languages, node types, and language extensions.
"""

# ruff: noqa: RUF001
from typing import Literal

SupportedLanguages = Literal[
	# Supported programming languages (auto-generated)
	"go",
	"javascript",
	"php",
	"python",
	"rust",
	"typescript",
]

NodeTypes = Literal[
	# All node types from all grammars (auto-generated)
	"!",
	"!=",
	"!==",
	'"',
	"#",
	"#[",
	"$",
	"${",
	"%",
	"%=",
	"&",
	"&&",
	"&&=",
	"&=",
	"&^",
	"&^=",
	"'",
	"(",
	")",
	"*",
	"**",
	"**=",
	"*/",
	"*=",
	"+",
	"++",
	"+=",
	"+?:",
	",",
	"-",
	"--",
	"-=",
	"->",
	"-?:",
	".",
	"..",
	"...",
	"..=",
	".=",
	"/",
	"/*",
	"//",
	"//=",
	"/=",
	"/>",
	":",
	"::",
	":=",
	";",
	"<",
	"<-",
	"</",
	"<<",
	"<<<",
	"<<=",
	"<=",
	"<=>",
	"<>",
	"=",
	"==",
	"===",
	"=>",
	">",
	">=",
	">>",
	">>=",
	">>>",
	">>>=",
	"?",
	"?->",
	"?.",
	"?:",
	"?>",
	"??",
	"??=",
	"@",
	"@=",
	"[",
	"\\",
	"]",
	"^",
	"^=",
	"_",
	"__future__",
	"_compound_statement",
	"_declaration_statement",
	"_expression",
	"_literal",
	"_literal_pattern",
	"_pattern",
	"_simple_statement",
	"_simple_type",
	"_statement",
	"_type",
	"`",
	"abstract",
	"abstract_class_declaration",
	"abstract_method_signature",
	"abstract_modifier",
	"abstract_type",
	"accessibility_modifier",
	"accessor",
	"adding_type_annotation",
	"aliased_import",
	"ambient_declaration",
	"and",
	"anonymous_class",
	"anonymous_function",
	"anonymous_function_use_clause",
	"any",
	"argument",
	"argument_list",
	"arguments",
	"array",
	"array_creation_expression",
	"array_element_initializer",
	"array_expression",
	"array_pattern",
	"array_type",
	"arrow_function",
	"as",
	"as_expression",
	"as_pattern",
	"as_pattern_target",
	"assert",
	"assert_statement",
	"asserts",
	"asserts_annotation",
	"assignment",
	"assignment_expression",
	"assignment_pattern",
	"assignment_statement",
	"associated_type",
	"async",
	"async_block",
	"attribute",
	"attribute_group",
	"attribute_item",
	"attribute_list",
	"augmented_assignment",
	"augmented_assignment_expression",
	"await",
	"await_expression",
	"base_clause",
	"base_field_initializer",
	"binary_expression",
	"binary_operator",
	"blank_identifier",
	"block",
	"block_comment",
	"bool",
	"boolean",
	"boolean_literal",
	"boolean_operator",
	"bottom_type",
	"bounded_type",
	"bracketed_type",
	"break",
	"break_expression",
	"break_statement",
	"by_ref",
	"call",
	"call_expression",
	"call_signature",
	"callable",
	"captured_pattern",
	"case",
	"case_clause",
	"case_pattern",
	"case_statement",
	"cast_expression",
	"cast_type",
	"catch",
	"catch_clause",
	"chan",
	"channel_type",
	"char_literal",
	"chevron",
	"class",
	"class_body",
	"class_constant_access_expression",
	"class_declaration",
	"class_definition",
	"class_heritage",
	"class_interface_clause",
	"class_pattern",
	"class_static_block",
	"clone",
	"clone_expression",
	"closure_expression",
	"closure_parameters",
	"colon_block",
	"comment",
	"communication_case",
	"comparison_operator",
	"complex_pattern",
	"composite_literal",
	"compound_assignment_expr",
	"compound_statement",
	"computed_property_name",
	"concatenated_string",
	"conditional_expression",
	"conditional_type",
	"const",
	"const_block",
	"const_declaration",
	"const_element",
	"const_item",
	"const_parameter",
	"const_spec",
	"constrained_type",
	"constraint",
	"construct_signature",
	"constructor_type",
	"continue",
	"continue_expression",
	"continue_statement",
	"crate",
	"debugger",
	"debugger_statement",
	"dec_statement",
	"declaration",
	"declaration_list",
	"declare",
	"declare_directive",
	"declare_statement",
	"decorated_definition",
	"decorator",
	"def",
	"default",
	"default_case",
	"default_parameter",
	"default_statement",
	"default_type",
	"defer",
	"defer_statement",
	"del",
	"delete",
	"delete_statement",
	"dict_pattern",
	"dictionary",
	"dictionary_comprehension",
	"dictionary_splat",
	"dictionary_splat_pattern",
	"disjunctive_normal_form_type",
	"do",
	"do_statement",
	"doc_comment",
	"dot",
	"dotted_name",
	"dyn",
	"dynamic_type",
	"dynamic_variable_name",
	"echo",
	"echo_statement",
	"elif",
	"elif_clause",
	"ellipsis",
	"else",
	"else_clause",
	"else_if_clause",
	"elseif",
	"empty_statement",
	"encapsed_string",
	"encoding",
	"enddeclare",
	"endfor",
	"endforeach",
	"endif",
	"endswitch",
	"endwhile",
	"enum",
	"enum_assignment",
	"enum_body",
	"enum_case",
	"enum_declaration",
	"enum_declaration_list",
	"enum_item",
	"enum_variant",
	"enum_variant_list",
	"error_suppression_expression",
	"escape_interpolation",
	"escape_sequence",
	"except",
	"except*",
	"except_clause",
	"except_group_clause",
	"exec",
	"exec_statement",
	"existential_type",
	"exit",
	"exit_statement",
	"export",
	"export_clause",
	"export_specifier",
	"export_statement",
	"expr",
	"expr_2021",
	"expression",
	"expression_case",
	"expression_list",
	"expression_statement",
	"expression_switch_statement",
	"extends",
	"extends_clause",
	"extends_type_clause",
	"extern",
	"extern_crate_declaration",
	"extern_modifier",
	"fallthrough",
	"fallthrough_statement",
	"false",
	"field_declaration",
	"field_declaration_list",
	"field_definition",
	"field_expression",
	"field_identifier",
	"field_initializer",
	"field_initializer_list",
	"field_pattern",
	"final",
	"final_modifier",
	"finally",
	"finally_clause",
	"float",
	"float_literal",
	"flow_maybe_type",
	"fn",
	"for",
	"for_clause",
	"for_expression",
	"for_in_clause",
	"for_in_statement",
	"for_lifetimes",
	"for_statement",
	"foreach",
	"foreach_statement",
	"foreign_mod_item",
	"formal_parameters",
	"format_expression",
	"format_specifier",
	"fragment_specifier",
	"from",
	"func",
	"func_literal",
	"function",
	"function_call_expression",
	"function_declaration",
	"function_definition",
	"function_expression",
	"function_item",
	"function_modifiers",
	"function_signature",
	"function_signature_item",
	"function_static_declaration",
	"function_type",
	"future_import_statement",
	"gen",
	"gen_block",
	"generator_expression",
	"generator_function",
	"generator_function_declaration",
	"generic_function",
	"generic_pattern",
	"generic_type",
	"generic_type_with_turbofish",
	"get",
	"global",
	"global_declaration",
	"global_statement",
	"go",
	"go_statement",
	"goto",
	"goto_statement",
	"hash_bang_line",
	"heredoc",
	"heredoc_body",
	"heredoc_end",
	"heredoc_start",
	"higher_ranked_trait_bound",
	"html_character_reference",
	"html_comment",
	"ident",
	"identifier",
	"if",
	"if_clause",
	"if_expression",
	"if_statement",
	"imaginary_literal",
	"impl",
	"impl_item",
	"implements",
	"implements_clause",
	"implicit_length_array_type",
	"import",
	"import_alias",
	"import_attribute",
	"import_clause",
	"import_declaration",
	"import_from_statement",
	"import_prefix",
	"import_require_clause",
	"import_spec",
	"import_spec_list",
	"import_specifier",
	"import_statement",
	"in",
	"inc_statement",
	"include",
	"include_expression",
	"include_once",
	"include_once_expression",
	"index_expression",
	"index_signature",
	"index_type_query",
	"infer",
	"infer_type",
	"inner_attribute_item",
	"inner_doc_comment_marker",
	"instanceof",
	"instantiation_expression",
	"insteadof",
	"int",
	"int_literal",
	"integer",
	"integer_literal",
	"interface",
	"interface_body",
	"interface_declaration",
	"interface_type",
	"internal_module",
	"interpolation",
	"interpreted_string_literal",
	"interpreted_string_literal_content",
	"intersection_type",
	"iota",
	"is",
	"is not",
	"item",
	"iterable",
	"jsx_attribute",
	"jsx_closing_element",
	"jsx_element",
	"jsx_expression",
	"jsx_namespace_name",
	"jsx_opening_element",
	"jsx_self_closing_element",
	"jsx_text",
	"keyed_element",
	"keyof",
	"keyword_argument",
	"keyword_pattern",
	"keyword_separator",
	"label",
	"label_name",
	"labeled_statement",
	"lambda",
	"lambda_parameters",
	"let",
	"let_chain",
	"let_condition",
	"let_declaration",
	"lexical_declaration",
	"lifetime",
	"lifetime_parameter",
	"line_comment",
	"line_continuation",
	"list",
	"list_comprehension",
	"list_literal",
	"list_pattern",
	"list_splat",
	"list_splat_pattern",
	"literal",
	"literal_element",
	"literal_type",
	"literal_value",
	"lookup_type",
	"loop",
	"loop_expression",
	"macro_definition",
	"macro_invocation",
	"macro_rule",
	"macro_rules!",
	"map",
	"map_type",
	"mapped_type_clause",
	"match",
	"match_arm",
	"match_block",
	"match_condition_list",
	"match_conditional_expression",
	"match_default_expression",
	"match_expression",
	"match_pattern",
	"match_statement",
	"member_access_expression",
	"member_call_expression",
	"member_expression",
	"member_type",
	"meta",
	"meta_property",
	"metavariable",
	"method_declaration",
	"method_definition",
	"method_elem",
	"method_signature",
	"mixed",
	"mod",
	"mod_item",
	"module",
	"move",
	"mut_pattern",
	"mutable_specifier",
	"name",
	"named_expression",
	"named_imports",
	"named_label_statement",
	"named_type",
	"namespace",
	"namespace_definition",
	"namespace_export",
	"namespace_import",
	"namespace_name",
	"namespace_use_clause",
	"namespace_use_declaration",
	"namespace_use_group",
	"negated_type",
	"negative_literal",
	"nested_identifier",
	"nested_type_identifier",
	"never",
	"never_type",
	"new",
	"new_expression",
	"nil",
	"non_null_expression",
	"none",
	"nonlocal",
	"nonlocal_statement",
	"not",
	"not in",
	"not_operator",
	"nowdoc",
	"nowdoc_body",
	"nowdoc_string",
	"null",
	"nullsafe_member_access_expression",
	"nullsafe_member_call_expression",
	"number",
	"object",
	"object_assignment_pattern",
	"object_creation_expression",
	"object_pattern",
	"object_type",
	"of",
	"omitting_type_annotation",
	"operation",
	"opting_type_annotation",
	"optional_chain",
	"optional_parameter",
	"optional_type",
	"or",
	"or_pattern",
	"ordered_field_declaration_list",
	"outer_doc_comment_marker",
	"override",
	"override_modifier",
	"package",
	"package_clause",
	"package_identifier",
	"pair",
	"pair_pattern",
	"parameter",
	"parameter_declaration",
	"parameter_list",
	"parameters",
	"parent",
	"parenthesized_expression",
	"parenthesized_list_splat",
	"parenthesized_type",
	"pass",
	"pass_statement",
	"pat",
	"pat_param",
	"path",
	"pattern",
	"pattern_list",
	"php_tag",
	"pointer_type",
	"positional_separator",
	"predefined_type",
	"primary_expression",
	"primary_type",
	"primitive_type",
	"print",
	"print_intrinsic",
	"print_statement",
	"private",
	"private_property_identifier",
	"program",
	"property_declaration",
	"property_element",
	"property_hook",
	"property_hook_list",
	"property_identifier",
	"property_promotion_parameter",
	"property_signature",
	"protected",
	"pub",
	"public",
	"public_field_definition",
	"qualified_name",
	"qualified_type",
	"raise",
	"raise_statement",
	"range",
	"range_clause",
	"range_expression",
	"range_pattern",
	"raw",
	"raw_string_literal",
	"raw_string_literal_content",
	"readonly",
	"readonly_modifier",
	"readonly_type",
	"receive_statement",
	"ref",
	"ref_pattern",
	"reference_assignment_expression",
	"reference_expression",
	"reference_modifier",
	"reference_pattern",
	"reference_type",
	"regex",
	"regex_flags",
	"regex_pattern",
	"relative_import",
	"relative_name",
	"relative_scope",
	"remaining_field_pattern",
	"removed_trait_bound",
	"require",
	"require_expression",
	"require_once",
	"require_once_expression",
	"required_parameter",
	"rest_pattern",
	"rest_type",
	"return",
	"return_expression",
	"return_statement",
	"rune_literal",
	"satisfies",
	"satisfies_expression",
	"scoped_call_expression",
	"scoped_identifier",
	"scoped_property_access_expression",
	"scoped_type_identifier",
	"scoped_use_list",
	"select",
	"select_statement",
	"selector_expression",
	"self",
	"self_parameter",
	"send_statement",
	"sequence_expression",
	"set",
	"set_comprehension",
	"shebang",
	"shell_command_expression",
	"short_var_declaration",
	"shorthand_field_identifier",
	"shorthand_field_initializer",
	"shorthand_property_identifier",
	"shorthand_property_identifier_pattern",
	"simple_parameter",
	"slice",
	"slice_expression",
	"slice_pattern",
	"slice_type",
	"source_file",
	"splat_pattern",
	"splat_type",
	"spread_element",
	"statement",
	"statement_block",
	"statement_identifier",
	"static",
	"static get",
	"static_item",
	"static_modifier",
	"static_variable_declaration",
	"stmt",
	"strict_types",
	"string",
	"string_content",
	"string_end",
	"string_fragment",
	"string_literal",
	"string_start",
	"struct",
	"struct_expression",
	"struct_item",
	"struct_pattern",
	"struct_type",
	"subscript",
	"subscript_expression",
	"super",
	"switch",
	"switch_block",
	"switch_body",
	"switch_case",
	"switch_default",
	"switch_statement",
	"symbol",
	"target",
	"template_literal_type",
	"template_string",
	"template_substitution",
	"template_type",
	"ternary_expression",
	"text",
	"text_interpolation",
	"this",
	"this_type",
	"throw",
	"throw_expression",
	"throw_statement",
	"ticks",
	"token_binding_pattern",
	"token_repetition",
	"token_repetition_pattern",
	"token_tree",
	"token_tree_pattern",
	"trait",
	"trait_bounds",
	"trait_declaration",
	"trait_item",
	"true",
	"try",
	"try_block",
	"try_expression",
	"try_statement",
	"tt",
	"tuple",
	"tuple_expression",
	"tuple_pattern",
	"tuple_struct_pattern",
	"tuple_type",
	"ty",
	"type",
	"type_alias",
	"type_alias_declaration",
	"type_alias_statement",
	"type_annotation",
	"type_arguments",
	"type_assertion",
	"type_assertion_expression",
	"type_binding",
	"type_case",
	"type_cast_expression",
	"type_constraint",
	"type_conversion",
	"type_conversion_expression",
	"type_declaration",
	"type_elem",
	"type_identifier",
	"type_instantiation_expression",
	"type_item",
	"type_list",
	"type_parameter",
	"type_parameter_declaration",
	"type_parameter_list",
	"type_parameters",
	"type_predicate",
	"type_predicate_annotation",
	"type_query",
	"type_spec",
	"type_switch_statement",
	"typed_default_parameter",
	"typed_parameter",
	"typeof",
	"unary_expression",
	"unary_op_expression",
	"unary_operator",
	"undefined",
	"union",
	"union_item",
	"union_pattern",
	"union_type",
	"unique symbol",
	"unit_expression",
	"unit_type",
	"unknown",
	"unsafe",
	"unsafe_block",
	"unset",
	"unset_statement",
	"update_expression",
	"use",
	"use_as_clause",
	"use_bounds",
	"use_declaration",
	"use_instead_of_clause",
	"use_list",
	"use_wildcard",
	"using",
	"var",
	"var_declaration",
	"var_modifier",
	"var_spec",
	"var_spec_list",
	"variable_declaration",
	"variable_declarator",
	"variable_name",
	"variadic_argument",
	"variadic_parameter",
	"variadic_parameter_declaration",
	"variadic_placeholder",
	"variadic_unpacking",
	"vis",
	"visibility_modifier",
	"void",
	"where",
	"where_clause",
	"where_predicate",
	"while",
	"while_expression",
	"while_statement",
	"wildcard_import",
	"with",
	"with_clause",
	"with_item",
	"with_statement",
	"xor",
	"yield",
	"yield_expression",
	"{",
	"{|",
	"|",
	"|=",
	"||",
	"||=",
	"|}",
	"}",
	"~",
]

SupportedExtensions = Literal[
	# All unique file extensions for supported languages (auto-generated)
	"_js",
	"aw",
	"bones",
	"bzl",
	"cgi",
	"ctp",
	"es",
	"es6",
	"fcgi",
	"frag",
	"go",
	"gs",
	"gyp",
	"inc",
	"jake",
	"js",
	"jsb",
	"jscad",
	"jsfl",
	"jsm",
	"jss",
	"lmi",
	"njs",
	"pac",
	"php",
	"php3",
	"php4",
	"php5",
	"phps",
	"phpt",
	"py",
	"pyde",
	"pyp",
	"pyt",
	"pyw",
	"rpy",
	"rs",
	"rs.in",
	"sjs",
	"ssjs",
	"sublime-build",
	"sublime-commands",
	"sublime-completions",
	"sublime-keymap",
	"sublime-macro",
	"sublime-menu",
	"sublime-mousemap",
	"sublime-project",
	"sublime-settings",
	"sublime-theme",
	"sublime-workspace",
	"sublime_metrics",
	"sublime_session",
	"tac",
	"ts",
	"tsx",
	"wsgi",
	"xpy",
	"xsjs",
	"xsjslib",
]
