{
  "MODULE": "Python module, Java package, etc. (e.g., 'import numpy as np')",
  "NAMESPACE": "C++ namespace, PHP namespace (e.g., 'namespace std;')",
  "PACKAGE": "Java package, Go package (e.g., 'package com.example;')",
  "INTEGER": "Whole numbers (e.g., 1, -42, 0x1F)",
  "FLOAT": "Floating-point numbers (e.g., 3.14, -0.001, 1e-10)",
  "STRING": "Sequence of characters (e.g., \"hello\", 'world', \"\"\"multiline\"\"\")",
  "CHAR": "Single character (e.g., 'a', '\\n', '\\u0041')",
  "BOOLEAN": "Logical True/False (e.g., true, false, True, False)",
  "NULL": "Absence of value (e.g., null, None, nil, undefined)",
  "SYMBOL": "Symbol type (e.g., :symbol in Ruby, Symbol() in JavaScript)",
  "COMPLEX": "Complex numbers (e.g., 1+2j, 3-4i)",
  "DECIMAL": "Arbitrary-precision decimal numbers (e.g., Decimal('3.14159'))",
  "ARRAY": "Homogeneous list/array (e.g., int[] in Java, [1,2,3] in JavaScript)",
  "LIST": "Ordered collection (e.g., ArrayList in Java, list() in Python)",
  "TUPLE": "Ordered, immutable sequence (e.g., (1,2,3) in Python)",
  "SET": "Unordered collection of unique elements (e.g., HashSet in Java, set() in Python)",
  "RANGE": "Range type (e.g., range(1,10) in Python, 1..10 in Ruby)",
  "MAP": "Key-value pairs (e.g., Map<K,V> in Java, std::map in C++)",
  "DICT": "Dictionary (e.g., {'key': 'value'} in Python)",
  "OBJECT": "Structured object (e.g., {name: \"John\", age: 30} in JavaScript)",
  "TABLE": "Tabular data (e.g., pandas DataFrame, SQL table)",
  "TYPE_ALIAS": "Type alias (e.g., typedef int Integer; in C++)",
  "GENERIC": "Generic type (e.g., List<T> in Java, Vec<T> in Rust)",
  "TRAIT": "Trait (e.g., trait Display in Rust)",
  "MIXIN": "Mixin (e.g., @mixin in Dart, include in Ruby)",
  "UNION": "Union type (e.g., string | number in TypeScript)",
  "INTERSECTION": "Intersection type (e.g., A & B in TypeScript)",
  "POINTER": "Memory address (e.g., int* ptr in C++)",
  "REFERENCE": "Reference type (e.g., &mut String in Rust)",
  "DATETIME": "Date/time value (e.g., datetime in Python, Date in JavaScript)",
  "BINARY": "Raw binary data (e.g., bytes in Python, Buffer in Node.js)",
  "REGEXP": "Regular expression (e.g., /pattern/ in JavaScript)",
  "OPTIONAL": "Optional type (e.g., Option<T> in Rust, Optional<T> in Java)",
  "VARIABLE": "Variable (e.g., let x = 5; in JavaScript)",
  "CONSTANT": "Constant value (e.g., const PI = 3.14; in JavaScript)",
  "CLASS_FIELD": "Class-level variable (e.g., static int count; in Java)",
  "KEY": "Key in a key-value pair (e.g., \"name\" in {\"name\": \"John\"})",
  "VALUE": "Value in a key-value pair (e.g., \"John\" in {\"name\": \"John\"})",
  "GLOBAL": "Global scope (e.g., window in browser JavaScript)",
  "CLASS": "Class scope (e.g., class MyClass { ... })",
  "FUNCTION": "Function scope (e.g., function myFunc() { ... })",
  "METHOD": "Method scope (e.g., class method or instance method)",
  "BLOCK": "Block scope (e.g., { ... } in C-style languages)",
  "LAMBDA": "Lambda/anonymous function (e.g., x => x*2 in JavaScript)",
  "TEMPLATE": "Generic template scope (e.g., template<typename T>)",
  "COMPREHENSION": "List/dict comprehension (e.g., [x for x in range(10)])",
  "TRY_BLOCK": "Exception handling scope (e.g., try { ... } catch { ... })",
  "LOOP": "Loop scope (e.g., for (let i = 0; i < 10; i++) { ... })",
  "SWITCH": "Switch block (e.g., switch (value) { case 1: ... })",
  "PATTERN": "Pattern matching scope (e.g., match value { ... } in Rust)",
  "IF": "If statement (e.g., if (condition) { ... })",
  "ELIF": "Else if statement (e.g., elif condition: ...)",
  "ELSE": "Else statement (e.g., else { ... })",
  "CASE": "Case statement (e.g., case 1: ...)",
  "DEFAULT": "Default case (e.g., default: ...)",
  "FOR": "For loop (e.g., for (int i = 0; i < n; i++) { ... })",
  "FOR_IN": "For-in loop (e.g., for (let item in array) { ... })",
  "FOR_OF": "For-of loop (e.g., for (let item of array) { ... })",
  "WHILE": "While loop (e.g., while (condition) { ... })",
  "DO_WHILE": "Do-while loop (e.g., do { ... } while (condition))",
  "BREAK": "Break statement (e.g., break;)",
  "CONTINUE": "Continue statement (e.g., continue;)",
  "RETURN": "Return statement (e.g., return value;)",
  "YIELD": "Yield statement (e.g., yield value;)",
  "THROW": "Throw statement (e.g., throw new Error();)",
  "TRY": "Try block (e.g., try { ... })",
  "CATCH": "Catch block (e.g., catch (Exception e) { ... })",
  "FINALLY": "Finally block (e.g., finally { ... })",
  "WITH": "With statement (e.g., with open(file) as f: ...)",
  "ASSERT": "Assert statement (e.g., assert condition;)",
  "PASS": "Pass statement (e.g., pass in Python)",
  "RAISE": "Raise statement (e.g., raise Exception() in Python)",
  "DEFER": "Defer statement (e.g., defer cleanup() in Go)",
  "GOTO": "Goto statement (e.g., goto label;)",
  "VARIABLE_DECLARATION": "Variable declaration (e.g., let x = 5;)",
  "CONSTANT_DECLARATION": "Constant declaration (e.g., const PI = 3.14;)",
  "FUNCTION_DECLARATION": "Function declaration (e.g., function myFunc() { ... })",
  "CLASS_DECLARATION": "Class declaration (e.g., class MyClass { ... })",
  "INTERFACE_DECLARATION": "Interface declaration (e.g., interface MyInterface { ... })",
  "ENUM_DECLARATION": "Enum declaration (e.g., enum Colors { RED, GREEN, BLUE })",
  "IMPORT": "Import statement (e.g., import { foo } from 'bar')",
  "EXPORT": "Export statement (e.g., export const foo = 'bar')",
  "TYPE_ALIAS_DECLARATION": "Type alias declaration (e.g., type Point = { x: number, y: number })",
  "STRUCT_DECLARATION": "Struct declaration (e.g., struct Point { x: int, y: int })",
  "MODULE_DECLARATION": "Module declaration (e.g., module MyModule { ... })",
  "NAMESPACE_DECLARATION": "Namespace declaration (e.g., namespace MyNamespace { ... })",
  "PROPERTY_DECLARATION": "Property declaration (e.g., public string Name { get; set; })",
  "EXCEPTION_DECLARATION": "Exception declaration (e.g., class MyException extends Exception { ... })",
  "EVENT_DECLARATION": "Event declaration (e.g., event EventHandler MyEvent)",
  "ANNOTATION_DECLARATION": "Annotation declaration (e.g., @interface MyAnnotation { ... })",
  "MACRO_DECLARATION": "Macro declaration (e.g., #define MAX(a,b) ((a) > (b) ? (a) : (b)))",
  "ASSIGNMENT": "Assignment statement (e.g., x = 5)",
  "EXPRESSION_STATEMENT": "Expression used as statement (e.g., foo();)",
  "EMPTY": "Empty statement (e.g., ;)",
  "LABEL": "Label statement (e.g., label: ...)",
  "COMMENT": "Comment (e.g., // This is a comment)",
  "DOCSTRING": "Documentation string (e.g., \"\"\"This is a docstring\"\"\")",
  "BINARY_OPERATION": "Binary operation (e.g., a + b)",
  "UNARY_OPERATION": "Unary operation (e.g., !x)",
  "CALL": "Function call (e.g., foo(x, y))",
  "MEMBER_ACCESS": "Member access (e.g., obj.prop)",
  "SUBSCRIPT": "Array/object subscript (e.g., arr[0])",
  "CONDITIONAL": "Ternary operator (e.g., condition ? trueExpr : falseExpr)",
  "LITERAL": "Literal value (e.g., 42, \"hello\")",
  "IDENTIFIER": "Variable/function name (e.g., myVar)",
  "NEW": "Object instantiation (e.g., new MyClass())",
  "CAST": "Type cast (e.g., (int)value)",
  "PATTERN_MATCH": "Pattern matching (e.g., match value { ... })",
  "DECORATOR": "Function/class decorator (e.g., @decorator)",
  "ANNOTATION": "Type annotation (e.g., x: int)",
  "ASYNC": "Async expression (e.g., async function foo() { ... })",
  "AWAIT": "Await expression (e.g., await promise)",
  "ARITHMETIC_OPERATOR": "Arithmetic operations (e.g., +, -, *, /, %)",
  "ASSIGNMENT_OPERATOR": "Assignment operations (e.g., =, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=, **=, //=)",
  "BITWISE_OPERATOR": "Bitwise operations (e.g., &, |, ^, ~, <<, >>)",
  "COMPARISON_OPERATOR": "Comparison operations (e.g., ==, !=, <, >, <=, >=, ===, !==)",
  "LOGICAL_OPERATOR": "Logical operations (e.g., &&, ||, !, and, or, not)",
  "UNARY_OPERATOR_GENERIC": "Generic unary operations (e.g., +, -, !, ~)",
  "BINARY_OPERATOR_GENERIC": "Generic binary operations (e.g., +, -, *, /, etc.)",
  "TERNARY_OPERATOR": "Ternary conditional operation (e.g., ?:)",
  "MEMBER_ACCESS_OPERATOR": "Member access operations (e.g., ., ->, ::)",
  "SUBSCRIPT_OPERATOR": "Array/object subscript operations (e.g., [])",
  "SPREAD_OPERATOR": "Spread/rest operations (e.g., ...)",
  "REFERENCE_OPERATOR": "Reference operations (e.g., & for address-of, * for dereference)",
  "LAMBDA_ARROW_OPERATOR": "Lambda/arrow function operations (e.g., =>, ->)",
  "TYPE_OPERATOR": "Type checking operations (e.g., instanceof, typeof, as, is)",
  "UNKNOWN": "Unknown entity type"
} 