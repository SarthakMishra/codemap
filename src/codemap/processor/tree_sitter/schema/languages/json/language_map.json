{
  "python": {
    "*=": "ASSIGNMENT_OPERATOR",
    "+": "ARITHMETIC_OPERATOR",
    "+=": "ASSIGNMENT_OPERATOR",
    "-": "UNKNOWN",
    "-=": "ASSIGNMENT_OPERATOR",
    "->": "LAMBDA_ARROW_OPERATOR",
    ".": "MEMBER_ACCESS_OPERATOR",
    "/": "ARITHMETIC_OPERATOR",
    "//": "ARITHMETIC_OPERATOR",
    "//=": "ASSIGNMENT_OPERATOR",
    "/=": "ASSIGNMENT_OPERATOR",
    "::": "MEMBER_ACCESS_OPERATOR",
    ":=": "ASSIGNMENT_OPERATOR",
    ";": "EMPTY",
    "<": "COMPARISON_OPERATOR",
    "<<": "BITWISE_OPERATOR",
    "<<=": "ASSIGNMENT_OPERATOR",
    "<=": "COMPARISON_OPERATOR",
    "<>": "COMPARISON_OPERATOR",
    "=": "ASSIGNMENT_OPERATOR",
    "==": "COMPARISON_OPERATOR",
    ">": "COMPARISON_OPERATOR",
    ">=": "COMPARISON_OPERATOR",
    ">>": "BITWISE_OPERATOR",
    ">>=": "ASSIGNMENT_OPERATOR",
    "@": "ARITHMETIC_OPERATOR",
    "@=": "ASSIGNMENT_OPERATOR",
    "[": "SUBSCRIPT_OPERATOR",
    ":": "MEMBER_ACCESS_OPERATOR",
    "(": "BINARY_OPERATOR_GENERIC",
    ")": "BINARY_OPERATOR_GENERIC",
    "*": "ARITHMETIC_OPERATOR",
    "**": "ARITHMETIC_OPERATOR",
    "**=": "ASSIGNMENT_OPERATOR",
    ",": "BINARY_OPERATOR_GENERIC",
    "%": "ARITHMETIC_OPERATOR",
    "%=": "ASSIGNMENT_OPERATOR",
    "&": "BITWISE_OPERATOR",
    "&=": "ASSIGNMENT_OPERATOR",
    "!=": "COMPARISON_OPERATOR",
    "]": "SUBSCRIPT_OPERATOR",
    "^": "BITWISE_OPERATOR",
    "^=": "ASSIGNMENT_OPERATOR",
    "_": "VARIABLE",
    "__future__": "MODULE",
    "_compound_statement": "BLOCK",
    "_simple_statement": "EXPRESSION_STATEMENT",
    "aliased_import": "IMPORT",
    "and": "LOGICAL_OPERATOR",
    "argument_list": "LIST",
    "as": "TYPE_OPERATOR",
    "as_pattern": "PATTERN_MATCH",
    "as_pattern_target": "IDENTIFIER",
    "assert": "ASSERT",
    "assert_statement": "ASSERT",
    "assignment": "ASSIGNMENT",
    "async": "ASYNC",
    "attribute": "MEMBER_ACCESS",
    "augmented_assignment": "ASSIGNMENT_OPERATOR",
    "await": "AWAIT",
    "binary_operator": "BINARY_OPERATOR_GENERIC",
    "block": "BLOCK",
    "boolean_operator": "LOGICAL_OPERATOR",
    "break": "BREAK",
    "break_statement": "BREAK",
    "call": "CALL",
    "case": "CASE",
    "case_clause": "CASE",
    "case_pattern": "PATTERN",
    "chevron": "GENERIC",
    "class": "CLASS_DECLARATION",
    "class_definition": "CLASS_DECLARATION",
    "class_pattern": "PATTERN",
    "comment": "COMMENT",
    "comparison_operator": "COMPARISON_OPERATOR",
    "complex_pattern": "PATTERN",
    "concatenated_string": "STRING",
    "conditional_expression": "CONDITIONAL",
    "constrained_type": "GENERIC",
    "continue": "CONTINUE",
    "continue_statement": "CONTINUE",
    "decorated_definition": "DECORATOR",
    "decorator": "DECORATOR",
    "def": "FUNCTION_DECLARATION",
    "default_parameter": "VARIABLE_DECLARATION",
    "dict_pattern": "DICT",
    "dictionary": "DICT",
    "dictionary_comprehension": "DICT",
    "dictionary_splat": "SPREAD_OPERATOR",
    "dictionary_splat_pattern": "PATTERN",
    "dotted_name": "MEMBER_ACCESS",
    "elif": "ELIF",
    "elif_clause": "ELIF",
    "ellipsis": "LITERAL",
    "else": "ELSE",
    "else_clause": "ELSE",
    "escape_interpolation": "STRING",
    "escape_sequence": "STRING",
    "except": "CATCH",
    "except*": "CATCH",
    "except_clause": "CATCH",
    "except_group_clause": "TRY",
    "expression": "EXPRESSION_STATEMENT",
    "expression_list": "LIST",
    "expression_statement": "EXPRESSION_STATEMENT",
    "false": "BOOLEAN",
    "finally": "FINALLY",
    "finally_clause": "FINALLY",
    "float": "FLOAT",
    "for": "FOR",
    "for_in_clause": "FOR_IN",
    "for_statement": "LOOP",
    "format_expression": "STRING",
    "format_specifier": "STRING",
    "from": "IMPORT",
    "function_definition": "FUNCTION_DECLARATION",
    "future_import_statement": "IMPORT",
    "generator_expression": "COMPREHENSION",
    "generic_type": "GENERIC",
    "global": "GLOBAL",
    "global_statement": "GLOBAL",
    "identifier": "IDENTIFIER",
    "if": "IF",
    "if_clause": "IF",
    "if_statement": "IF",
    "import": "IMPORT",
    "import_from_statement": "IMPORT",
    "import_prefix": "IMPORT",
    "import_statement": "IMPORT",
    "in": "LOGICAL_OPERATOR",
    "integer": "INTEGER",
    "interpolation": "STRING",
    "is": "COMPARISON_OPERATOR",
    "is not": "COMPARISON_OPERATOR",
    "keyword_argument": "KEY",
    "keyword_pattern": "PATTERN",
    "keyword_separator": "SYMBOL",
    "lambda": "LAMBDA",
    "lambda_parameters": "VARIABLE_DECLARATION",
    "line_continuation": "SYMBOL",
    "list": "LIST",
    "list_comprehension": "COMPREHENSION",
    "list_pattern": "LIST",
    "list_splat": "SPREAD_OPERATOR",
    "list_splat_pattern": "PATTERN",
    "match": "PATTERN_MATCH",
    "match_statement": "PATTERN",
    "member_type": "TYPE_ALIAS",
    "module": "MODULE",
    "named_expression": "ASSIGNMENT",
    "none": "NULL",
    "nonlocal_statement": "VARIABLE_DECLARATION",
    "not": "LOGICAL_OPERATOR",
    "not in": "LOGICAL_OPERATOR",
    "not_operator": "LOGICAL_OPERATOR",
    "or": "LOGICAL_OPERATOR",
    "pair": "TUPLE",
    "parameter": "VARIABLE_DECLARATION",
    "parameters": "VARIABLE_DECLARATION",
    "parenthesized_expression": "EXPRESSION_STATEMENT",
    "parenthesized_list_splat": "SPREAD_OPERATOR",
    "pass": "PASS",
    "pass_statement": "PASS",
    "pattern": "PATTERN_MATCH",
    "pattern_list": "LIST",
    "positional_separator": "SYMBOL",
    "primary_expression": "LITERAL",
    "print": "FUNCTION",
    "print_statement": "CALL",
    "raise": "RAISE",
    "raise_statement": "RAISE",
    "relative_import": "IMPORT",
    "return": "RETURN",
    "return_statement": "RETURN",
    "set": "SET",
    "set_comprehension": "SET",
    "slice": "RANGE",
    "splat_pattern": "PATTERN",
    "splat_type": "TYPE_ALIAS",
    "string": "STRING",
    "string_content": "STRING",
    "string_end": "STRING",
    "string_start": "STRING",
    "subscript": "SUBSCRIPT",
    "true": "BOOLEAN",
    "try": "TRY_BLOCK",
    "try_statement": "TRY_BLOCK",
    "tuple": "TUPLE",
    "tuple_pattern": "TUPLE",
    "type": "TYPE_ALIAS_DECLARATION",
    "type_alias_statement": "TYPE_ALIAS_DECLARATION",
    "type_conversion": "CAST",
    "type_parameter": "GENERIC",
    "typed_default_parameter": "VARIABLE_DECLARATION",
    "typed_parameter": "VARIABLE_DECLARATION",
    "unary_operator": "UNARY_OPERATION",
    "union_pattern": "UNION",
    "union_type": "UNION",
    "while": "LOOP",
    "while_statement": "WHILE",
    "wildcard_import": "IMPORT",
    "with": "WITH",
    "with_clause": "WITH",
    "with_item": "WITH",
    "with_statement": "WITH",
    "yield": "YIELD",
    "{": "BLOCK",
    "|": "BITWISE_OPERATOR",
    "|=": "ASSIGNMENT_OPERATOR",
    "}": "BLOCK",
    "~": "BITWISE_OPERATOR",
    "\\": "UNKNOWN"
  },
  "go": {
    "(": "BINARY_OPERATION",
    ")": "BINARY_OPERATION",
    "*": "ARITHMETIC_OPERATOR",
    "*=": "ASSIGNMENT_OPERATOR",
    "+": "ARITHMETIC_OPERATOR",
    "++": "UNARY_OPERATOR_GENERIC",
    "+=": "ASSIGNMENT_OPERATOR",
    ",": "UNKNOWN",
    "-": "ARITHMETIC_OPERATOR",
    "--": "UNARY_OPERATOR_GENERIC",
    "-=": "ASSIGNMENT_OPERATOR",
    ".": "MEMBER_ACCESS_OPERATOR",
    "...": "SPREAD_OPERATOR",
    "/": "ARITHMETIC_OPERATOR",
    "/=": "ASSIGNMENT_OPERATOR",
    ":": "UNKNOWN",
    ":=": "ASSIGNMENT_OPERATOR",
    ";": "EMPTY",
    "<": "COMPARISON_OPERATOR",
    "<-": "ASSIGNMENT_OPERATOR",
    "<<": "BITWISE_OPERATOR",
    "<<=": "ASSIGNMENT_OPERATOR",
    "<=": "COMPARISON_OPERATOR",
    "=": "ASSIGNMENT_OPERATOR",
    "==": "COMPARISON_OPERATOR",
    ">": "COMPARISON_OPERATOR",
    ">=": "COMPARISON_OPERATOR",
    ">>": "BITWISE_OPERATOR",
    ">>=": "ASSIGNMENT_OPERATOR",
    "[": "SUBSCRIPT_OPERATOR",
    "array_type": "ARRAY",
    "assignment_statement": "ASSIGNMENT",
    "binary_expression": "BINARY_OPERATION",
    "blank_identifier": "IDENTIFIER",
    "block": "BLOCK",
    "break": "BREAK",
    "break_statement": "BREAK",
    "call_expression": "CALL",
    "case": "CASE",
    "chan": "REFERENCE",
    "channel_type": "VARIABLE",
    "comment": "COMMENT",
    "communication_case": "CASE",
    "composite_literal": "LITERAL",
    "const": "CONSTANT",
    "const_declaration": "CONSTANT_DECLARATION",
    "const_spec": "CONSTANT_DECLARATION",
    "continue": "CONTINUE",
    "continue_statement": "CONTINUE",
    "expression_statement": "EXPRESSION_STATEMENT",
    "expression_switch_statement": "SWITCH",
    "false": "BOOLEAN",
    "field_declaration": "VARIABLE_DECLARATION",
    "field_declaration_list": "VARIABLE_DECLARATION",
    "field_identifier": "IDENTIFIER",
    "float_literal": "FLOAT",
    "for": "FOR",
    "for_clause": "LOOP",
    "for_statement": "LOOP",
    "func": "FUNCTION",
    "func_literal": "LAMBDA",
    "function_declaration": "FUNCTION_DECLARATION",
    "function_type": "TYPE_ALIAS",
    "generic_type": "GENERIC",
    "go": "CALL",
    "go_statement": "CALL",
    "goto": "GOTO",
    "goto_statement": "GOTO",
    "identifier": "IDENTIFIER",
    "if": "IF",
    "if_statement": "IF",
    "imaginary_literal": "COMPLEX",
    "implicit_length_array_type": "ARRAY",
    "import": "IMPORT",
    "import_declaration": "IMPORT",
    "import_spec": "IMPORT",
    "import_spec_list": "IMPORT",
    "labeled_statement": "LABEL",
    "literal_element": "LITERAL",
    "literal_value": "LITERAL",
    "map": "MAP",
    "map_type": "TYPE_ALIAS",
    "method_declaration": "FUNCTION_DECLARATION",
    "method_elem": "METHOD",
    "negated_type": "TYPE_ALIAS",
    "nil": "NULL",
    "package": "PACKAGE",
    "package_clause": "PACKAGE",
    "package_identifier": "IDENTIFIER",
    "parameter_declaration": "VARIABLE_DECLARATION",
    "parameter_list": "LIST",
    "parenthesized_expression": "EXPRESSION_STATEMENT",
    "parenthesized_type": "TYPE_ALIAS",
    "pointer_type": "POINTER",
    "qualified_type": "TYPE_ALIAS",
    "range": "RANGE",
    "range_clause": "LOOP",
    "raw_string_literal": "STRING",
    "raw_string_literal_content": "STRING",
    "return": "RETURN",
    "return_statement": "RETURN",
    "rune_literal": "CHAR",
    "select": "UNKNOWN",
    "selector_expression": "EXPRESSION_STATEMENT",
    "short_var_declaration": "VARIABLE_DECLARATION",
    "slice_expression": "EXPRESSION_STATEMENT",
    "source_file": "MODULE_DECLARATION",
    "struct": "STRUCT_DECLARATION",
    "switch": "SWITCH",
    "true": "LITERAL",
    "type_alias": "TYPE_ALIAS_DECLARATION",
    "type_arguments": "GENERIC",
    "type_assertion_expression": "EXPRESSION_STATEMENT",
    "type_case": "CASE",
    "type_constraint": "TYPE_ALIAS",
    "type_conversion_expression": "CAST",
    "type_declaration": "TYPE_ALIAS_DECLARATION",
    "type_elem": "KEY",
    "type_identifier": "IDENTIFIER",
    "type_instantiation_expression": "CALL",
    "type_parameter_declaration": "GENERIC",
    "type_parameter_list": "GENERIC",
    "type_spec": "TYPE_ALIAS",
    "type_switch_statement": "SWITCH",
    "unary_expression": "UNARY_OPERATION",
    "var": "VARIABLE_DECLARATION",
    "var_declaration": "VARIABLE_DECLARATION",
    "var_spec": "VARIABLE_DECLARATION",
    "var_spec_list": "VARIABLE_DECLARATION",
    "variadic_argument": "OPTIONAL",
    "variadic_parameter_declaration": "OPTIONAL",
    "!": "UNARY_OPERATOR_GENERIC",
    "!=": "COMPARISON_OPERATOR",
    "\"": "STRING",
    "%": "ARITHMETIC_OPERATOR",
    "%=": "ASSIGNMENT_OPERATOR",
    "]": "ARRAY",
    "^": "BITWISE_OPERATOR",
    "^=": "ASSIGNMENT_OPERATOR",
    "_expression": "EXPRESSION_STATEMENT",
    "_simple_statement": "VARIABLE_DECLARATION",
    "_simple_type": "TYPE_ALIAS",
    "_type": "TYPE_ALIAS",
    "`": "STRING",
    "argument_list": "LIST",
    "dec_statement": "VARIABLE_DECLARATION",
    "default": "DEFAULT",
    "default_case": "DEFAULT",
    "defer": "DEFER",
    "defer_statement": "DEFER",
    "&&": "LOGICAL_OPERATOR",
    "&=": "ASSIGNMENT_OPERATOR",
    "&^": "BITWISE_OPERATOR",
    "&^=": "BITWISE_OPERATOR",
    "_statement": "VARIABLE_DECLARATION",
    "&": "BITWISE_OPERATOR",
    "dot": "MEMBER_ACCESS_OPERATOR",
    "else": "ELSE",
    "empty_statement": "EMPTY",
    "escape_sequence": "LITERAL",
    "expression_case": "CASE",
    "expression_list": "LIST",
    "fallthrough": "CASE",
    "fallthrough_statement": "CASE",
    "inc_statement": "UNARY_OPERATION",
    "index_expression": "SUBSCRIPT",
    "int_literal": "INTEGER",
    "interface": "INTERFACE_DECLARATION",
    "interface_type": "TYPE_ALIAS",
    "interpreted_string_literal": "STRING",
    "interpreted_string_literal_content": "STRING",
    "iota": "CONSTANT",
    "keyed_element": "KEY",
    "label_name": "LABEL",
    "receive_statement": "EXPRESSION_STATEMENT",
    "select_statement": "SWITCH",
    "send_statement": "EXPRESSION_STATEMENT",
    "slice_type": "ARRAY",
    "struct_type": "OBJECT",
    "type": "TYPE_ALIAS",
    "{": "BLOCK",
    "|": "BITWISE_OPERATOR",
    "|=": "ASSIGNMENT_OPERATOR",
    "||": "LOGICAL_OPERATOR",
    "}": "BLOCK",
    "~": "BITWISE_OPERATOR"
  },
  "javascript": {
    ")": "SUBSCRIPT_OPERATOR",
    "(": "SUBSCRIPT_OPERATOR",
    "*": "ARITHMETIC_OPERATOR",
    "**": "ARITHMETIC_OPERATOR",
    "**=": "ASSIGNMENT_OPERATOR",
    "*=": "ASSIGNMENT_OPERATOR",
    "+": "ARITHMETIC_OPERATOR",
    "++": "UNARY_OPERATOR_GENERIC",
    "+=": "ASSIGNMENT_OPERATOR",
    "-": "ARITHMETIC_OPERATOR",
    "--": "UNARY_OPERATOR_GENERIC",
    "-=": "ASSIGNMENT_OPERATOR",
    ".": "MEMBER_ACCESS_OPERATOR",
    "...": "SPREAD_OPERATOR",
    "/": "ARITHMETIC_OPERATOR",
    "/=": "ASSIGNMENT_OPERATOR",
    "@": "DECORATOR",
    "[": "ARRAY",
    "!": "UNARY_OPERATOR_GENERIC",
    "!=": "COMPARISON_OPERATOR",
    "!==": "COMPARISON_OPERATOR",
    "${": "STRING",
    "\"": "STRING",
    "%": "ARITHMETIC_OPERATOR",
    "%=": "ASSIGNMENT_OPERATOR",
    "&": "BITWISE_OPERATOR",
    "&&": "LOGICAL_OPERATOR",
    "&&=": "ASSIGNMENT_OPERATOR",
    "&=": "ASSIGNMENT_OPERATOR",
    "'": "CHAR",
    ",": "UNKNOWN",
    "/>": "UNKNOWN",
    ":": "BINARY_OPERATOR_GENERIC",
    ";": "EMPTY",
    "<": "COMPARISON_OPERATOR",
    "</": "UNKNOWN",
    "<<": "BITWISE_OPERATOR",
    "<<=": "ASSIGNMENT_OPERATOR",
    "<=": "COMPARISON_OPERATOR",
    "=": "ASSIGNMENT_OPERATOR",
    "==": "COMPARISON_OPERATOR",
    "===": "COMPARISON_OPERATOR",
    "=>": "LAMBDA_ARROW_OPERATOR",
    ">": "COMPARISON_OPERATOR",
    ">=": "COMPARISON_OPERATOR",
    ">>": "BITWISE_OPERATOR",
    ">>=": "ASSIGNMENT_OPERATOR",
    ">>>": "BITWISE_OPERATOR",
    ">>>=": "ASSIGNMENT_OPERATOR",
    "?": "TERNARY_OPERATOR",
    "??": "LOGICAL_OPERATOR",
    "??=": "ASSIGNMENT_OPERATOR",
    "]": "SUBSCRIPT_OPERATOR",
    "^": "BITWISE_OPERATOR",
    "^=": "ASSIGNMENT_OPERATOR",
    "`": "LITERAL",
    "arguments": "IDENTIFIER",
    "array": "ARRAY",
    "array_pattern": "PATTERN",
    "arrow_function": "LAMBDA",
    "as": "TYPE_OPERATOR",
    "assignment_expression": "ASSIGNMENT",
    "assignment_pattern": "PATTERN",
    "async": "ASYNC",
    "augmented_assignment_expression": "ASSIGNMENT_OPERATOR",
    "await": "AWAIT",
    "await_expression": "AWAIT",
    "binary_expression": "BINARY_OPERATION",
    "break": "BREAK",
    "break_statement": "BREAK",
    "call_expression": "CALL",
    "case": "CASE",
    "catch": "CATCH",
    "catch_clause": "CATCH",
    "class": "CLASS",
    "class_body": "CLASS",
    "class_declaration": "CLASS_DECLARATION",
    "class_heritage": "CLASS_DECLARATION",
    "class_static_block": "CLASS_DECLARATION",
    "comment": "COMMENT",
    "computed_property_name": "PROPERTY_DECLARATION",
    "const": "CONSTANT_DECLARATION",
    "continue": "CONTINUE",
    "continue_statement": "CONTINUE",
    "declaration": "VARIABLE_DECLARATION",
    "decorator": "DECORATOR",
    "default": "DEFAULT",
    "delete": "UNARY_OPERATOR_GENERIC",
    "do": "DO_WHILE",
    "do_statement": "DO_WHILE",
    "else": "ELSE",
    "else_clause": "ELSE",
    "empty_statement": "EMPTY",
    "escape_sequence": "STRING",
    "export": "EXPORT",
    "export_clause": "EXPORT",
    "export_specifier": "EXPORT",
    "export_statement": "EXPORT",
    "expression": "LITERAL",
    "expression_statement": "EXPRESSION_STATEMENT",
    "extends": "CLASS_DECLARATION",
    "false": "BOOLEAN",
    "field_definition": "PROPERTY_DECLARATION",
    "finally": "FINALLY",
    "finally_clause": "FINALLY",
    "for": "LOOP",
    "for_in_statement": "FOR_IN",
    "for_statement": "FOR",
    "formal_parameters": "VARIABLE_DECLARATION",
    "from": "IMPORT",
    "function": "FUNCTION",
    "function_declaration": "FUNCTION_DECLARATION",
    "function_expression": "LAMBDA",
    "generator_function": "FUNCTION",
    "generator_function_declaration": "FUNCTION_DECLARATION",
    "get": "FUNCTION",
    "hash_bang_line": "COMMENT",
    "html_character_reference": "STRING",
    "html_comment": "COMMENT",
    "identifier": "IDENTIFIER",
    "if": "IF",
    "if_statement": "IF",
    "import": "IMPORT",
    "import_attribute": "IDENTIFIER",
    "import_clause": "IMPORT",
    "import_specifier": "IMPORT",
    "import_statement": "IMPORT",
    "in": "BINARY_OPERATOR_GENERIC",
    "instanceof": "TYPE_OPERATOR",
    "jsx_attribute": "PROPERTY_DECLARATION",
    "jsx_element": "OBJECT",
    "jsx_expression": "EXPRESSION_STATEMENT",
    "jsx_namespace_name": "NAMESPACE",
    "jsx_self_closing_element": "OBJECT",
    "jsx_text": "STRING",
    "labeled_statement": "LABEL",
    "let": "VARIABLE_DECLARATION",
    "lexical_declaration": "VARIABLE_DECLARATION",
    "member_expression": "MEMBER_ACCESS",
    "meta": "COMMENT",
    "meta_property": "PROPERTY_DECLARATION",
    "method_definition": "METHOD",
    "named_imports": "IMPORT",
    "namespace_export": "EXPORT",
    "namespace_import": "IMPORT",
    "new": "NEW",
    "new_expression": "NEW",
    "null": "NULL",
    "number": "INTEGER",
    "object": "OBJECT",
    "object_assignment_pattern": "PATTERN",
    "object_pattern": "PATTERN",
    "of": "FOR_OF",
    "optional_chain": "MEMBER_ACCESS_OPERATOR",
    "pair": "TUPLE",
    "pair_pattern": "PATTERN",
    "parenthesized_expression": "EXPRESSION_STATEMENT",
    "pattern": "PATTERN",
    "primary_expression": "LITERAL",
    "private_property_identifier": "IDENTIFIER",
    "program": "GLOBAL",
    "property_identifier": "IDENTIFIER",
    "regex": "REGEXP",
    "regex_flags": "REGEXP",
    "regex_pattern": "REGEXP",
    "rest_pattern": "SPREAD_OPERATOR",
    "return": "RETURN",
    "return_statement": "RETURN",
    "sequence_expression": "EXPRESSION_STATEMENT",
    "set": "PROPERTY_DECLARATION",
    "shorthand_property_identifier": "PROPERTY_DECLARATION",
    "shorthand_property_identifier_pattern": "VARIABLE_DECLARATION",
    "spread_element": "SPREAD_OPERATOR",
    "statement_block": "BLOCK",
    "statement_identifier": "IDENTIFIER",
    "static": "CLASS_FIELD",
    "static get": "METHOD",
    "string": "STRING",
    "string_fragment": "STRING",
    "subscript_expression": "SUBSCRIPT",
    "switch": "SWITCH",
    "switch_body": "BLOCK",
    "switch_case": "CASE",
    "switch_default": "DEFAULT",
    "switch_statement": "SWITCH",
    "target": "IDENTIFIER",
    "template_string": "STRING",
    "template_substitution": "EXPRESSION_STATEMENT",
    "ternary_expression": "CONDITIONAL",
    "this": "IDENTIFIER",
    "throw": "THROW",
    "throw_statement": "THROW",
    "true": "BOOLEAN",
    "try": "TRY",
    "try_statement": "TRY_BLOCK",
    "typeof": "TYPE_OPERATOR",
    "unary_expression": "UNARY_OPERATION",
    "undefined": "NULL",
    "update_expression": "ASSIGNMENT_OPERATOR",
    "var": "VARIABLE_DECLARATION",
    "variable_declaration": "VARIABLE_DECLARATION",
    "variable_declarator": "VARIABLE_DECLARATION",
    "void": "NULL",
    "while": "WHILE",
    "while_statement": "LOOP",
    "with": "WITH",
    "with_statement": "WITH",
    "yield": "YIELD",
    "yield_expression": "YIELD",
    "{": "BLOCK",
    "|": "BITWISE_OPERATOR",
    "|=": "ASSIGNMENT_OPERATOR",
    "||": "LOGICAL_OPERATOR",
    "||=": "ASSIGNMENT_OPERATOR",
    "}": "BLOCK",
    "~": "BITWISE_OPERATOR",
    "jsx_closing_element": "OBJECT",
    "jsx_opening_element": "OBJECT"
  },
  "php": {
    ":": "SUBSCRIPT_OPERATOR",
    ")": "SUBSCRIPT_OPERATOR",
    "*": "ARITHMETIC_OPERATOR",
    "**": "ARITHMETIC_OPERATOR",
    "**=": "ASSIGNMENT_OPERATOR",
    "*=": "ASSIGNMENT_OPERATOR",
    "+": "ARITHMETIC_OPERATOR",
    "++": "UNARY_OPERATOR_GENERIC",
    "+=": "ASSIGNMENT_OPERATOR",
    "-": "ARITHMETIC_OPERATOR",
    "--": "UNARY_OPERATOR_GENERIC",
    "-=": "ASSIGNMENT_OPERATOR",
    "->": "MEMBER_ACCESS_OPERATOR",
    ".": "BINARY_OPERATOR_GENERIC",
    "...": "SPREAD_OPERATOR",
    ".=": "ASSIGNMENT_OPERATOR",
    "/": "ARITHMETIC_OPERATOR",
    "/=": "ASSIGNMENT_OPERATOR",
    "::": "MEMBER_ACCESS_OPERATOR",
    ";": "EMPTY",
    "<": "COMPARISON_OPERATOR",
    "<<": "BITWISE_OPERATOR",
    "<<<": "LITERAL",
    "<<=": "ASSIGNMENT_OPERATOR",
    "<=": "COMPARISON_OPERATOR",
    "<=>": "COMPARISON_OPERATOR",
    "<>": "COMPARISON_OPERATOR",
    "=": "ASSIGNMENT_OPERATOR",
    "==": "COMPARISON_OPERATOR",
    "===": "COMPARISON_OPERATOR",
    "=>": "LAMBDA_ARROW_OPERATOR",
    ">": "COMPARISON_OPERATOR",
    ">=": "COMPARISON_OPERATOR",
    ">>": "BITWISE_OPERATOR",
    ">>=": "ASSIGNMENT_OPERATOR",
    "?": "TERNARY_OPERATOR",
    "(": "FUNCTION",
    "?->": "MEMBER_ACCESS_OPERATOR",
    "??": "CONDITIONAL",
    "??=": "ASSIGNMENT_OPERATOR",
    "@": "UNARY_OPERATOR_GENERIC",
    "[": "SUBSCRIPT_OPERATOR",
    "!": "UNARY_OPERATOR_GENERIC",
    "!==": "COMPARISON_OPERATOR",
    "!=": "COMPARISON_OPERATOR",
    "\"": "STRING",
    "#[": "ANNOTATION",
    "$": "VARIABLE",
    "%": "ARITHMETIC_OPERATOR",
    "%=": "ASSIGNMENT_OPERATOR",
    "&": "BITWISE_OPERATOR",
    "&&": "LOGICAL_OPERATOR",
    "&=": "ASSIGNMENT_OPERATOR",
    "'": "STRING",
    ",": "UNKNOWN",
    "?>": "UNKNOWN",
    "\\": "NAMESPACE",
    "]": "SUBSCRIPT_OPERATOR",
    "^": "BITWISE_OPERATOR",
    "^=": "ASSIGNMENT_OPERATOR",
    "`": "UNKNOWN",
    "abstract": "CLASS_DECLARATION",
    "abstract_modifier": "CLASS_DECLARATION",
    "and": "LOGICAL_OPERATOR",
    "anonymous_class": "CLASS_DECLARATION",
    "anonymous_function": "LAMBDA",
    "anonymous_function_use_clause": "VARIABLE_DECLARATION",
    "argument": "VARIABLE",
    "arguments": "LIST",
    "array": "ARRAY",
    "array_creation_expression": "ARRAY",
    "array_element_initializer": "VALUE",
    "arrow_function": "LAMBDA",
    "as": "TYPE_OPERATOR",
    "assignment_expression": "ASSIGNMENT",
    "attribute": "ANNOTATION",
    "attribute_group": "ANNOTATION_DECLARATION",
    "attribute_list": "ANNOTATION_DECLARATION",
    "augmented_assignment_expression": "ASSIGNMENT_OPERATOR",
    "base_clause": "CLASS_DECLARATION",
    "binary_expression": "BINARY_OPERATION",
    "bool": "BOOLEAN",
    "boolean": "BOOLEAN",
    "bottom_type": "TYPE_ALIAS",
    "break": "BREAK",
    "break_statement": "BREAK",
    "by_ref": "REFERENCE_OPERATOR",
    "callable": "FUNCTION",
    "case": "CASE",
    "case_statement": "CASE",
    "cast_expression": "CAST",
    "cast_type": "CAST",
    "catch": "CATCH",
    "catch_clause": "CATCH",
    "class": "CLASS_DECLARATION",
    "class_constant_access_expression": "CONSTANT",
    "class_declaration": "CLASS_DECLARATION",
    "class_interface_clause": "INTERFACE_DECLARATION",
    "clone_expression": "OBJECT",
    "colon_block": "BLOCK",
    "comment": "COMMENT",
    "compound_statement": "BLOCK",
    "conditional_expression": "CONDITIONAL",
    "const": "CONSTANT_DECLARATION",
    "const_declaration": "CONSTANT_DECLARATION",
    "const_element": "CONSTANT",
    "continue": "CONTINUE",
    "continue_statement": "CONTINUE",
    "declaration_list": "NAMESPACE_DECLARATION",
    "default": "DEFAULT",
    "default_statement": "DEFAULT",
    "disjunctive_normal_form_type": "UNKNOWN",
    "do": "DO_WHILE",
    "do_statement": "LOOP",
    "dynamic_variable_name": "VARIABLE",
    "echo": "EXPRESSION_STATEMENT",
    "echo_statement": "EXPRESSION_STATEMENT",
    "else": "ELSE",
    "else_clause": "ELSE",
    "else_if_clause": "ELIF",
    "elseif": "ELIF",
    "empty_statement": "EMPTY",
    "encapsed_string": "STRING",
    "encoding": "LITERAL",
    "enddeclare": "BLOCK",
    "endfor": "LOOP",
    "endforeach": "LOOP",
    "endif": "IF",
    "endswitch": "SWITCH",
    "endwhile": "LOOP",
    "enum": "ENUM_DECLARATION",
    "enum_case": "ENUM_DECLARATION",
    "enum_declaration": "ENUM_DECLARATION",
    "enum_declaration_list": "ENUM_DECLARATION",
    "error_suppression_expression": "UNARY_OPERATION",
    "escape_sequence": "STRING",
    "expression": "EXPRESSION_STATEMENT",
    "expression_statement": "EXPRESSION_STATEMENT",
    "extends": "CLASS_DECLARATION",
    "false": "BOOLEAN",
    "finally": "FINALLY",
    "finally_clause": "FINALLY",
    "float": "FLOAT",
    "fn": "LAMBDA",
    "for": "LOOP",
    "for_statement": "LOOP",
    "foreach": "LOOP",
    "foreach_statement": "LOOP",
    "formal_parameters": "VARIABLE_DECLARATION",
    "from": "IMPORT",
    "function": "FUNCTION_DECLARATION",
    "function_call_expression": "CALL",
    "function_definition": "FUNCTION_DECLARATION",
    "function_static_declaration": "METHOD",
    "global": "GLOBAL",
    "global_declaration": "GLOBAL",
    "goto": "GOTO",
    "goto_statement": "GOTO",
    "heredoc": "STRING",
    "heredoc_body": "STRING",
    "heredoc_end": "STRING",
    "heredoc_start": "STRING",
    "if": "IF",
    "if_statement": "IF",
    "implements": "INTERFACE_DECLARATION",
    "include": "IMPORT",
    "include_expression": "IMPORT",
    "include_once": "IMPORT",
    "include_once_expression": "IMPORT",
    "instanceof": "TYPE_OPERATOR",
    "int": "TYPE_ALIAS",
    "integer": "INTEGER",
    "interface": "INTERFACE_DECLARATION",
    "interface_declaration": "INTERFACE_DECLARATION",
    "intersection_type": "INTERSECTION",
    "iterable": "LIST",
    "list": "LIST",
    "list_literal": "ARRAY",
    "literal": "LITERAL",
    "match": "SWITCH",
    "match_block": "BLOCK",
    "match_condition_list": "LIST",
    "match_conditional_expression": "PATTERN_MATCH",
    "match_default_expression": "DEFAULT",
    "match_expression": "PATTERN_MATCH",
    "member_access_expression": "MEMBER_ACCESS",
    "member_call_expression": "METHOD",
    "method_declaration": "METHOD",
    "mixed": "UNION",
    "name": "IDENTIFIER",
    "named_label_statement": "LABEL",
    "named_type": "TYPE_ALIAS",
    "namespace": "NAMESPACE_DECLARATION",
    "namespace_definition": "NAMESPACE_DECLARATION",
    "namespace_name": "NAMESPACE",
    "namespace_use_clause": "IMPORT",
    "namespace_use_declaration": "IMPORT",
    "namespace_use_group": "IMPORT",
    "new": "NEW",
    "nowdoc": "STRING",
    "nowdoc_body": "STRING",
    "nowdoc_string": "STRING",
    "null": "NULL",
    "nullsafe_member_access_expression": "MEMBER_ACCESS",
    "nullsafe_member_call_expression": "METHOD",
    "object_creation_expression": "OBJECT",
    "operation": "BINARY_OPERATION",
    "optional_type": "OPTIONAL",
    "or": "LOGICAL_OPERATOR",
    "pair": "MAP",
    "parent": "NAMESPACE_DECLARATION",
    "parenthesized_expression": "EXPRESSION_STATEMENT",
    "php_tag": "MODULE_DECLARATION",
    "primary_expression": "LITERAL",
    "primitive_type": "TYPE_ALIAS",
    "print": "EXPRESSION_STATEMENT",
    "print_intrinsic": "FUNCTION",
    "program": "MODULE_DECLARATION",
    "property_declaration": "PROPERTY_DECLARATION",
    "property_element": "PROPERTY_DECLARATION",
    "property_hook": "METHOD",
    "property_hook_list": "LIST",
    "property_promotion_parameter": "VARIABLE_DECLARATION",
    "protected": "LOGICAL_OPERATOR",
    "qualified_name": "NAMESPACE",
    "readonly": "ANNOTATION",
    "reference_assignment_expression": "ASSIGNMENT",
    "reference_modifier": "REFERENCE_OPERATOR",
    "relative_name": "NAMESPACE",
    "relative_scope": "NAMESPACE",
    "require": "IMPORT",
    "require_expression": "IMPORT",
    "require_once": "IMPORT",
    "require_once_expression": "IMPORT",
    "return": "RETURN",
    "return_statement": "RETURN",
    "scoped_call_expression": "CALL",
    "scoped_property_access_expression": "MEMBER_ACCESS",
    "sequence_expression": "EXPRESSION_STATEMENT",
    "shell_command_expression": "EXPRESSION_STATEMENT",
    "simple_parameter": "VARIABLE",
    "statement": "EXPRESSION_STATEMENT",
    "static": "CLASS_FIELD",
    "static_modifier": "CLASS_FIELD",
    "static_variable_declaration": "VARIABLE_DECLARATION",
    "string": "STRING",
    "string_content": "STRING",
    "subscript_expression": "SUBSCRIPT",
    "switch": "SWITCH",
    "switch_block": "SWITCH",
    "switch_statement": "SWITCH",
    "text": "STRING",
    "text_interpolation": "STRING",
    "throw": "THROW",
    "throw_expression": "THROW",
    "ticks": "UNKNOWN",
    "trait": "TRAIT",
    "trait_declaration": "TRAIT",
    "true": "BOOLEAN",
    "try": "TRY_BLOCK",
    "try_statement": "TRY",
    "type": "TYPE_ALIAS_DECLARATION",
    "type_list": "UNION",
    "unary_op_expression": "UNARY_OPERATION",
    "union_type": "UNION",
    "update_expression": "EXPRESSION_STATEMENT",
    "use": "IMPORT",
    "use_as_clause": "IMPORT",
    "use_declaration": "IMPORT",
    "use_instead_of_clause": "IMPORT",
    "use_list": "IMPORT",
    "variable_name": "VARIABLE",
    "variadic_parameter": "VARIABLE_DECLARATION",
    "variadic_placeholder": "VARIABLE",
    "variadic_unpacking": "SPREAD_OPERATOR",
    "void": "NULL",
    "while": "WHILE",
    "while_statement": "WHILE",
    "xor": "BITWISE_OPERATOR",
    "yield": "YIELD",
    "yield_expression": "YIELD",
    "{": "BLOCK",
    "|": "BITWISE_OPERATOR",
    "|=": "ASSIGNMENT_OPERATOR",
    "||": "LOGICAL_OPERATOR",
    "~": "BITWISE_OPERATOR",
    "public": "CLASS_FIELD"
  },
  "rust": {
    "-=": "ASSIGNMENT_OPERATOR",
    "->": "LAMBDA_ARROW_OPERATOR",
    ".": "MEMBER_ACCESS_OPERATOR",
    "..": "RANGE",
    "...": "RANGE",
    "..=": "RANGE",
    "/": "ARITHMETIC_OPERATOR",
    "/*": "COMMENT",
    "//": "COMMENT",
    "/=": "ASSIGNMENT_OPERATOR",
    ">": "COMPARISON_OPERATOR",
    ">=": "COMPARISON_OPERATOR",
    ">>": "BITWISE_OPERATOR",
    ">>=": "ASSIGNMENT_OPERATOR",
    "?": "TERNARY_OPERATOR",
    "@": "ANNOTATION",
    "[": "SUBSCRIPT_OPERATOR",
    "(": "BLOCK",
    ")": "BLOCK",
    "*": "POINTER",
    "*/": "COMMENT",
    "*=": "ASSIGNMENT_OPERATOR",
    "+": "ARITHMETIC_OPERATOR",
    "+=": "ASSIGNMENT_OPERATOR",
    ",": "UNKNOWN",
    "-": "ARITHMETIC_OPERATOR",
    "::": "MEMBER_ACCESS_OPERATOR",
    "!": "LOGICAL_OPERATOR",
    "#": "ANNOTATION",
    "$": "VARIABLE",
    "!=": "COMPARISON_OPERATOR",
    "\"": "STRING",
    "%": "ARITHMETIC_OPERATOR",
    "%=": "ASSIGNMENT_OPERATOR",
    "&": "REFERENCE_OPERATOR",
    "&&": "LOGICAL_OPERATOR",
    "'": "CHAR",
    ";": "EMPTY",
    "<": "COMPARISON_OPERATOR",
    "<<": "BITWISE_OPERATOR",
    "<<=": "ASSIGNMENT_OPERATOR",
    "<=": "COMPARISON_OPERATOR",
    "=": "ASSIGNMENT_OPERATOR",
    "==": "COMPARISON_OPERATOR",
    "=>": "LAMBDA_ARROW_OPERATOR",
    "]": "SUBSCRIPT_OPERATOR",
    "^": "BITWISE_OPERATOR",
    "^=": "ASSIGNMENT_OPERATOR",
    "_": "PATTERN",
    "_declaration_statement": "VARIABLE_DECLARATION",
    "_expression": "EXPRESSION_STATEMENT",
    "_literal": "LITERAL",
    "_literal_pattern": "PATTERN",
    "_pattern": "PATTERN",
    "_type": "TYPE_ALIAS",
    "abstract_type": "TRAIT",
    "arguments": "LIST",
    "array_expression": "ARRAY",
    "array_type": "ARRAY",
    "as": "TYPE_OPERATOR",
    "assignment_expression": "ASSIGNMENT",
    "associated_type": "TYPE_ALIAS",
    "async": "ASYNC",
    "async_block": "BLOCK",
    "attribute": "ANNOTATION",
    "attribute_item": "ANNOTATION",
    "await": "AWAIT",
    "await_expression": "AWAIT",
    "base_field_initializer": "CLASS_FIELD",
    "binary_expression": "BINARY_OPERATION",
    "block": "BLOCK",
    "block_comment": "COMMENT",
    "boolean_literal": "BOOLEAN",
    "bounded_type": "GENERIC",
    "bracketed_type": "TUPLE",
    "break": "BREAK",
    "break_expression": "BREAK",
    "call_expression": "CALL",
    "captured_pattern": "PATTERN",
    "char_literal": "CHAR",
    "closure_expression": "LAMBDA",
    "closure_parameters": "LAMBDA",
    "compound_assignment_expr": "ASSIGNMENT_OPERATOR",
    "const": "CONSTANT_DECLARATION",
    "const_block": "BLOCK",
    "const_item": "CONSTANT_DECLARATION",
    "const_parameter": "CONSTANT",
    "continue": "CONTINUE",
    "continue_expression": "CONTINUE",
    "crate": "MODULE_DECLARATION",
    "declaration_list": "LIST",
    "default": "DEFAULT",
    "doc_comment": "DOCSTRING",
    "dyn": "TRAIT",
    "dynamic_type": "GENERIC",
    "else": "ELSE",
    "else_clause": "ELSE",
    "empty_statement": "EMPTY",
    "enum": "ENUM_DECLARATION",
    "enum_item": "ENUM_DECLARATION",
    "enum_variant": "ENUM_DECLARATION",
    "enum_variant_list": "ENUM_DECLARATION",
    "escape_sequence": "CHAR",
    "expr": "EXPRESSION_STATEMENT",
    "expr_2021": "EXPRESSION_STATEMENT",
    "expression_statement": "EXPRESSION_STATEMENT",
    "extern": "IMPORT",
    "extern_crate_declaration": "IMPORT",
    "extern_modifier": "MODULE_DECLARATION",
    "false": "BOOLEAN",
    "field_declaration": "CLASS_FIELD",
    "field_declaration_list": "OBJECT",
    "field_expression": "MEMBER_ACCESS",
    "field_identifier": "MEMBER_ACCESS",
    "field_initializer": "ASSIGNMENT",
    "field_initializer_list": "OBJECT",
    "field_pattern": "PATTERN",
    "float_literal": "FLOAT",
    "fn": "FUNCTION_DECLARATION",
    "for": "LOOP",
    "for_expression": "LOOP",
    "for_lifetimes": "LOOP",
    "foreign_mod_item": "MODULE_DECLARATION",
    "fragment_specifier": "MACRO_DECLARATION",
    "function_item": "FUNCTION_DECLARATION",
    "function_modifiers": "FUNCTION_DECLARATION",
    "function_signature_item": "FUNCTION_DECLARATION",
    "function_type": "TYPE_ALIAS",
    "gen": "UNKNOWN",
    "gen_block": "BLOCK",
    "generic_function": "GENERIC",
    "generic_pattern": "PATTERN",
    "generic_type": "GENERIC",
    "generic_type_with_turbofish": "GENERIC",
    "higher_ranked_trait_bound": "TRAIT",
    "ident": "IDENTIFIER",
    "identifier": "IDENTIFIER",
    "if": "IF",
    "if_expression": "CONDITIONAL",
    "impl": "METHOD",
    "impl_item": "METHOD",
    "in": "PATTERN_MATCH",
    "index_expression": "SUBSCRIPT",
    "inner_attribute_item": "ANNOTATION",
    "inner_doc_comment_marker": "COMMENT",
    "integer_literal": "INTEGER",
    "item": "MODULE_DECLARATION",
    "label": "LABEL",
    "let": "VARIABLE_DECLARATION",
    "let_chain": "VARIABLE_DECLARATION",
    "let_condition": "CONDITIONAL",
    "let_declaration": "VARIABLE_DECLARATION",
    "lifetime": "REFERENCE",
    "lifetime_parameter": "GENERIC",
    "line_comment": "COMMENT",
    "literal": "LITERAL",
    "loop": "LOOP",
    "loop_expression": "LOOP",
    "macro_definition": "MACRO_DECLARATION",
    "macro_invocation": "MACRO_DECLARATION",
    "macro_rule": "MACRO_DECLARATION",
    "macro_rules!": "MACRO_DECLARATION",
    "match": "PATTERN_MATCH",
    "match_arm": "CASE",
    "match_block": "PATTERN",
    "match_expression": "PATTERN_MATCH",
    "match_pattern": "PATTERN_MATCH",
    "meta": "ANNOTATION",
    "metavariable": "MACRO_DECLARATION",
    "mod": "MODULE_DECLARATION",
    "mod_item": "MODULE_DECLARATION",
    "mut_pattern": "PATTERN",
    "mutable_specifier": "REFERENCE_OPERATOR",
    "negative_literal": "LITERAL",
    "never_type": "TYPE_ALIAS",
    "or_pattern": "PATTERN",
    "ordered_field_declaration_list": "LIST",
    "outer_doc_comment_marker": "COMMENT",
    "parameter": "VARIABLE_DECLARATION",
    "parameters": "VARIABLE_DECLARATION",
    "parenthesized_expression": "EXPRESSION_STATEMENT",
    "pat": "PATTERN",
    "pat_param": "PATTERN",
    "path": "NAMESPACE",
    "pointer_type": "POINTER",
    "primitive_type": "TYPE_ALIAS",
    "qualified_type": "GENERIC",
    "range_expression": "RANGE",
    "range_pattern": "RANGE",
    "raw": "IDENTIFIER",
    "raw_string_literal": "STRING",
    "ref": "REFERENCE_OPERATOR",
    "ref_pattern": "PATTERN",
    "reference_expression": "REFERENCE",
    "reference_pattern": "PATTERN",
    "reference_type": "REFERENCE",
    "remaining_field_pattern": "PATTERN",
    "removed_trait_bound": "TRAIT",
    "return": "RETURN",
    "return_expression": "RETURN",
    "scoped_identifier": "NAMESPACE",
    "scoped_type_identifier": "TYPE_ALIAS",
    "scoped_use_list": "IMPORT",
    "self": "REFERENCE",
    "self_parameter": "REFERENCE",
    "shebang": "COMMENT",
    "shorthand_field_identifier": "IDENTIFIER",
    "shorthand_field_initializer": "OBJECT",
    "slice_pattern": "PATTERN",
    "source_file": "MODULE_DECLARATION",
    "static": "CONSTANT_DECLARATION",
    "static_item": "CONSTANT_DECLARATION",
    "string_content": "STRING",
    "string_literal": "STRING",
    "struct": "STRUCT_DECLARATION",
    "struct_expression": "OBJECT",
    "struct_item": "CLASS_FIELD",
    "struct_pattern": "PATTERN",
    "super": "NAMESPACE",
    "token_binding_pattern": "PATTERN",
    "token_repetition": "MACRO_DECLARATION",
    "token_repetition_pattern": "PATTERN",
    "token_tree": "MACRO_DECLARATION",
    "token_tree_pattern": "PATTERN",
    "trait": "TRAIT",
    "trait_bounds": "TRAIT",
    "trait_item": "TRAIT",
    "true": "BOOLEAN",
    "try": "TRY",
    "try_block": "TRY_BLOCK",
    "try_expression": "TRY",
    "tt": "UNKNOWN",
    "tuple_expression": "TUPLE",
    "tuple_pattern": "TUPLE",
    "tuple_struct_pattern": "PATTERN",
    "tuple_type": "TUPLE",
    "ty": "TYPE_ALIAS",
    "type": "TYPE_ALIAS",
    "type_arguments": "GENERIC",
    "type_binding": "TYPE_ALIAS",
    "type_cast_expression": "CAST",
    "type_identifier": "TYPE_ALIAS",
    "type_item": "TYPE_ALIAS_DECLARATION",
    "type_parameter": "GENERIC",
    "type_parameters": "GENERIC",
    "unary_expression": "UNARY_OPERATION",
    "union": "UNION",
    "union_item": "UNION",
    "unit_expression": "NULL",
    "unit_type": "TYPE_ALIAS",
    "unsafe": "BLOCK",
    "unsafe_block": "BLOCK",
    "use": "IMPORT",
    "use_as_clause": "TYPE_ALIAS_DECLARATION",
    "use_bounds": "GENERIC",
    "use_declaration": "IMPORT",
    "use_list": "IMPORT",
    "use_wildcard": "IMPORT",
    "variadic_parameter": "VARIABLE_DECLARATION",
    "vis": "VARIABLE_DECLARATION",
    "where": "PATTERN_MATCH",
    "where_clause": "GENERIC",
    "where_predicate": "TRAIT",
    "while": "LOOP",
    "while_expression": "LOOP",
    "yield": "YIELD",
    "yield_expression": "YIELD",
    "{": "BLOCK",
    "|": "PATTERN_MATCH",
    "||": "LOGICAL_OPERATOR",
    "}": "BLOCK",
    "stmt": "EXPRESSION_STATEMENT"
  },
  "typescript": {
    ")": "BINARY_OPERATION",
    "(": "BINARY_OPERATION",
    "*": "ARITHMETIC_OPERATOR",
    "**": "ARITHMETIC_OPERATOR",
    "**=": "ASSIGNMENT_OPERATOR",
    "*=": "ASSIGNMENT_OPERATOR",
    "+": "ARITHMETIC_OPERATOR",
    "++": "UNARY_OPERATION",
    "/=": "ASSIGNMENT_OPERATOR",
    ":": "ANNOTATION",
    ";": "EMPTY",
    "<": "COMPARISON_OPERATOR",
    "<<": "BITWISE_OPERATOR",
    "<<=": "ASSIGNMENT_OPERATOR",
    "<=": "COMPARISON_OPERATOR",
    "=": "ASSIGNMENT_OPERATOR",
    "==": "COMPARISON_OPERATOR",
    "===": "COMPARISON_OPERATOR",
    "??": "OPTIONAL",
    "??=": "ASSIGNMENT_OPERATOR",
    "@": "DECORATOR",
    "[": "SUBSCRIPT_OPERATOR",
    "!": "UNARY_OPERATOR_GENERIC",
    "!==": "COMPARISON_OPERATOR",
    "${": "STRING",
    "!=": "COMPARISON_OPERATOR",
    "\"": "STRING",
    "%": "ARITHMETIC_OPERATOR",
    "%=": "ASSIGNMENT_OPERATOR",
    "&": "BITWISE_OPERATOR",
    "&&": "LOGICAL_OPERATOR",
    "&&=": "ASSIGNMENT_OPERATOR",
    "&=": "ASSIGNMENT_OPERATOR",
    "'": "CHAR",
    "-": "UNARY_OPERATOR_GENERIC",
    "--": "UNARY_OPERATOR_GENERIC",
    "-=": "ASSIGNMENT_OPERATOR",
    ".": "MEMBER_ACCESS_OPERATOR",
    "...": "SPREAD_OPERATOR",
    "/": "ARITHMETIC_OPERATOR",
    "=>": "LAMBDA_ARROW_OPERATOR",
    ">": "COMPARISON_OPERATOR",
    ">=": "COMPARISON_OPERATOR",
    ">>": "BITWISE_OPERATOR",
    ">>=": "ASSIGNMENT_OPERATOR",
    ">>>": "BITWISE_OPERATOR",
    ">>>=": "ASSIGNMENT_OPERATOR",
    "?": "TERNARY_OPERATOR",
    "?.": "BINARY_OPERATOR_GENERIC",
    "?:": "TERNARY_OPERATOR",
    "]": "SUBSCRIPT_OPERATOR",
    "^": "BITWISE_OPERATOR",
    "^=": "ASSIGNMENT_OPERATOR",
    "abstract": "CLASS_DECLARATION",
    "abstract_class_declaration": "CLASS_DECLARATION",
    "abstract_method_signature": "METHOD",
    "accessor": "METHOD",
    "adding_type_annotation": "ANNOTATION",
    "any": "TYPE_ALIAS",
    "arguments": "ARRAY",
    "array": "ARRAY",
    "array_pattern": "ARRAY",
    "array_type": "ARRAY",
    "arrow_function": "LAMBDA",
    "as": "TYPE_OPERATOR",
    "as_expression": "CAST",
    "assert": "ASSERT",
    "asserts": "ASSERT",
    "asserts_annotation": "ANNOTATION",
    "assignment_expression": "ASSIGNMENT",
    "assignment_pattern": "PATTERN",
    "async": "ASYNC",
    "augmented_assignment_expression": "ASSIGNMENT_OPERATOR",
    "await": "AWAIT",
    "await_expression": "AWAIT",
    "binary_expression": "BINARY_OPERATION",
    "boolean": "BOOLEAN",
    "break": "BREAK",
    "break_statement": "BREAK",
    "call_expression": "CALL",
    "call_signature": "FUNCTION_DECLARATION",
    "case": "CASE",
    "catch": "CATCH",
    "catch_clause": "CATCH",
    "class": "CLASS_DECLARATION",
    "class_body": "CLASS",
    "class_declaration": "CLASS_DECLARATION",
    "class_heritage": "CLASS_DECLARATION",
    "class_static_block": "BLOCK",
    "comment": "COMMENT",
    "computed_property_name": "OBJECT",
    "conditional_type": "CONDITIONAL",
    "const": "CONSTANT_DECLARATION",
    "constraint": "GENERIC",
    "construct_signature": "FUNCTION_DECLARATION",
    "constructor_type": "TYPE_ALIAS",
    "continue": "CONTINUE",
    "continue_statement": "CONTINUE",
    "declaration": "VARIABLE_DECLARATION",
    "decorator": "DECORATOR",
    "default": "DEFAULT",
    "default_type": "GENERIC",
    "delete": "UNARY_OPERATOR_GENERIC",
    "do": "DO_WHILE",
    "do_statement": "DO_WHILE",
    "else": "ELSE",
    "else_clause": "ELSE",
    "empty_statement": "EMPTY",
    "enum": "ENUM_DECLARATION",
    "enum_assignment": "ASSIGNMENT",
    "enum_body": "ENUM_DECLARATION",
    "enum_declaration": "ENUM_DECLARATION",
    "escape_sequence": "CHAR",
    "existential_type": "UNKNOWN",
    "export": "EXPORT",
    "export_clause": "EXPORT",
    "export_specifier": "EXPORT",
    "export_statement": "EXPORT",
    "expression": "EXPRESSION_STATEMENT",
    "expression_statement": "EXPRESSION_STATEMENT",
    "extends": "CLASS_DECLARATION",
    "extends_clause": "CLASS_DECLARATION",
    "extends_type_clause": "INTERSECTION",
    "false": "BOOLEAN",
    "finally": "FINALLY",
    "finally_clause": "FINALLY",
    "flow_maybe_type": "OPTIONAL",
    "for": "LOOP",
    "for_in_statement": "FOR_IN",
    "for_statement": "LOOP",
    "formal_parameters": "LIST",
    "from": "IMPORT",
    "function": "FUNCTION_DECLARATION",
    "function_declaration": "FUNCTION_DECLARATION",
    "function_expression": "LAMBDA",
    "function_signature": "FUNCTION_DECLARATION",
    "function_type": "FUNCTION_DECLARATION",
    "generator_function": "FUNCTION_DECLARATION",
    "generator_function_declaration": "FUNCTION_DECLARATION",
    "generic_type": "GENERIC",
    "get": "FUNCTION",
    "global": "GLOBAL",
    "hash_bang_line": "COMMENT",
    "html_comment": "COMMENT",
    "identifier": "IDENTIFIER",
    "if": "IF",
    "if_statement": "IF",
    "implements": "INTERFACE_DECLARATION",
    "implements_clause": "INTERFACE_DECLARATION",
    "import": "IMPORT",
    "import_alias": "IMPORT",
    "import_attribute": "MODULE",
    "import_clause": "IMPORT",
    "import_require_clause": "IMPORT",
    "import_specifier": "IMPORT",
    "import_statement": "IMPORT",
    "index_signature": "MAP",
    "index_type_query": "TYPE_OPERATOR",
    "infer": "TYPE_OPERATOR",
    "infer_type": "TYPE_ALIAS",
    "instanceof": "TYPE_OPERATOR",
    "instantiation_expression": "NEW",
    "interface": "INTERFACE_DECLARATION",
    "interface_body": "INTERFACE_DECLARATION",
    "interface_declaration": "INTERFACE_DECLARATION",
    "internal_module": "MODULE_DECLARATION",
    "intersection_type": "INTERSECTION",
    "is": "TYPE_OPERATOR",
    "keyof": "TYPE_OPERATOR",
    "labeled_statement": "LABEL",
    "let": "VARIABLE_DECLARATION",
    "lexical_declaration": "VARIABLE_DECLARATION",
    "literal_type": "TYPE_ALIAS",
    "lookup_type": "TYPE_OPERATOR",
    "mapped_type_clause": "TYPE_ALIAS_DECLARATION",
    "member_expression": "MEMBER_ACCESS",
    "meta": "ANNOTATION",
    "meta_property": "DECORATOR",
    "method_definition": "METHOD",
    "method_signature": "METHOD",
    "module": "MODULE_DECLARATION",
    "named_imports": "IMPORT",
    "namespace": "NAMESPACE_DECLARATION",
    "namespace_export": "NAMESPACE_DECLARATION",
    "namespace_import": "NAMESPACE_DECLARATION",
    "nested_identifier": "MEMBER_ACCESS",
    "nested_type_identifier": "TYPE_ALIAS",
    "never": "TYPE_ALIAS",
    "new": "NEW",
    "new_expression": "NEW",
    "non_null_expression": "UNARY_OPERATION",
    "null": "NULL",
    "number": "LITERAL",
    "object": "OBJECT",
    "object_assignment_pattern": "OBJECT",
    "object_pattern": "OBJECT",
    "object_type": "OBJECT",
    "of": "FOR_OF",
    "omitting_type_annotation": "ANNOTATION",
    "opting_type_annotation": "ANNOTATION",
    "optional_chain": "MEMBER_ACCESS_OPERATOR",
    "optional_parameter": "OPTIONAL",
    "optional_type": "OPTIONAL",
    "override": "ANNOTATION",
    "override_modifier": "ANNOTATION",
    "pair": "TUPLE",
    "pair_pattern": "PATTERN",
    "parenthesized_expression": "EXPRESSION_STATEMENT",
    "parenthesized_type": "TYPE_ALIAS",
    "pattern": "PATTERN_MATCH",
    "predefined_type": "TYPE_ALIAS",
    "primary_expression": "LITERAL",
    "primary_type": "TYPE_ALIAS",
    "private_property_identifier": "CLASS_FIELD",
    "program": "MODULE_DECLARATION",
    "property_identifier": "KEY",
    "property_signature": "PROPERTY_DECLARATION",
    "public_field_definition": "CLASS_FIELD",
    "readonly_type": "TYPE_ALIAS",
    "regex": "REGEXP",
    "regex_flags": "REGEXP",
    "regex_pattern": "REGEXP",
    "require": "IMPORT",
    "required_parameter": "VARIABLE_DECLARATION",
    "rest_pattern": "PATTERN",
    "rest_type": "TYPE_ALIAS",
    "return": "RETURN",
    "return_statement": "RETURN",
    "satisfies": "TYPE_OPERATOR",
    "satisfies_expression": "TYPE_OPERATOR",
    "sequence_expression": "LIST",
    "set": "SET",
    "shorthand_property_identifier": "KEY",
    "shorthand_property_identifier_pattern": "PATTERN",
    "spread_element": "SPREAD_OPERATOR",
    "statement_block": "BLOCK",
    "statement_identifier": "IDENTIFIER",
    "static": "CLASS_FIELD",
    "string": "STRING",
    "string_fragment": "STRING",
    "subscript_expression": "SUBSCRIPT",
    "switch": "SWITCH",
    "switch_body": "SWITCH",
    "switch_case": "CASE",
    "switch_default": "DEFAULT",
    "switch_statement": "SWITCH",
    "symbol": "SYMBOL",
    "target": "IDENTIFIER",
    "template_literal_type": "STRING",
    "template_string": "STRING",
    "template_substitution": "STRING",
    "template_type": "GENERIC",
    "ternary_expression": "CONDITIONAL",
    "this_type": "TYPE_ALIAS",
    "throw": "THROW",
    "throw_statement": "THROW",
    "true": "BOOLEAN",
    "try": "TRY_BLOCK",
    "try_statement": "TRY_BLOCK",
    "tuple_type": "TUPLE",
    "type": "TYPE_ALIAS",
    "type_alias_declaration": "TYPE_ALIAS_DECLARATION",
    "type_annotation": "ANNOTATION",
    "type_arguments": "GENERIC",
    "type_assertion": "CAST",
    "type_identifier": "TYPE_ALIAS",
    "type_parameter": "GENERIC",
    "type_parameters": "GENERIC",
    "type_predicate": "TYPE_OPERATOR",
    "type_predicate_annotation": "ANNOTATION",
    "type_query": "TYPE_OPERATOR",
    "typeof": "TYPE_OPERATOR",
    "unary_expression": "UNARY_OPERATION",
    "undefined": "NULL",
    "union_type": "UNION",
    "unique symbol": "SYMBOL",
    "unknown": "UNKNOWN",
    "update_expression": "UNARY_OPERATION",
    "using": "IMPORT",
    "var": "VARIABLE_DECLARATION",
    "variable_declaration": "VARIABLE_DECLARATION",
    "variable_declarator": "VARIABLE_DECLARATION",
    "void": "NULL",
    "while": "WHILE",
    "while_statement": "LOOP",
    "with": "WITH",
    "with_statement": "WITH",
    "yield": "YIELD",
    "yield_expression": "YIELD",
    "{": "BLOCK",
    "{|": "UNION",
    "|": "BITWISE_OPERATOR",
    "||": "LOGICAL_OPERATOR",
    "||=": "ASSIGNMENT_OPERATOR",
    "|}": "SYMBOL",
    "}": "BLOCK",
    "~": "BITWISE_OPERATOR",
    "+?:": "TERNARY_OPERATOR",
    "private": "ANNOTATION",
    "protected": "LOGICAL_OPERATOR"
  },
  "failed_nodes": {}
}