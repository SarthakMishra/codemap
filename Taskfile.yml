version: "3"

vars:
  PYTHON: python3
  VENV_DIR: .venv
  SRC_DIR: src
  TESTS_DIR: tests
  COV_MODULE: src/codemap
  # Platform-specific vars
  VENV_BIN:
    sh: echo "{{if eq OS \"windows\"}}Scripts{{else}}bin{{end}}"
  VENV_ACTIVATE:
    sh: echo "{{if eq OS \"windows\"}}{{.VENV_DIR}}\\Scripts\\activate{{else}}source {{.VENV_DIR}}/bin/activate{{end}}"

tasks:
  default:
    desc: List all available tasks
    cmds:
      - task -l

  setup:
    desc: Set up the development environment
    cmds:
      # Install uv if not present
      - |
        {{if eq OS "windows"}}
        where uv >nul 2>&1 || (
          echo "uv not found, installing..."
          powershell -Command "iwr https://astral.sh/uv/install.ps1 -useb | iex"
        )
        {{else}}
        if ! command -v uv &> /dev/null; then
          echo "uv not found, installing..."
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH=$PATH:$HOME/.cargo/bin
        fi
        {{end}}
      # Create virtual environment
      - |
        {{if eq OS "windows"}}
        if not exist "{{.VENV_DIR}}" (
          echo "Creating virtual environment using uv..."
          uv venv {{.VENV_DIR}}
        ) else (
          echo "✓ Virtual environment already exists"
        )
        {{else}}
        if [ ! -d "{{.VENV_DIR}}" ]; then 
          echo "Creating virtual environment using uv..."
          uv venv {{.VENV_DIR}}
        else
          echo "✓ Virtual environment already exists"
        fi
        {{end}}
      - task: activate
      - echo "Installing project dependencies using uv sync..."
      - |
        {{if eq OS "windows"}}
        call {{.VENV_DIR}}\Scripts\activate && uv sync -e ".[dev]"
        {{else}}
        source {{.VENV_DIR}}/bin/activate && uv sync -e ".[dev]"
        {{end}}
    status:
      - test -d {{.VENV_DIR}}

  activate:
    desc: Activate the virtual environment (prints activation command for manual use)
    cmds:
      - echo "To activate the virtual environment, run:"
      - echo "{{.VENV_ACTIVATE}}"

  venv-check:
    desc: Check if virtual environment is active, activate if not
    internal: true
    cmds:
      - |
        {{if eq OS "windows"}}
        if "x%VIRTUAL_ENV%" == "x" (
          call {{.VENV_ACTIVATE}}
        )
        {{else}}
        if [ -z "$VIRTUAL_ENV" ]; then
          source {{.VENV_ACTIVATE}}
        fi
        {{end}}

  lint:
    desc: Run all linting checks
    cmds:
      - task: lint:ruff
      - task: lint:pylint
      - task: lint:pyright

  lint:ruff:
    desc: Run ruff linter
    deps: [venv-check]
    cmds:
      - uv run ruff check {{.SRC_DIR}} {{.TESTS_DIR}}

  lint:fix:
    desc: Run ruff linter with auto-fix
    deps: [venv-check]
    cmds:
      - uv run ruff check --fix {{.SRC_DIR}} {{.TESTS_DIR}}

  lint:fix-unsafe:
    desc: Run ruff linter with unsafe auto-fixes
    deps: [venv-check]
    cmds:
      - uv run ruff check --fix --unsafe-fixes {{.SRC_DIR}} {{.TESTS_DIR}}

  lint:pylint:
    desc: Run pylint
    deps: [venv-check]
    cmds:
      - uv run pylint {{.SRC_DIR}}

  lint:pyright:
    desc: Run pyright type checker
    deps: [venv-check]
    cmds:
      - uv run pyright {{.SRC_DIR}}

  test:
    desc: Run all tests
    cmds:
      - task: test:pytest

  test:pytest:
    desc: Run pytest only
    deps: [venv-check]
    cmds:
      - uv run pytest {{.TESTS_DIR}}

  test:coverage:
    desc: Run tests with coverage analysis
    deps: [venv-check]
    cmds:
      - uv run pytest --cov={{.COV_MODULE}} --cov-report=term-missing {{.TESTS_DIR}}

  test:coverage:xml:
    desc: Run tests with coverage analysis and generate XML report
    deps: [venv-check]
    cmds:
      - uv run pytest --cov={{.COV_MODULE}} --cov-branch --cov-report=xml {{.TESTS_DIR}}

  coverage:report:
    desc: Generate a coverage report from existing data
    deps: [venv-check]
    cmds:
      - uv run -m coverage report

  coverage:missing:
    desc: Show lines missing coverage from existing data
    deps: [venv-check]
    cmds:
      - uv run -m coverage report --show-missing

  clean:
    desc: Clean build artifacts and temporary files
    cmds:
      - |
        {{if eq OS "windows"}}
        if exist "build" rd /s /q build
        if exist "dist" rd /s /q dist
        if exist ".pytest_cache" rd /s /q .pytest_cache
        if exist ".coverage" del /f .coverage
        if exist "htmlcov" rd /s /q htmlcov
        if exist "coverage.xml" del /f coverage.xml
        for /d /r . %%d in (__pycache__) do @if exist "%%d" rd /s /q "%%d"
        for /d /r . %%d in (*.egg-info) do @if exist "%%d" rd /s /q "%%d"
        del /s /q *.pyc *.pyo *.pyd 2>nul
        {{else}}
        rm -rf build dist *.egg-info .pytest_cache .coverage htmlcov coverage.xml
        find . -type d -name __pycache__ -exec rm -rf {} +
        find . -type d -name "*.egg-info" -exec rm -rf {} +
        find . -type f -name "*.pyc" -delete
        find . -type f -name "*.pyo" -delete
        find . -type f -name "*.pyd" -delete
        {{end}}

  clean:all:
    desc: Clean everything including virtual environment
    cmds:
      - task: clean
      - |
        {{if eq OS "windows"}}
        if exist "{{.VENV_DIR}}" rd /s /q {{.VENV_DIR}}
        {{else}}
        rm -rf {{.VENV_DIR}}
        {{end}}

  ci:
    desc: Run all checks and tests
    cmds:
      - task: lint
      - task: test:coverage

  ci:full:
    desc: Run all checks and tests in CI mode
    cmds:
      - task: lint
      - task: test:coverage:xml
