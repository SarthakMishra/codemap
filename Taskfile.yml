version: "3"

vars:
  PYTHON: python3
  VENV_DIR: .venv
  SRC_DIR: src
  TESTS_DIR: tests
  COV_MODULE: src/codemap

tasks:
  default:
    desc: List all available tasks
    cmds:
      - task -l

  setup:
    desc: Set up the development environment
    cmds:
      # Check if uv is installed, install if not
      - |
        if ! command -v uv &> /dev/null; then
          echo "uv not found, installing..."
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # Add uv to PATH for current script
          export PATH=$PATH:$HOME/.cargo/bin
        else
          echo "✓ uv is already installed"
        fi
      # Create virtual environment using uv
      - |
        if [ ! -d "{{.VENV_DIR}}" ]; then 
          echo "Creating virtual environment using uv..."
          uv venv {{.VENV_DIR}}
        else
          echo "✓ Virtual environment already exists"
        fi
      - task: activate
      - echo "Installing project dependencies using uv sync..."
      - |
        source {{.VENV_DIR}}/bin/activate
        uv sync -e ".[dev]"
    status:
      - test -d {{.VENV_DIR}}

  activate:
    desc: Activate the virtual environment (prints activation command for manual use)
    cmds:
      - echo "To activate the virtual environment, run:"
      - echo "source {{.VENV_DIR}}/bin/activate"

  venv-check:
    desc: Check if virtual environment is active, activate if not
    internal: true
    status:
      - |
        # Check if VIRTUAL_ENV is set or .venv/bin is in PATH
        if [ -n "$VIRTUAL_ENV" ]; then
          echo "✓ Virtual environment is active: $VIRTUAL_ENV"
          exit 0
        elif echo $PATH | grep -q "{{.VENV_DIR}}/bin"; then
          echo "✓ Virtual environment is in PATH"
          exit 0
        else
          echo "✗ Virtual environment is not active"
          # We return success to allow depending tasks to continue with activation
          exit 0
        fi

  lint:
    desc: Run all linting checks
    cmds:
      - task: lint:ruff
      - task: lint:pylint
      - task: lint:pyright

  lint:ruff:
    desc: Run ruff linter
    deps: [venv-check]
    cmds:
      - 'uv run ruff check {{.SRC_DIR}} {{.TESTS_DIR}}'

  lint:fix:
    desc: Run ruff linter with auto-fix
    deps: [venv-check]
    cmds:
      - 'uv run ruff check --fix {{.SRC_DIR}} {{.TESTS_DIR}}'

  lint:fix-unsafe:
    desc: Run ruff linter with unsafe auto-fixes
    deps: [venv-check]
    cmds:
      - 'uv run ruff check --fix --unsafe-fixes {{.SRC_DIR}} {{.TESTS_DIR}}'

  lint:pylint:
    desc: Run pylint
    deps: [venv-check]
    cmds:
      - 'uv run pylint {{.SRC_DIR}}'

  lint:pyright:
    desc: Run pyright type checker
    deps: [venv-check]
    cmds:
      - 'uv run pyright {{.SRC_DIR}}'

  lint:pyright:verbose:
    desc: Run pyright with verbose output
    deps: [venv-check]
    cmds:
      - 'uv run pyright --verbose {{.SRC_DIR}}'

  lint:pyright:stats:
    desc: Run pyright and show stats
    deps: [venv-check]
    cmds:
      - 'uv run pyright --stats {{.SRC_DIR}}'

  test:
    desc: Run all tests
    cmds:
      - task: test:pytest

  test:pytest:
    desc: Run pytest only
    deps: [venv-check]
    cmds:
      - 'uv run pytest {{.TESTS_DIR}}'

  test:coverage:
    desc: Run tests with coverage analysis
    deps: [venv-check]
    cmds:
      - |
        uv run pytest \
          --cov={{.COV_MODULE}} \
          --cov-report=term-missing \
          {{.TESTS_DIR}}

  coverage:report:
    desc: Generate a coverage report from existing data
    deps: [venv-check]
    cmds:
      - 'uv run -m coverage report'

  coverage:missing:
    desc: Show lines missing coverage from existing data
    deps: [venv-check]
    cmds:
      - 'uv run -m coverage report --show-missing'

  clean:
    desc: Clean build artifacts and temporary files
    cmds:
      - rm -rf build dist *.egg-info .pytest_cache .coverage htmlcov coverage.xml
      - find . -type d -name __pycache__ -exec rm -rf {} +
      - find . -type d -name "*.egg-info" -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete
      - find . -type f -name "*.pyo" -delete
      - find . -type f -name "*.pyd" -delete

  clean:all:
    desc: Clean everything including virtual environment
    cmds:
      - task: clean
      - rm -rf {{.VENV_DIR}}
